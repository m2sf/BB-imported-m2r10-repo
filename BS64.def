(* (C) 2009, 2010 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE BS64;

(* 64-bit Bitset *)

FROM FileIO IMPORT File; (* required for IO *)


(* BS64 type *)

TYPE
    BS64 = OPAQUE RECORD ("B-Type")
        ARRAY 8 OF OCTET; (* 64 bits *)
    END; (* BS64 *)


(* Literal assignment *)

PROCEDURE [:=] assign ( VAR assignTo : BS64;
                        elements     : VARIADIC OF CARDINAL );
(* Assigns a variadic list of values of type CARDINAL to BS64 assignTo.
   This procedure is bound to the := operator for literal assignment. *)


(* accessor *)

PROCEDURE [.] isElement ( CONST set : BS64; element : CARDINAL ) : BOOLEAN;
(* Returns TRUE if element is an element of BS64 set, otherwise FALSE.
   This function is bound to the array operator [ ] and the IN operator
   for rvalues of type BS64. *)


(* mutator *)

PROCEDURE [!] storeValue ( CONST set : BS64;
                           element   : CARDINAL;
                           value     : BOOLEAN );
(* Includes character element in BS64 set if value is TRUE, otherwise
   removes it from set. This procedure is bound to the array operator [ ]
   for lvalues of type BS64. *)


(* counter *)

PROCEDURE [COUNT] elementCount ( CONST set : BS64 ) : CARDINAL;
(* Returns the number of elements in BS64 set. This function is bound
   to pervasive function COUNT for type BS64. *)


(* Dyadic set operations *) 

PROCEDURE [+] union ( CONST set1, set2 : BS64 ) : BS64;
(* Returns the union of BS64 values set1 and set2.
   This function is bound to the + operator for type BS64. *)

PROCEDURE [-] diff ( CONST set1, set2 : BS64 ) : BS64;
(* Returns the set difference of BS64 values set1 and set2.
   This function is bound to the - operator for type BS64. *)

PROCEDURE [*] intersection ( set1, set2 : BS64 ) : BS64;
(* Returns the intersection of BS64 values set1 and set2.
   This function it bound to the * operator for type BS64. *)

PROCEDURE [/] symdiff ( set1, set2 : BS64 ) : BS64;
(* Returns the symmetric set difference of BS64 values set1 and set2.
   This function is bound to the / operator for type BS64. *)


(* Relational operations *)

PROCEDURE [=] isEqual ( set1, set2 : BS64 ) : BOOLEAN;
(* Returns TRUE if BS64 values set1 and set2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type BS64. *)

PROCEDURE [<] isSubset ( set1, set2 : BS64 ) : BOOLEAN;
(* Returns TRUE if BS64 set1 is a true subset of set2, otherwise FALSE.
   This function is bound to operators < and >= for type BS64. *)

PROCEDURE [>] isSuperset ( set1, set2 : BS64 ) : BOOLEAN;
(* Returns TRUE if BS64 set1 is a true superset of set2, otherwise FALSE.
   This function is bound to operators > and <= for type BS64. *)


(* IO operations *)

(* The EBNF for the textual representation of BS64 values is:
    bitsetValue : simpleFormat | compactFormat | bitGroupFormat ;
    simpleFormat : bit+ ;
    compactFormat : base16Digit+ ;
    bitGroupFormat : "{" bit+ ( groupSeparator? bit+ )* "}" ;
    groupSeparator : " " | "." ;
    bit  : "0" | "1" ;
    base16Digit : "0" .. "9" | "A" .. "F" ;
   The number of bits shown is equal to the bitwidth of the BS64 type. *)

PROCEDURE Read ( infile : File; VAR set : BS64 );
(* Reads the textual representation of a BS64 value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the value being read are
     removed from infile
   - the textual representation of the value read is assigned to set
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with a BS64 argument. *)

PROCEDURE Write ( outfile : File; CONST set : BS64 );
(* Writes the value of CHARSET set in simple format to stream outfile. This
   procedure is substituted for invocations of WRITE with a BS64 argument.*)

PROCEDURE WriteF ( outfile      : File;
                   CONST fmtStr : ARRAY OF CHAR;
                   items        : VARIADIC OF CONST BS64 );
(* Writes a formatted textual representation of one or more BS64 values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   BS64 arguments. *)

END BS64.