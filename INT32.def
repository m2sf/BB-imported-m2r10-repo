(* (C) 2009, 2010 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE INT32 [ZTYPE];

(* 32-bit Integer Numbers *) 


FROM FileIO IMPORT File; (* required for IO *)


(* INT32 type *)

TYPE
    INT32 = OPAQUE RECORD
        value : ARRAY 4 OF OCTET; (* 32 bits *)
    END; (* INT32 *)


(* Z-Type bindings to operators, pervasives and primitives: *)


(* Range *) 

CONST [TMIN] minValue = -2147483648;
(* Smallest value of type INT32.
   This value is bound to TMIN for type INT32. *) 

CONST [TMAX] maxValue = 2147483647;
(* Largest value of type INT32.
   This value is bound to TMAX for type INT32. *)


(* Literal assignment *)

PROCEDURE [:=] assign ( VAR assignTo : INT32; literal : ARRAY OF CHAR );
(* Converts string literal to an INT32 value and assigns it to assignTo.
   This procedure is bound to the := operator for literal assignment. *)


(* Type conversions *)

PROCEDURE [::] toCARD  ( n : INT32 ) : CARDINAL;
(* Converts INT32 value n to a CARDINAL value and returns it. This
   function is bound to the :: operator for INT32 to CARDINAL conversion. *)

PROCEDURE [::] toINT ( n : INT32 ) : INTEGER; 
(* Converts INT32 value n to an INTEGER value and returns it. This
   function is bound to the :: operator for INT32 to INTEGER conversion. *)

PROCEDURE [::] fromCARD  ( n : CARDINAL ) : INT32;
(* Converts CARDINAL value n to an INT32 value and returns it. This function
   is bound to the :: operator for CARDINAL to INT32 conversion. *)

PROCEDURE [::] fromINT  ( n : INTEGER ) : INT32;
(* Converts INTEGER value n to an INT32 value and returns it. This function
   is bound to the :: operator for INTEGER to INT32 conversion. *)


(* Monadic arithmetic operations *) 

PROCEDURE [ABS] abs ( n : INT32 ) : INT32;
(* Returns the absolute value of INT32 value n.
   This function is bound to pervasive function ABS for type INT32. *)

PROCEDURE [NEG] neg ( n : INT32 ) : INT32;
(* Returns the sign reversed value of INT32 value n.
   This function is bound to the unary minus operator for type INT32. *)

PROCEDURE [ODD] odd ( n : INT32 ) : BOOLEAN;
(* Returns TRUE if INT32 value n is odd, otherwise FALSE.
   This function is bound to pervasive function ODD for type INT32. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( n1, n2 : INT32 ) : INT32;
(* Adds INT32 values n1 and n2 and returns the result.
   This function is bound to the + operator for type INT32. *)

PROCEDURE [-] sub ( n1, n2 : INT32 ) : INT32;
(* Subtracts INT32 value n2 from n1 and returns the result.
   This function is bound to the - operator for type INT32. *)

PROCEDURE [*] multiply ( n1, n2 : INT32 ) : INT32;
(* Multiplies INT32 values n1 and n2 and returns the result.
   This function it bound to the * operator for type INT32. *)

PROCEDURE [/] divide ( n1, n2 : INT32 ) : INT32;
(* Divives INT32 value n1 by n2 and returns the result.
   This function is bound to the / operator for type INT32. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( n1, n2 : INT32 ) : BOOLEAN;
(* Returns TRUE if INT32 values n1 and n2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type INT32. *)

PROCEDURE [<] isLess ( n1, n2 : INT32 ) : BOOLEAN;
(* Returns TRUE if INT32 value n1 is less than n2, otherwise FASLE.
   This function is bound to operators < and >= for type INT32. *)

PROCEDURE [>] isGreater ( n1, n2 : INT32 ) : BOOLEAN;
(* Returns TRUE if INT32 value n1 is greater than n2, otherwise FALSE.
   This function is bound to operators > and <= for type INT32. *)


(* Scalar conversion primitives *)

CONST digitCapacity = 8; (* maximum digits in native format *)

PROCEDURE [TO] toSXF ( n : INT32; VAR s : ARRAY OF CHAR );
(* Converts INT32 value n to a string in scalar exchange format.
   This procedure is used to synthesise conversions to other scalar types
   when no direct conversion path exists. *)

PROCEDURE [FROM] fromSXF ( VAR n : INT32; CONST s : ARRAY OF CHAR );
(* Converts a string in scalar exchange format to an INT32 value.
   This procedure is used to synthesise conversions from other scalar types
   when no direct conversion path exists. *)


(* IO operations *)

PROCEDURE Read( infile : File; VAR n : INT32 );
(* Reads the textual representation of an INT32 value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the numeral being read are
     removed from infile
   - the numeric value of the numeral string read is assigned to the variable
     passed in for n
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with an INT32 argument. *)

PROCEDURE Write( outfile : File; n : INT32 );
(* Writes the textual representation of value n to stream outfile. This
   procedure is substituted for invocations of WRITE with an INT32 argument.*)

PROCEDURE WriteF ( outfile      : File;
                   CONST fmtStr : ARRAY OF CHAR;
                   items        : VARIADIC OF INT32 );
(* Writes a formatted textual representation of one or more INT32 values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   INT32 arguments. *)

END INT32. (* thirty-two *)