(* (C) 2012-2016 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

BLUEPRINT ProtoCardinal [ProtoScalar];

(* Specialized Canonical Blueprint for Cardinal ADTs *)


(* Required Module Type *)

MODULE TYPE = { IsComputational, IsNumber, IsScalar, IsCountable };

LITERAL = WholeNumberLiteral;
(* Whole number literals shall be compatible. *)


(* Required Constants *)

(* Scalar Properties *)

CONST [TBASE] Base = 2;
(* Cardinal ADTs are always encoded in radix 2. *)

CONST [TPRECISION] Precision : CARDINAL; (* 1 to 4000 *)
(* Cardinal ADTs shall define the maximum number of encodable digits. *)

CONST [TMINEXP] EMin = 0;
(* Cardinal ADTs shall define EMin with a value of zero. *)

CONST [TMAXEXP] EMax = 0;
(* Cardinal ADTs shall define EMax with a value of zero. *)


(* Memory Management *)

CONST [TDYN] IsDynamic = FALSE;
(* Cardinal ADTs are always statically allocated. *)


(* Required Procedures *)

(* Introspection *)

(* Smallest Value *)

PROCEDURE [TMIN] minValue : ProtoCardinal;
(* Cardinal ADTs are required to bind to TMIN. *)


(* Largest Value *)

PROCEDURE [TMAX] maxValue : ProtoCardinal;
(* Cardinal ADTs are required to bind to TMIN. *)


(* Numeric Conversion *)

(* Conversion to Scalar Exchange Format *)

PROCEDURE [SXF] ToSXF ( value : ProtoCardinal; VAR sxf : ARRAY OF OCTET );
(* Required procedure to convert a cardinal to scalar exchange format. *)


(* Conversion from Scalar Exchange Format *)

PROCEDURE [VAL] FromSXF ( sxf : ARRAY OF OCTET; VAR value : ProtoCardinal );
(* Required procedure to convert from scalar exchange format to a cardinal. *)


(* Absolute Value *)

PROCEDURE [ABS] abs ( n : ProtoCardinal ) : ProtoCardinal;
(* Required function to return the absolute value of a cardinal. *)


(* Odd/Even Test *)

PROCEDURE [ODD] isOdd ( n : ProtoCardinal ) : ProtoCardinal;
(* Required function to test whether a cardinal is odd or even. *)


(* Arithmetic Operations *)

PROCEDURE [+] sum ( n, m : ProtoCardinal ) : ProtoCardinal;
(* Required function to return the sum of two cardinals. *)

PROCEDURE [-] diff ( n, m : ProtoCardinal ) : ProtoCardinal;
(* Required function to return the difference of two cardinals. *)

PROCEDURE [*] product ( n, m : ProtoCardinal ) : ProtoCardinal;
(* Required function to return the product of two cardinals. *)

PROCEDURE [DIV] quotient ( n, m : ProtoCardinal ) : ProtoCardinal;
(* Required function to return the quotient of two cardinals,
   using Euclidean integer division. *)

PROCEDURE [MOD] modulus ( n, m : ProtoCardinal ) : ProtoCardinal;
(* Function to return the modulus of two cardinals. *)


(* Relational Operations *)

PROCEDURE [=] isEqual ( n, m : ProtoCardinal ) : BOOLEAN;
(* Required function to test the equality of two cardinals. *)

(* The operation for # is synthesised from this binding. *)


PROCEDURE [<] isLess ( n, m : ProtoCardinal ) : BOOLEAN;
(* Required function to test if one cardinal is less than another. *)

(* The operation for >= is synthesised from this binding. *)


PROCEDURE [>] isGreater ( n, m : ProtoCardinal ) : BOOLEAN;
(* Required function to test if one cardinal is greater than another. *)

(* The operation for <= is synthesised from this binding. *)


(* Inhibited Bindings *)

PROCEDURE [+/-] = NONE; (* inhibited *)
(* Cardinal ADTs may not be required to bind to sign reversal. *)

PROCEDURE [/] = NONE; (* inhibited *)
(* Cardinal ADTs may not be required to bind to / (division). *)


END ProtoCardinal.