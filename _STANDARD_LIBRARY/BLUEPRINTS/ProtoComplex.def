(* (C) 2012-2015 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

BLUEPRINT ProtoComplex [ProtoNonScalar];

(* Specialized Blueprint for Complex Number ADTs *)


(* Required Module Type *)

MODULE TYPE = RECORD;
(* All complex number ADTs shall be statically allocatable. *)

LITERAL = { REAL, REAL };
(* Structured literals with two real values shall be compatible. *)


(* Required Constants *)

(* Classification *)

CONST [TCOMP] isComputational = TRUE;
(* Complex number ADTs are always computational. *)

CONST [TNUM] isNumeric = TRUE;
(* Complex number ADTs are always numeric. *)

CONST isScalar = FALSE;
(* Complex number ADTs are never scalar. *)


(* Memory Management *)

CONST [TDYN] isDynamic = FALSE;
(* Complex number ADTs are always statically allocated. *)


(* Required Procedures *)

(* Sign Operations *)

PROCEDURE [ABS] abs ( z : ProtoComplex ) : ProtoComplex;
(* Required function to return the sign removed value of a complex number. *)

PROCEDURE [+/-] neg ( z : ProtoComplex ) : ProtoComplex;
(* Required function to return the sign reversed value of a complex number. *)


(* Arithmetic Operations *)

PROCEDURE [+] add ( z1, z2 : ProtoComplex ) : ProtoComplex;
(* Required function to return the sum of two complex numbers. *)

PROCEDURE [-] subtract ( z1, z2 : ProtoComplex ) : ProtoComplex;
(* Required function to return the difference of two complex numbers. *)

PROCEDURE [*] multiply ( z1, z2 : ProtoComplex ) : ProtoComplex;
(* Required function to return the product of two complex numbers. *)

PROCEDURE [/] divide ( z1, z2 : ProtoComplex ) : ProtoComplex;
(* Required function to return the quotient of two complex numbers. *)


(* Relational Operations *)

PROCEDURE [=] isEqual ( z1, z2 : ProtoComplex ) : BOOLEAN;
(* Required function to test the equality of two complex numbers. *)

(* The operation for # is synthesised from this binding. *)


(* Inhibited Bindings *)

PROCEDURE [TMIN] = NONE; (* inhibited *)
(* Complex number ADTs may not be required to bind to TMIN. *)

PROCEDURE [TMAX] = NONE; (* inhibited *)
(* Complex number ADTs may not be required to bind to TMAX. *)

PROCEDURE [SXF] = NONE; (* inhibited *)
(* Complex number ADTs may not be required to bind to SXF. *)

PROCEDURE [VAL] = NONE; (* inhibited *)
(* Complex number ADTs may not be required to bind to VAL. *)

PROCEDURE [ODD] = NONE; (* inhibited *)
(* Complex number ADTs may not be required to bind to ODD. *)

PROCEDURE [DIV] = NONE; (* inhibited *)
(* Complex number ADTs may not be required to bind to DIV. *)

PROCEDURE [MOD] = NONE; (* inhibited *)
(* Complex number ADTs may not be required to bind to MOD. *)

PROCEDURE [<] = NONE; (* inhibited *)
(* Complex number ADTs may not be required to bind to < (less-than). *)

PROCEDURE [>] = NONE; (* inhibited *)
(* Complex number ADTs may not be required to bind to > (greater-than). *)


END ProtoComplex.