(* (C) 2014 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Blueprint for Statically Allocatable String ADTs *)

BLUEPRINT ProtoStaticString [ProtoStaticCollection];

REFERENTIAL CharType (* CHAR or UNICHAR *), LoopBodyType, POSINT;


(* Required Module Type *)

MODULE TYPE = RECORD := CHAR | UNICHAR;
(* Static string ADTs must be records to be statically allocatable,
   quoted literals of base type CHAR or UNICHAR are compatible. *)

MODULE TYPE = OPAQUE RECORD := CHAR | UNICHAR;


(* Required Constants *)

(* Orderedness *)

CONST [DESCENDING] isOrdered = TRUE;
(* Required constant to define whether conforming ADTs shall be ordered.
   Its value is always TRUE for strings. *)


(* NIL Storage *)

CONST [NIL] allowsNilStorage = FALSE;
(* Required constant to define whether NIL is a storable value.
   Its value is always FALSE for strings. *)


(* Support for Invalid Accessor Retrieval Intercept *)

CONST * invAccessorRetrievalIntercept = TRUE;
(* Required constant to define whether invalid accessor retrieval errors
   may be intercepted by user defined handlers. Always TRUE for strings. *)


(* Required Procedures *)


(* Introspection *)

(* Binding to Predefined Function TLIMIT *)

PROCEDURE [TLIMIT] capacityLimit : LONGCARD;
(* Required function to return the allocation capacity limit of the ADT. *)

(* An expression of the form TLIMIT(StringADT)
   is synthesised as StringADT.capacityLimit(). *)


(* Binding to Predefined Function LENGTH *)

PROCEDURE [LENGTH] length ( string : ProtoStaticString ) : POSINT;
(* Required function to return the length of a string. *)

(* An expression of the form LENGTH(string)
   is synthesised as StringADT.length(string). *)


(* Literal Assignment *)

(* Binding to the := Operator *)

PROCEDURE [:=] assignQuotedLiteral
  ( VAR string : ProtoStaticString;
    literal : ARRAY OF CharType );
(* Required procedure to assign a quoted literal to a string. *)

(* A statement of the form string := "foo bar baz"
   is synthesised as StringADT.assignQuotedLiteral(string, "foo bar baz"). *)


(* Copying *)

(* Binding to Predefined Procedure COPY *)

PROCEDURE [COPY] copy
  ( source : ProtoStaticString; VAR target : ProtoStaticString );
(* Required procedure to copy the contents of a source string into a
   target string. *)

(* A statement of the form string1 := string2
   is synthesised as StringADT.copy(string2, string1). *)


(* Value Storage *)

(* Binding to Predefined Procedure STORE *)

PROCEDURE [STORE] replaceCharAtIndex
  ( VAR string : ProtoStaticString; index : POSINT; char : CharType );
  (* Required procedure to store a character in a string at a given index. *)

(* A statement of the form string[index] := char
   is equivalent to STORE(string, index, char)
   and is synthesised as StringADT.replaceCharAtIndex(string, index, char). *)


(* Value Retrieval *)

(* Binding to Predefined Function RETRIEVE *)

PROCEDURE [RETRIEVE] charAtIndex
  ( CONST string : ProtoStaticString; index : POSINT ) : CharType;
(* Required function to retrieve a character stored at a given index
   in a string. *)

(* An expression of the form string[index]
   is equivalent to RETRIEVE(string, index)
   and is synthesised as StringADT.charAtIndex(string, index). *)


(* Index Out Of Range Retrieval Error Handling *)

(* A user defined index-out-of-range handler function may be used to change
   the default behaviour when RETRIEVE is called with an out-of-range index. *)

(* Handler Type *)

invAccessorRetrievalIntercept ->
TYPE HandlerType = PROCEDURE ( VAR CharType ) : BOOLEAN;
(* Required procedure type for user defined index-out-of-range handlers. *)

(* An example of an index-out-of-range handler is given below:
   
   PROCEDURE mayAbortOnIndexOutOfRange
     ( VAR charToReturn : CHAR ) : BOOLEAN;
   BEGIN
     charToReturn := 0u0;
     RETURN FALSE
   END mayAbortOnIndexOutOfRange;
   
   This handler tells its caller not to abort and to return ASCII NUL. *)


(* Handler Installation *)

invAccessorRetrievalIntercept ->
PROCEDURE installIndexOutOfRangeHandler ( handler : HandlerType );
(* Required procedure to install a user defined index-out-of-range handler. *)


(* Value Insertion *)

(* Binding to Predefined Procedure INSERT *)

PROCEDURE [INSERT] insertCharsAtIndex
  ( VAR targetStr : ProtoStaticString;
    index : POSINT;
    chars : ARRAY OF CharType );
(* Required procedure to insert a character array into a target string,
   starting at a given index. *)

(* A statement of the form INSERT(string, index, "foo")
     is synthesised as StringADT.insertCharsAtIndex(string, index, "foo"). *)


PROCEDURE insertStringAtIndex
  ( VAR targetStr : ProtoStaticString;
    index : POSINT;
    sourceStr : ProtoStaticString );
(* Required procedure to insert a source string into a target string,
   starting at a given index. *)


(* Value Removal *)

PROCEDURE [REMOVE] removeCharsAtIndex
  ( string : ProtoStaticString; index : INTEGER; n : POSINT );
(* Required rocedure to remove n characters from a string,
   starting at a given index. *)

(* A statement of the form REMOVE(string, index, 5)
   is synthesised as StringADT.removeCharsAtIndex(string, index, 5).
   
   An assignment of the form string[index] := NIL
   is equivalent to REMOVE(string, index, 1)
   and synthesised as StringADT.removeCharsAtIndex(string, index, 1). *)


(* Iteration *)

(* Binding to FOR IN iterator *)

TYPE LoopBodyType = PROCEDURE ( VAR ProtoStaticString, CONST POSINT );
(* Required procedure type to synthesise the body of a for loop. *)

PROCEDURE [FOR] forIterator
  ( VAR string : ProtoStaticArray;
    doStatements : LoopBodyType;
    ascending : BOOLEAN );
(* Required procedure to iterate over all index/charater pairs of an array
   in a given order and execute the passed in doStatements for each pair. *)
   
(* A statement of the form
     FOR char IN string DO statementSeq END
   is synthesised in two steps.
   
   The loop header is synthesised as
     StringADT.forIterator(string, forLoopBody, TRUE);
   
   The loop body is synthesised as
     PROCEDURE forLoopBody
       ( VAR string : StringADT; CONST index : POSINT ) <*INLINE*>;
     BEGIN statementSeq END forLoopBody;
   
   The loop header of a FOR DESCENDING statement is sythesised with
   FALSE passed for parameter ascending in the call to forIterator. *)


(* Concatenation *)

(* Binding to Predefined Procedure CONCAT *)

PROCEDURE [CONCAT] concat
  ( VAR result : ProtoStaticString;
    arglist : ARGLIST OF { lit : ARRAY OF CharType; s : ProtoStaticString } );
(* Required procedure to concatenate an alternating list of character string
   literals and string ADT variables, and return the result in a string ADT
   variable. Empty literals and NIL values in the argument list are ignored. *)

(* Concatenation of consecutive string literals takes place at compile time.
   Thus, string literals do not occur consecutively in run time expressions.
      
   Invocations of CONCAT are mapped to function StringADT.concat as follows:
   
   A statement of the form
     CONCAT(resultStr, str1, str2);
   is transformed at compile time into a procedure call of the form
     StringADT.concat(resultStr, "", str1, "", str2);

   A statement of the form
     CONCAT(resultStr, str1, "literal", str2);
   is transfored at compile time into a procedure call of the form
     StringADT.concat(resultStr, "", str1, "lit", str2);
      
   A statement of the form
     CONCAT(resultStr, "lit", str1, str2);
   is transformed at compile time into a procedure call of the form
     StringADT.concat(resultStr, "lit", str2, "", lit3);
   
   A statement of the form
     CONCAT(resultStr, "lit1", str, "lit2")
   is transformed at compile time into a procedure call of the form
     StringADT.concat(resultStr, "lit1", str, "lit2", NIL);
   
   When a concatenation expression is passed as an argument to a procedure
   it is first assigned to a temporary variable,  which is then passed to
   as a parameter in the subsequent procedure call.
   
   A procedure invocation of the form
     FooProc(str1 + str2);
   is transformed at compile time into a statement sequence of the form
     CONCAT(temp, str1, str2);
     FooProc(temp);
   
   A function invocation of the form
     foo := BarFunc(str1 + str2);
   is transformed at compile time into a statement sequence of the form   
     CONCAT(temp, str1, str2);
     foo := BarFunc(temp); *)


(* Slicing *)

(* Binding to the .. Operator *)

PROCEDURE [..] copySlice
  ( target : ProtoStaticString; tgtStartIndex, tgtEndIndex : INTEGER;
    source : ProtoStaticString; srcStartIndex, srcEndIndex : INTEGER );
(* Required procedure to copy a slice from a source string, indicated by
   a given start and end index,  into a slice within a target string,
   indicated by a given start and end index.
   Consult the documentation for specific details. *)

(* An assignment of the form
     target := source[2..5];
   is transformed at compile time into a procedure call of the form
     StringADT.copySlice(target, 0, -1, source, 2, 5);
   
   An assignment of the form
     target[2..5] := source;
   is transformed at compile time into a procedure call of the form
     StringADT.copySlice(target, 2, 5, source, 0, -1);
   
   An assignment of the form
     target[1..4] := source[2..5];
   is transformed at compile time into a procedure call of the form
     StringADT.copySlice(target, 1, 4, source, 2, 5);
   
   When a slice expression is passed as an argument to a procedure, it is
   first assigned to a temporary variable,  which is then passed to
   as a parameter in the subsequent procedure call.

   A procedure invocation of the form
     FooProc(string[2..5]);
   is transformed at compile time into a statement sequence of the form
     StringADT.copySlice(temp, 0, -1, string, 2, 5);
     FooProc(temp);
   
   A function invocation of the form
     foo := BarFunc(string[2..5]);
   is transformed at compile time into a statement sequence of the form
     StringADT.copySlice(temp, 0, -1, string, 2, 5);
     foo := BarFunc(temp); *)


(* Relational Operations *)

(* Binding to the = and # Operators *)

PROCEDURE [=] isEqual ( string1, string2 : ProtoString ) : BOOLEAN;
(* Required function to test the equivalence of two strings. *)

(* An expression of the form string1 = string2
   is synthesised as StringADT.isEqual(string1, string2). *)

(* The operation for the # operator
   is synthesized as NOT (string1 = string2). *)


(* Binding to the < and >= Operators *)

PROCEDURE [<] isLess ( string1, string2 : ProtoStaticString ) : BOOLEAN;
(* Required procedure to test if the value of a string comes lexically
   after another. *)

(* An expression of the form string1 < string2
   is synthesised as StringADT.isLess(string1, string2). *)

(* The operation for the >= operator
   is synthesized as NOT (string1 < string2) *)


(* Binding to the > and <= Operators *)

PROCEDURE [>] isGreater ( string1, string2 : ProtoStaticString ) : BOOLEAN;
(* Required procedure to test if the value of a string comes lexically
   before another. *)

(* An expression of the form string1 > string2
   is synthesised as StringADT.isGreater(string1, string2). *)

(* The operation for the <= operator
   is synthesized as NOT (string1 > string2) *)


(* Conditionally Inhibited Bindings *)

(* None *)


(* Unconditionally Inhibited Bindings *)

(* Membership Test *)

(* Operation IN is not meaningful for static string ADTs.
   Conforming blueprints may not require binding to IN. *)

PROCEDURE [IN] NIL; (* inhibited *)


(* Set Operations *)

(* Operation SUBSET is not meaningful for static string ADTs.
   Conforming blueprints may not require binding to SUBSET. *)

PROCEDURE [SUBSET] NIL; (* inhibited *)


END ProtoStaticString.