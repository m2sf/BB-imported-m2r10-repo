(* (C) 2012-2014 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Specialised Blueprint for Real Number ADTs *)

BLUEPRINT ProtoReal [ProtoScalar]; (* conforms to ProtoScalar *)

(* ProtoReal ADTs must be opaque records to be statically allocatable *)

MODULE TYPE = OPAQUE RECORD (* uses real number literals *) := REAL;


(* Bindings required for ProtoReal ADTs *)


(* Required Constants *)

CONST [TSIGNED] isSigned : BOOLEAN;
(* whether the ADT is signed or not *)

CONST [TBASE] base : CARDINAL;
(* radix of the ADT's internal representation, 2 or 10 *)

CONST [TPRECISION] precision : [1..4000] OF CARDINAL;
(* how many digits the ADT can encode in its significand *)

CONST [TMINEXP] eMin : INTEGER;
(* value of the smallest exponent the ADT can encode *)

CONST [TMAXEXP] eMax : CARDINAL;
(* value of the largest exponent the ADT can encode *)


(* Required Procedures *)

(* Bindings to pervasive functions TMIN and TMAX *)

PROCEDURE [TMIN] minValue : ProtoReal;
(* function to return the minimal value of the ADT *)

PROCEDURE [TMAX] maxValue : ProtoReal;
(* function to return the maximal value of the ADT *)


(* Bindings to scalar conversion primitives *)

PROCEDURE [SXF] toSXF ( value : ProtoReal; VAR sxf : ARRAY OF OCTET );
(* procedure to convert a literal to a value in scalar exchange format *)

PROCEDURE [VAL] fromSXF ( sxf : ARRAY OF OCTET; VAR value : ProtoReal );
(* procedure to convert value in scalar exchange format to the ADT *)


(* The assignment of literal values is synthesised from SXF and VAL *)


PROCEDURE [ABS] abs ( r : ProtoReal ) : ProtoReal;
(* function to bind to the ABS operator for operands of the ADT *)

PROCEDURE [NEG] neg ( r : ProtoReal ) : ProtoReal;
(* function to bind to the NEG operator for operands of the ADT. *)

(* binding NEG is only permitted if constant isSigned is defined to be TRUE. *)


(* Bindings to dyadic operations *)

PROCEDURE [+] add ( r1, r2 : ProtoReal ) : ProtoReal;
(* function to bind to the + operator for operands of the ADT *)

(* The operation for the ++ statement is synthesized as r := r + VAL(1.0) *)

PROCEDURE [-] subtract ( r1, r2 : ProtoReal ) : ProtoReal;
(* function to bind to the - operator for operands of the ADT *)

(* The operation for the -- statement is synthesized as r := r - VAL(1.0) *)

PROCEDURE [*] multiply ( r1, r2 : ProtoReal ) : ProtoReal;
(* function to bind to the * operator for operands of the ADT *)

PROCEDURE [/] divide ( r1, r2 : ProtoReal ) : ProtoReal;
(* function to bind to the / operator for operands of the ADT *)


(* Bindings to relational operations *)

PROCEDURE [=] isEqual ( r1, r2 : ProtoReal ) : BOOLEAN;
(* function to bind to the = operator for operands of the ADT *)

(* The operation for the # operator is synthesized as NOT (r1 = r2) *)

PROCEDURE [>] isGreater ( r1, r2 : ProtoReal ) : BOOLEAN;
(* function to bind to the > operator for operands of the ADT *)

(* The operation for the <= operator is synthesized as NOT (r1 > r2) *)

PROCEDURE [<] isLess ( r1, r2 : ProtoReal ) : BOOLEAN;
(* function to bind to the < operator for operands of the ADT *)

(* The operation for the >= operator is synthesized as NOT (r1 < r2) *)


END ProtoReal.