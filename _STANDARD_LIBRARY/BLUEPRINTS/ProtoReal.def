(* (C) 2012-2015 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

BLUEPRINT ProtoReal [ProtoScalar];

(* Specialized Blueprint for Real Number ADTs *)


(* Required Module Type *)

MODULE TYPE = RECORD;
(* Real number ADTs shall be statically allocatable. *)

LITERAL = REAL;
(* Real number literals shall be compatible. *)


(* Required Constants *)

(* Classification *)

CONST [TCOMP] isComputational = TRUE;
(* Real number ADTs are always computational. *)

CONST [TNUM] isNumeric = TRUE;
(* Real number ADTs are always numeric. *)

CONST isScalar = TRUE;
(* Real number ADTs are always scalar. *)

CONST isCountable = FALSE;
(* Real number ADTs are always uncountable. *)


(* Scalar Properties *)

CONST [TSIGNED] isSigned = TRUE;
(* Real number ADTs are always signed. *)

CONST [TBASE] base : CARDINAL; (* either 2 or 10 *)
(* Real number shall define the radix in which values are encoded. *)

CONST [TPRECISION] precision : CARDINAL; (* 1 to 4000 *)
(* Real number ADTs shall define the maximum number of encodable digits. *)

CONST [TMINEXP] eMin : INTEGER;
(* Real number ADTs shall define the smallest encodable exponent. *)

CONST [TMAXEXP] eMax : INTEGER;
(* Real number ADTs shall define the largest encodable exponent. *)


(* Memory Management *)

CONST [TDYN] isDynamic = FALSE;
(* Real number ADTs are always statically allocated. *)


(* Required Procedures *)

(* Introspection *)

(* Smallest Value *)

PROCEDURE [TMIN] minValue : ProtoReal;
(* Integer ADTs are required to bind to TMIN. *)


(* Largest Value *)

PROCEDURE [TMAX] maxValue : ProtoReal;
(* Integer ADTs are required to bind to TMIN. *)


(* Numeric Conversion *)

(* Conversion to Scalar Exchange Format *)

PROCEDURE [SXF] toSXF ( value : ProtoReal; VAR sxf : ARRAY OF OCTET );
(* Required procedure to convert a real number to scalar exchange format. *)


(* Conversion from Scalar Exchange Format *)

PROCEDURE [VAL] fromSXF ( sxf : ARRAY OF OCTET; VAR value : ProtoReal );
(* Required procedure to convert from scalar exchange format to real. *)


(* Absolute Value *)

PROCEDURE [ABS] abs ( r : ProtoReal ) : ProtoReal;
(* Required function to return the absolute value of a real number. *)


(* Sign Reversal *)

PROCEDURE [+/-] neg ( r : ProtoReal ) : ProtoReal;
(* Required function to return the sign reversed value of a real number. *)


(* Arithmetic Operations *)

PROCEDURE [+] add ( r1, r2 : ProtoReal ) : ProtoReal;
(* Required function to return the sum of two real numbers. *)

PROCEDURE [-] subtract ( r1, r2 : ProtoReal ) : ProtoReal;
(* Required function to return the difference of two real numbers. *)

PROCEDURE [*] multiply ( r1, r2 : ProtoReal ) : ProtoReal;
(* Required function to return the product of two real numbers. *)

PROCEDURE [/] divide ( r1, r2 : ProtoReal ) : ProtoReal;
(* Required function to return the quotient of two real numbers. *)


(* Relational Operations *)

PROCEDURE [=] isEqual ( r1, r2 : ProtoReal ) : BOOLEAN;
(* Required function to test the equality of two real numbers. *)

(* The operation for # is synthesised from this binding. *)


PROCEDURE [<] isLess ( r1, r2 : ProtoReal ) : BOOLEAN;
(* Required function to test if one real number is less than another. *)

(* The operation for >= is synthesised from this binding. *)


PROCEDURE [>] isGreater ( r1, r2 : ProtoReal ) : BOOLEAN;
(* Required function to test if one real number is greater than another. *)

(* The operation for <= is synthesised from this binding. *)


(* Inhibited Bindings *)

PROCEDURE [ODD] = NONE; (* inhibited *)
(* Real number ADTs may not be required to bind to ODD. *)

PROCEDURE [DIV] = NONE; (* inhibited *)
(* Real number ADTs may not be required to bind to DIV. *)

PROCEDURE [MOD] = NONE; (* inhibited *)
(* Real number ADTs may not be required to bind to MOD. *)


END ProtoReal.