(* (C) 2012-2014 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Specialised Blueprint for Whole Number ADTs *)

BLUEPRINT ProtoInteger [ProtoScalar]; (* conforms to ProtoScalar *)

(* ProtoInteger ADTs must be opaque records to be statically allocatable *)

MODULE TYPE = OPAQUE RECORD (* uses integer literals *) := INTEGER;


(* Bindings required for ProtoInteger ADTs *)


(* Required Constants *)

CONST [TSIGNED] isSigned = TRUE;
(* integers are always signed *)

CONST [TBASE] base : CARDINAL;
(* radix in which the integer is encoded, 2 or 10 *)

CONST [TPRECISION] precision : [1..4000] OF CARDINAL;
(* maximum number of digits the integer ADT can encode *)

CONST [TMINEXP] eMin = 0;
(* integers always have an exponent of zero *)

CONST [TMAXEXP] eMax = 0;
(* integers always have an exponent of zero *)


(* Required Procedures *)

(* Bindings to predefined functions TMIN and TMAX *)

PROCEDURE [TMIN] minValue : ProtoInteger;
(* function to return the minimal value of the integer ADT *)

PROCEDURE [TMAX] maxValue : ProtoInteger;
(* function to return the maximal value of the integer ADT *)


(* Bindings to scalar conversion primitives *)

PROCEDURE [SXF] toSXF ( lexeme : ARRAY OF CHAR; VAR sxf : ARRAY OF OCTET );
(* procedure to convert a literal to a value in scalar exchange format *)

PROCEDURE [VAL] fromSXF ( sxf : ARRAY OF OCTET; VAR value : ProtoInteger );
(* procedure to convert value in scalar exchange format to the ADT *)


(* The assignment of literal values is synthesised from SXF and VAL *)


PROCEDURE [ABS] abs ( i : ProtoInteger ) : ProtoInteger;
(* function to bind to predefined function ABS for operands of the integer ADT *)

PROCEDURE [NEG] neg ( i : ProtoInteger ) : ProtoInteger;
(* function to bind to predefined function NEG for operands of the integer ADT *)

PROCEDURE [ODD] odd ( i : ProtoInteger ) : BOOLEAN;
(* function to bind to predefined function ODD for operands of the integer ADT *)


(* Bindings to dyadic operations *)

PROCEDURE [+] add ( i, j : ProtoInteger ) : ProtoInteger;
(* function to bind to the + operator for operands of the integer ADT *)

(* The operation for the ++ statement is synthesized as i := i + VAL(1) *)

PROCEDURE [-] subtract ( i, j : ProtoInteger ) : ProtoInteger;
(* function to bind to the - operator for operands of the integer ADT *)

(* The operation for the -- statement is synthesized as i := i - VAL(1) *)

PROCEDURE [*] multiply ( i, j : ProtoInteger ) : ProtoInteger;
(* function to bind to the * operator for operands of the integer ADT *)

PROCEDURE [DIV] divide ( i, j : ProtoInteger ) : ProtoInteger;
(* function to bind to the DIV operator for operands of the integer ADT *)

PROCEDURE [MOD] modulus ( i, j : ProtoInteger ) : ProtoInteger;
(* function to bind to the MOD operator for operands of the integer ADT *)


(* Bindings to relational operations *)

PROCEDURE [=] isEqual ( i, j : ProtoInteger ) : BOOLEAN;
(* function to bind to the = operator for operands of the integer ADT *)

(* The operation for the # operator is synthesized as NOT (i = j) *)

PROCEDURE [>] isGreater ( i, j : ProtoInteger ) : BOOLEAN;
(* function to bind to the > operator for operands of the integer ADT *)

(* The operation for the <= operator is synthesized as NOT (i > j) *)

PROCEDURE [<] isLess ( i, j : ProtoInteger ) : BOOLEAN;
(* function to bind to the < operator for operands of the integer ADT *)

(* The operation for the >= operator is synthesized as NOT (i < j) *)


END ProtoInteger.