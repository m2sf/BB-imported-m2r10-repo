(* (C) 2012-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Specialised Blueprint for Whole Number ADTs *)

BLUEPRINT ProtoInteger [ProtoScalar]; (* conforms to ProtoScalar *)

(* ProtoInteger ADTs must be opaque records to be statically allocatable,
   integer literals are used *)

TYPE ProtoInteger = OPAQUE RECORD := INTEGER;


(* Bindings required for ProtoInteger ADTs *)


(* Recommended bindings to pervasive functions TSIG and TEXP:

CONST [TSIG] maxSignificandDigits = n ;

CONST [TEXP] maxExponentDigits = 0 ;

*)


(* Bindings to pervasive functions TMIN and TMAX *)

PROCEDURE [TMIN] minValue : ProtoInteger;
(* procedure to return minimal value of a whole number ADT *)

PROCEDURE [TMAX] maxValue : ProtoInteger;
(* procedure to return maximal value of a whole number ADT *)


(* Bindings to scalar conversion primitives *)

PROCEDURE [SXF] toSXF ( lexeme : ARRAY OF CHAR; VAR sxf : ARRAY OF OCTET );
(* procedure to convert a literal to a value in scalar exchange format *)

PROCEDURE [VAL] fromSXF ( sxf : ARRAY OF OCTET; VAR value : ProtoInteger );
(* procedure to convert value in scalar exchange format to the ADT *)


(* Binding to assignment operator for non-literal values *)

PROCEDURE [:=] assign ( VAR left : ProtoInteger; right : ProtoInteger );

(* The assignment of literal values is synthesised from SXF and VAL *)


PROCEDURE [ABS] abs ( i : ProtoInteger ) : ProtoInteger;
(* procedure to bind to pervasive ABS for operands of the ProtoInteger ADT *)

PROCEDURE [NEG] neg ( i : ProtoInteger ) : ProtoInteger;
(* procedure to bind to pervasive NEG for operands of the ProtoInteger ADT *)

PROCEDURE [ODD] odd ( i : ProtoInteger ) : BOOLEAN;
(* procedure to bind to pervasive ODD for operands of the ProtoInteger ADT *)


(* Bindings to dyadic operations *)

PROCEDURE [+] add ( i, j : ProtoInteger ) : ProtoInteger;
(* procedure to bind to the + operator for operands of the ProtoInteger ADT *)

(* The operation for the ++ statement is synthesized as i := i + VAL(1) *)

PROCEDURE [-] subtract ( i, j : ProtoInteger ) : ProtoInteger;
(* procedure to bind to the - operator for operands of the ProtoInteger ADT *)

(* The operation for the -- statement is synthesized as i := i - VAL(1) *)

PROCEDURE [*] multiply ( i, j : ProtoInteger ) : ProtoInteger;
(* procedure to bind to the * operator for operands of the ProtoInteger ADT *)

PROCEDURE [DIV] divide ( i, j : ProtoInteger ) : ProtoInteger;
(* procedure to bind to the DIV operator for operands of the ProtoInteger ADT *)

PROCEDURE [MOD] modulo ( i, j : ProtoInteger ) : ProtoInteger;
(* procedure to bind to the MOD operator for operands of the ProtoInteger ADT *)


(* Bindings to relational operations *)

PROCEDURE [=] isEqual ( i, j : ProtoInteger ) : BOOLEAN;
(* procedure to bind to the = operator for operands of the ProtoInteger ADT *)

(* The operation for the # operator is synthesized as NOT (i = j) *)

PROCEDURE [>] isGreater ( i, j : ProtoInteger ) : BOOLEAN;
(* procedure to bind to the > operator for operands of the ProtoInteger ADT *)

(* The operation for the <= operator is synthesized as NOT (i > j) *)

PROCEDURE [<] isLess ( i, j : ProtoInteger ) : BOOLEAN;
(* procedure to bind to the < operator for operands of the ProtoInteger ADT *)

(* The operation for the >= operator is synthesized as NOT (i < j) *)


END ProtoInteger.