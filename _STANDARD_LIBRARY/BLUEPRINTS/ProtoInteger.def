(* (C) 2012-2015 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

BLUEPRINT ProtoInteger [ProtoScalar];

(* Specialized Blueprint for Integer ADTs *)


(* Required Module Type *)

MODULE TYPE = { isComputational, isNumber, isScalar, isCountable, isSigned };

TLITERAL = wholeNumberLiteral;
(* Whole number literals shall be compatible. *)


(* Required Constants *)

(* Scalar Properties *)

CONST [TBASE] base = 2;
(* Integer ADTs are always encoded in radix 2. *)

CONST [TPRECISION] precision : CARDINAL; (* 1 to 4000 *)
(* Integer ADTs shall define the maximum number of encodable digits. *)

CONST [TMINEXP] eMin = 0;
(* Integer ADTs shall define eMin with a value of zero. *)

CONST [TMAXEXP] eMax = 0;
(* Integer ADTs shall define eMax with a value of zero. *)


(* Memory Management *)

CONST [TDYN] isDynamic = FALSE;
(* Integer ADTs are always statically allocated. *)


(* Required Procedures *)

(* Introspection *)

(* Smallest Value *)

PROCEDURE [TMIN] minValue : ProtoInteger;
(* Integer ADTs are required to bind to TMIN. *)


(* Largest Value *)

PROCEDURE [TMAX] maxValue : ProtoInteger;
(* Integer ADTs are required to bind to TMIN. *)


(* Numeric Conversion *)

(* Conversion to Scalar Exchange Format *)

PROCEDURE [SXF] toSXF ( value : ProtoInteger; VAR sxf : ARRAY OF OCTET );
(* Required procedure to convert an integer to scalar exchange format. *)


(* Conversion from Scalar Exchange Format *)

PROCEDURE [VAL] fromSXF ( sxf : ARRAY OF OCTET; VAR value : ProtoInteger );
(* Required procedure to convert from scalar exchange format to an integer. *)


(* Absolute Value *)

PROCEDURE [ABS] abs ( i : ProtoInteger ) : ProtoInteger;
(* Required function to return the absolute value of an integer. *)


(* Sign Reversal *)

PROCEDURE [+/-] neg ( i : ProtoInteger ) : ProtoInteger;
(* Required function to return the sign reversed value of an integer. *)


(* Odd/Even Test *)

PROCEDURE [ODD] odd ( i : ProtoInteger ) : ProtoCardinal;
(* Required function to test whether an integer is odd or even. *)


(* Arithmetic Operations *)

PROCEDURE [+] add ( i, j : ProtoInteger ) : ProtoInteger;
(* Required function to return the sum of two integers. *)

PROCEDURE [-] subtract ( i, j : ProtoInteger ) : ProtoInteger;
(* Required function to return the difference of two integers. *)

PROCEDURE [*] multiply ( i, j : ProtoInteger ) : ProtoInteger;
(* Required function to return the product of two integers. *)

PROCEDURE [DIV] divide ( i, j : ProtoInteger ) : ProtoInteger;
(* Required function to return the quotient of two integers,
   using Euclidean integer division. *)

PROCEDURE [MOD] modulus ( i, j : ProtoInteger ) : ProtoInteger;
(* Function to return the modulus of two integers. *)


(* Relational Operations *)

PROCEDURE [=] isEqual ( i, j : ProtoInteger ) : BOOLEAN;
(* Required function to test the equality of two integers. *)

(* The operation for # is synthesised from this binding. *)


PROCEDURE [<] isLess ( i, j : ProtoInteger ) : BOOLEAN;
(* Required function to test if one integer is less than another. *)

(* The operation for >= is synthesised from this binding. *)


PROCEDURE [>] isGreater ( i, j : ProtoInteger ) : BOOLEAN;
(* Required function to test if one integer is greater than another. *)

(* The operation for <= is synthesised from this binding. *)


(* Inhibited Bindings *)

PROCEDURE [/] = NONE; (* inhibited *)
(* Integer ADTs may not be required to bind to / (division). *)


END ProtoInteger.