(* (C) 2014 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Built-in Blueprint Consistency Rules *)

(*PSEUDO*) BLUEPRINT BUILTIN;
(* Not a compilation unit, documentation only *)

(* Classification *)

[TSIGNED|TBASE|TPRECISION|TMINEXP|TMAXEXP|SXF|VAL] -> isNumeric = TRUE;
(* If any of TSIGNED, TBASE, TPRECISION, TMINEXP, TMAXEXP, SXF or VAL is required,
   the ADT is deemed numeric. *)

[TBASE|TPRECISION|TMINEXP|TMAXEXP|SXF|VAL] -> isScalar = TRUE;
(* If any of TBASE, TPRECISION, TMINEXP, TMAXEXP, SXF or VAL is required,
   the ADT is deemed a numeric scalar. *)

[TSIGNED] AND NOT [TBASE|TPRECISION|TMINEXP|TMAXEXP|SXF|VAL] -> isNonScalar = TRUE;
(* If TSIGNED is required but none of TBASE, TPRECISION, TMINEXP, TMAXEXP, SXF nor VAL,
   the ADT is deemed a numeric non-scalar. *)

[DESCENDING|STORE|RETRIEVE] -> isCollection = TRUE;
(* If any of DESCENDING, STORE or RETRIEVE is required,
   the ADT is deemed a collection. *)

[OPAQUE|NEW|RELEASE] -> isDynamic = TRUE;
(* If the module type is an opaque pointer or NEW or RELEASE are required,
   the ADT is deemed dynamically allocatable. *)

NOT isDynamic -> isStatic = TRUE;
(* If the ADT is not dynamically allocatable, it is deemed statically allocatable. *)


[TBASE] -> CONST [TPRECISION];
[TPRECISION] -> CONST [TMINEXP];
[TMINEXP] -> CONST [TMAXEXP];
[TMAXEXP] -> CONST [TBASE];
[TBASE] -> CONST [TSIGNED];
(* If any one of TBASE, TPRECISION, TMINEXP and TMAXEXP
   is required, all of them and TSIGNED are required. *)

[TSIGNED=TRUE] -> PROCEDURE [NEG];
(* If value bound to TSIGNED is TRUE, unary minus is required. *)

[TSIGNED=FALSE] -> PROCEDURE [NEG] : NIL;
(* If value bound to TSIGNED is FALSE, unary minus is inhibited. *)

[TMINEXP=0] AND [TMAXEXP=0] -> PROCEDURE [/] : NIL;
(* If values bound to TMINEXP and TMAXEXP
   are both zero, real division is inhibited. *)

[TMINEXP#0] OR [TMAXEXP#0] -> PROCEDURE [DIV] : NIL;
(* If either value bound to TMINEXP or TMAXEXP
   is not zero, integer division is inhibited. *)

[TBASE] -> PROCEDURE [TMIN];
(* If TBASE is required, TMIN is required. *)

[TMIN] -> PROCEDURE [TMAX];
(* If TMIN is required, TMAX is required. *)

[TMAX] -> PROCEDURE [TMIN];
(* If TMAX is required, TMIN is required. *)

[TMIN] -> PROCEDURE [CONCAT] : NIL;
[CONCAT] -> PROCEDURE [TMIN] : NIL;
(* TMIN and CONCAT are mutually exclusive. *)

[+] -> PROCEDURE [-];
(* If addition is required, subtraction is required. *)

[-] -> PROCEDURE [+];
(* If subtraction is required, addition is required. *)

[*] -> PROCEDURE [DIV | /];
(* If multiplication is required, division is required. *)

[/] -> PROCEDURE [*];
(* If real division is required, multiplication is required. *)

[DIV] -> PROCEDURE [*];
(* If integer division is required, multiplication is required. *)

[DIV] -> PROCEDURE [MOD];
(* If integer division is required, modulus is required. *)

[MOD] -> PROCEDURE [DIV];
(* If modulus is required, integer division is required. *)

[TSIGNED] -> PROCEDURE [=];
(* If TSIGNED required, is-equal is required. *)

[<] -> PROCEDURE [=];
(* If less-than is required, is-equal is required. *)

[<] -> PROCEDURE [>];
(* If less-than is required, greater-than is required. *)

[>] -> PROCEDURE [<];
(* If greater-than is required, less-than is required. *)

[SUBSET] -> PROCEDURE [=];
(* If SUBSET is required, is-equal is required. *)

[SUBSET] -> PROCEDURE [<] : NIL;
[<] -> PROCEDURE [SUBSET] : NIL;
(* SUBSET and less-than are mutually exclusive. *)

[SUBSET] -> PROCEDURE [>] : NIL;
[>] -> PROCEDURE [SUBSET] : NIL;
(* SUBSET and greater-than are mutually exclusive. *)

[CONCAT] -> PROCEDURE [+] : NIL;
[+] -> PROCEDURE [CONCAT] : NIL;
(* CONCAT and addition are mutually exclusive. *)

[TMIN] -> PROCEDURE [TLIMIT] : NIL;
[TLIMIT] -> PROCEDURE [TMIN] : NIL;
(* TMIN and TLIMIT are mutually exculsive. *)

[TLIMIT] -> PROCEDURE [COUNT | LENGTH];
(* If TLIMIT is required, either COUNT or LENGTH is required. *)

[COUNT] -> PROCEDURE [LENGTH] : NIL;
[LENGTH] -> PROCEDURE [COUNT] : NIL;
(* COUNT and LENGTH are mutually exclusive. *)

[CHAR] OR [UNICHAR] -> PROCEDURE [LENGTH];
(* If proto literal is CHAR or UNICHAR, LENGTH is required. *)

[NEW] -> PROCEDURE [RELEASE];
(* If NEW is required, RELEASE is required. *)

[RETAIN] -> PROCEDURE [NEW];
(* If RETAIN is required, NEW is required. *)

[OPAQUE] AND [CONCAT] -> PROCEDURE [RETAIN];
(* If the ADT is dynamic and CONCAT is required, RETAIN is required. *)

[CONCAT] -> PROCEDURE [+] : NIL;
(* If CONCAT is required, addition is inhibited. *)

[OPAQUE] AND [..] -> PROCEDURE [RETAIN];
(* If the ADT is dynamic and slicing is required, RETAIN is required. *)

[DESCENDING] -> PROCEDURE [FOR];
(* If DESCENDING is required, for loop iteration is required. *)

[FOR] -> PROCEDURE [COUNT | LENGTH];
(* If for loop iteration is required, either COUNT or LENGTH is required. *)

[COPY] -> PROCEDURE [DUP];
(* IF COPY is required, DUP is required. *)

[STORE] -> PROCEDURE [RETRIEVE];
(* If STORE is required, RETRIEVE is required. *)

[INSERT] -> PROCEDURE [REMOVE];
(* If INSERT is required, REMOVE is required. *)

[REMOVE] -> PROCEDURE [INSERT];
(* If REMOVE is required, INSERT is required. *)

[READ] -> PROCEDURE [WRITE];
[WRITE] -> PROCEDURE [WRITEF];
[WRITEF] -> PROCEDURE [READ];
(* If any of READ, WRITE, WRITEF is required, all of them are required. *)

END BUILTIN.