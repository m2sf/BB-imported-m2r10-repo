(* (C) 2014 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Built-in Blueprint Consistency Rules *)

(*PSEUDO*) BLUEPRINT BUILTIN;
(* Not a compilation unit, documentation only *)

(* Classification *)

(* An ADT is allocatable at runtime (aka dynamic)
   if its module type is an opaque pointer or binding to NEW is required. *)

(* A Dynamic ADT is deemed to be a Reference Counted ADT
   if binding to RETAIN is required. *)

(* An ADT is allocatable at compile time (aka static) if its module
   type is not an opaque pointer and binding to NEW is not required. *)

(* An ADT is deemed a Numeric ADT if binding to TSIGNED is required. *)

(* An ADT is deemed to be a Scalar ADT if binding to any of TBASE,
   TPRECISION, TMINEXP, TMAXEXP, TMIN, TMAX, SXF or VAL is required. *)

(* An ADT is deemed to be a Non-Scalar ADT
   if it is a Numeric ADT but not a Scalar ADT. *)

(* A Scalar ADT is deemed a Whole Number ADT (signed or unsigned integer)
   if the values bound to TMINEXP and TMAXEXP are both zero. *)

(* An Whole Number ADT is deemed an Integer ADT (signed integer)
   if the value bound to TSIGNED is TRUE. *)

(* An Whole Number ADT is deemed a Cardinal ADT (unsigned integer)
   if the value bound to TSIGNED is FALSE. *)

(* A Scalar ADT is deemed a Real Number ADT
   if one or both values bound to TMINEXP and TMAXEXP is not zero. *)

(* An ADT is deemed to be a Collection ADT if binding to any of TLIMIT,
   NIL, COUNT, LENGTH, STORE, RETRIEVE, INSERT, REMOVE, FOR, DESCENDING,
   concatenation, slicing or SUBSET is required. *)

(* A Collection ADT is deemed to be a Set ADT
   if binding to SUBSET is required. *)

(* A Collection ADT is deemed to be a String ADT if it requires the use of
   proto-literal CHAR or UNICHAR but is not a Set ADT. *)


(* Notation *)

(* The notation used in this document follows the EBNF below:

rule :
  condition '->' implication

condition :
  term (( AND NOT? | OR ) term )? |
  NOT term
  ;

implication :
  term ( ('->' term)* | (AND term)* | (OR term)* ) |
  NOT term
  ;

term :
  '[' BindableEntity ( ('=' | '#') (TRUE | FALSE | 0) )? ']'
  ;
*)


(*  G e n e r a l  *)

(* Properties *)

[TBASE] -> NOT [TLIMIT];
[TLIMIT] -> NOT [TBASE];
(* TBASE and TLIMIT always inhibit each other's presence. *)

(* Rationale: Integrity.
   TBASE indicates a Scalar ADT.
   TLIMIT indicates a Collection ADT.
   The two are mutually exclusive. *)


(*  Memory Management  *)

[NEW] -> [NEWCOPY] -> [RELEASE] -> [NEW];
(* NEW, NEWCOPY and RELEASE always imply each other's presence. *)

(* Rationale: Integrity.
   NEW indicates runtime allocation.
   Runtime allocation requires deallocation.
   Even garbage collectors may need to call RELEASE internally. *)


[RETAIN] -> [RELEASE];
(* RETAIN always implies the presence of RELEASE. *)

(* Rationale: Integrity.
   RETAIN indicates reference counting.
   Reference counting requires both a retain and release operation,
   but not all dynamically allocatable ADTs are reference counted. *)


(* Operations that Require Reference Counting *)

[ABS] AND [NEW] -> [RETAIN];
[NEG] AND [NEW] -> [RETAIN];
[DIV] AND [NEW] -> [RETAIN];
[MOD] AND [NEW] -> [RETAIN];
(* Any of ABS, NEG, DIV and MOD imply require RETAIN when NEW is present. *)

(* Rationale: Safety and Reliability.
   NEW indicates a dynamically allocatable ADT.
   For dynamic ADTs, ABS, NEG, DIV and MOD must return a newly allocated
   instance. Reference counting is required in order to prevent memory
   leakage when such an instance is passed as an argument to a procedure
   or when it occurs as a sub-expression within an expression. *)


[+] AND [NEW] -> [RETAIN];
[-] AND [NEW] -> [RETAIN];
[*] AND [NEW] -> [RETAIN];
[/] AND [NEW] -> [RETAIN];
(* Any of +, -, *, and / require RETAIN when NEW is present. *)

(* Rationale: Safety and Reliability.
   NEW indicates a dynamically allocatable ADT.
   For dynamic ADTs, +, -, * and / must return a newly allocated
   instance. Reference counting is required in order to prevent memory
   leakage when such an instance is passed as an argument to a procedure
   or when it occurs as a sub-expression within an expression. *)


(*  IO  *)

[READ] -> [WRITE];
(* READ always implies the presence of WRITE. *)

(* Rationale: Consistency. *)


[READNEW] -> [WRITE];
(* READNEW always implies the presence of WRITE. *)

(* Rationale: Consistency. *)


[WRITE] -> [WRITEF] -> [WRITE];
(* WRITE and WRITEF always imply each other's presence. *)

(* Rationale: Consistency. *)


[WRITE] AND NOT [NEW] -> [READ];
(* WRITE implies the presence of READ if the ADT is static. *)

(* Rationale: Consistency. *)


[WRITE] AND [NEW] -> [READNEW];
(* WRITE implies the presence of READNEW if the ADT is dynamic. *)

(* Rationale: Consistency. *)


[WRITE] AND [STORE] -> [READ];
(* WRITE implies the presence of READ if the ADT is mutable. *)

(* Rationale: Consistency. *)


(*  N u m e r i c   A D T s  *)

(* Signed and Unsigned ADTs *)

(* Sign Removal and Reversal *)

[ABS] -> [NEG] -> [TSIGNED=TRUE] -> [ABS];
(* Signed ADTs always require ABS and NEG, and vice versa. *)

(* Rationale: Correctness.
   Sign removal and reversal are required by and limited to signed ADTs. *)


(* Integer Division and Modulus *)

[DIV] -> [TSIGNED];
(* DIV always implies the presence of TSIGNED. *)

(* Rationale: Correctness.
   TSIGNED indicates a numeric ADT.
   Integer division is limited to numeric ADTs. *)


[DIV] -> [MOD] -> [DIV];
(* DIV and MOD always imply each other's presence. *)

(* Rationale: Integrity. *)


[DIV] -> [*];
(* DIV always implies the presence of multiplication. *)

(* Rationale: Integrity. *)


[DIV] -> NOT [/];
[/] -> NOT [DIV];
(* DIV and / always inhibit each other's presence. *)

(* Rationale: Correctness.
   DIV indicates integer division while / indicates real division or
   set difference. The respective operations are mutually exclusive. *)


(* Scalar ADTs *)

(* Properties *)

[TBASE] -> [TSIGNED];
(* TBASE always implies the presence of TSIGNED. *)

(* Rationale: Integrity.
   TSIGNED indicates a numeric ADT.
   Scalar ADTs are always numeric, but not all numeric ADTs are scalars. *)


[TBASE] -> [TPRECISION] -> [TMINEXP] -> [TMAXEXP] -> [TBASE];
(* TBASE, TPRECISION, TMINEXP and TMAXEXP always imply each other's presence. *)

(* Rationale: Integrity.
   TBASE indicates a scalar ADT.
   Scalar ADTs require base, precision, eMax and eMin to be implemented. 
   An ADT that defines any of these scalar properties is always a Scalar ADT. *)


[TBASE] -> [TMIN] -> [TMAX] -> [TBASE];
(* TBASE, TMIN and TMAX always imply each other's presence. *)

(* Rationale: Integrity.
   TBASE implies a scalar ADT.
   Scalar ADTs require a minimal and maximal value.
   An ADT that has a minimal and maximal value is always a Scalar ADT. *)


(* Scalar Conversion *)

[TBASE] -> [SXF] -> [VAL] -> [TBASE];
(* TBASE, SXF and VAL always imply each other's presence. *)

(* Rationale: Integrity.
   TBASE implies a scalar ADT.
   Scalar conversion is required by and limited to scalar ADTs. *)


(* Arithmetic Operations *)

[TBASE] -> [+];
[TBASE] -> [-];
[TBASE] -> [*];
(* Scalar ADTs imply the availability of +, - and * notation. *)

(* Rationale: Consistency.
   TBASE indicates a Scalar ADT.
   Scalar ADTs require arithmetic operators common to all scalars. *)


[TMINEXP#0] OR [TMAXEXP#0] -> [/];
(* Real Number ADTs imply the availability of / notation. *)

(* Rationale: Consistency.
   TMINEXP or TMAXEXP with a non-zero value indicates a Real Number ADT.
   Real Number ADTs require the real number division operator. *)


[TMINEXP=0] AND [TMAXEXP=0] -> [DIV];
(* Whole Number ADTs imply the availability of DIV and MOD operators. *)

(* Rationale: Consistency.
   TMINEXP and TMAXEXP both with zero value indicate a Whole Number ADT.
   Whole Number ADTs require the integer division and modulus operators. *)


(*  C o l l e c t i o n   A D T s  *)

(* Properties *)

[NIL] -> [TLIMIT];
(* NIL always implies the presence of TLIMIT. *)

(* Rationale: Correctness.
   TLIMIT indicates a collection ADT.
   Binding to NIL is limited to collection ADTs. *)


(* Introspection *)

[COUNT] -> NOT [LENGTH];
[LENGTH] -> NOT [COUNT];
(* COUNT and LENGTH always inhibit each other's presence. *)

(* Rationale: Correctness.
   LENGTH is limited to string ADTs.
   COUNT is limited to collection ADTs other than string ADTs. *)


[LENGTH] -> NOT [SUBSET];
[LENGTH] -> [CHAR] OR [UNICHAR];
(* LENGTH always inhibits SUBSET and implies proto-literal CHAR or UNICHAR. *)

(* Rationale: Integrity.
   Use of proto-literal CHAR or UNICHAR indicates either a string or
   character set ADT. SUBSET indicates a set ADT.
   Binding to LENGTH is exclusive to string ADTs. *)


[TLIMIT] -> [COUNT] OR [LENGTH] -> [TLIMIT];
(* TLIMIT always implies the presence of either COUNT or LENGTH.
   Conversely COUNT and LENGTH always imply the presence of TLIMIT. *)

(* Rationale: Integrity.
   TLIMIT indicates a collection ADT.
   String ADTs always require a length function.
   Non-String Collection ADTs always require a count function. *)


(* Storage and Retrieval *)

[STORE] -> [TLIMIT];
(* STORE always implies the presence of TLIMIT. *)

(* Rationale: Correctness.
   TLIMIT indicates a collection ADT.
   The store operation is limited to collection ADTs. *)


[RETRIEVE] -> [TLIMIT];
(* RETRIEVE always implies the presence of TLIMIT. *)

(* Rationale: Correctness.
   TLIMIT indicates a collection ADT.
   The retrieval operation is limited to collection ADTs. *)


[STORE] -> [RETRIEVE];
(* STORE always implies the presence of RETRIEVE. *)

(* Rationale: Integrity. *)


(* Insertion and Removal *)

[INSERT] -> [TLIMIT];
(* INSERT always implies the presence of TLIMIT. *)

(* Rationale: Correctness.
   TLIMIT indicates a collection ADT.
   The insert operation is limited to collection ADTs. *)


[REMOVE] -> [TLIMIT];
(* REMOVE always implies the presence of TLIMIT. *)

(* Rationale: Correctness.
   TLIMIT indicates a collection ADT.
   The removal operation is limited to collection ADTs. *)


[INSERT] -> [REMOVE] -> [INSERT];
(* INSERT and REMOVE always imply each other's presence. *)

(* Rationale: Integrity. *)


(* Membership Test *)

[IN] -> [TLIMIT];
(* IN always implies the presence of TLIMIT. *)

(* Rationale: Consistency.
   TLIMIT indicates a collection ADT.
   The IN operation for Whole Number ADTs is synthesised and does not
   require binding. Binding to IN is therefore limited to Collection ADTs. *)


(* Iteration *)

[FOR] -> [TLIMIT];
(* FOR always implies the presence of TLIMIT. *)

(* Rationale: Correctness.
   TLIMIT indicates a collection ADT.
   Iteration over scalars is synthesised and does not require binding.
   Binding to FOR is therefore limited to collection ADTs. *)


[DESCENDING] -> [TLIMIT];
(* DESCENDING always implies the presence of TLIMIT. *)

(* Rationale: Correctness.
   TLIMIT indicates a collection ADT.
   Iteration over scalars is synthesised and does not require binding.
   Binding to DESCENDING is therefore limited to collection ADTs. *)


[FOR] -> [DESCENDING] -> [FOR];
(* FOR and DESCENDING always imply each other's presence. *)

(* Rationale: Integrity. *)


(* Concatenation and Slicing *)

[$+] -> [LENGTH];
(* Concatenation always implies the presence of LENGTH. *)

(* Rationale: Consistency.
   Presence of LENGTH indicates a string ADT.
   Concatenation is limited to string ADTs because it binds to the + operator
   while non-string ADTs may use the + operator for arithmetic operations. *)


[..] -> [TLIMIT];
(* Presence of slicing always implies the presence of TLIMIT. *)

(* Rationale: Correctness.
   TLIMIT indicates a collection ADT.
   Slicing is limited to collection ADTs. *)

[$+] -> NOT [+];
[+] -> NOT [$+];
(* Concatenation and + always inhibit each other's presence. *)

(* Rationale: Correctness.
   Binding to the + operator is for arithmetic operations exclusively.
   Concatenation binds to the + operator for string concatenation.
   The two are mutually exclusive. *)


[$+] AND [..] -> [$.] -> [$+] AND [..];
(* Presence of both concatenation and slicing always implies the presence of
   combined concatenation of slices. Conversely, the presence of the latter
   always implies the presence of both concatenation and slicing. *)

(* Rationale: Consistency and Efficiency.
   Combined concatenation of slices avoids the need for reference counting
   for all scenarios but passing a concatenation of slices expression as an
   argument to a procedure. *)


(* Set Operations *)

[SUBSET] -> [TLIMIT];
(* Presence of SUBSET always implies the presence of TLIMIT. *)

(* Rationale: Correctness.
   TLIMIT indicates a collection ADT.
   Set operations are limited to collection ADTs. *)


[SUBSET] AND [+] -> [-] -> [*] -> [/] -> [+];
(* If SUBSET is present, +, -, * and / imply each other's presence. *)

(* Rationale: Integrity.
   SUBSET in combination with any of +, -, * or / indicates a Set ADT.
   Set operations +, -, * and / are required on an all-or-nothing basis. *)


[SUBSET] -> NOT [<];
[<] -> NOT [SUBSET];
(* SUBSET and < always inhibit each other's presence. *)

(* Rationale: Correctness.
   Binding to the < operator is for arithmetic operations exclusively.
   SUBSET binds to the < operator for relational set operations.
   The two are mutually exclusive. *)


[SUBSET] -> NOT [>];
[>] -> NOT [SUBSET];
(* SUBSET and > always inhibit each other. *)

(* Rationale: Correctness.
   Binding to the > operator is for arithmetic operations exclusively.
   SUBSET binds to the > operator for relational set operations.
   The two are mutually exclusive. *)


END BUILTIN.