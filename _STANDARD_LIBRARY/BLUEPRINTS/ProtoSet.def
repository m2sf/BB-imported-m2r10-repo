(* (C) 2009-2015 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Specialised Blueprint for Dynamically Allocatable Set ADTs *)

BLUEPRINT ProtoSet [ProtoCollection];

REFERENTIAL ElementType, CounterType, LoopBodyType;


(* Required Module Type *)

MODULE TYPE = { isCollection, isSet };

TLITERAL = { ARGLIST OF ElementType };
(* Set literals with a variable number of elements shall be compatible. *)


(* Required Constants *)

(* Memory Management Model *)

CONST [TDYN] isDynamic = TRUE;
(* Required constant to define whether conforming ADTs shall implement
   dynamic memory management.  Its value is always TRUE for ProtoSet ADTs. *)

(* This value may be queried by invoking TDYN(SetADT) *)


CONST [TREFC] isRefCounted : BOOLEAN;
(* Constant to define whether conforming dynamic ADTs shall implement
   reference counting.  Its value may be TRUE or FALSE. *)

(* This value may be queried by invoking TREFC(SetADT) *)


(* Capacity Limit *)

CONST [TLIMIT] capacityLimit : LONGCARD;
(* Required constant to define the element (or cardinality) limit of the ADT. *)

(* This value may be queried by invoking TLIMIT(SetADT) *)


(* Maximum Multiplicity *)

CONST maxMultiplicity = 1;
(* Required to define how many times any given element is permitted to be
   stored in a set.  Its value is always one for ProtoSet ADTs. *)


(* NIL Storage *)

CONST [TFLAGS] supportsNilStorage : BOOLEAN;
(* Constant to define whether or not conforming ADTs shall treat
   NIL as a storable element.  Its value may be TRUE or FALSE. *)

(* This value may be queried by invoking TFLAGS(SetADT, supportsNilStorage) *)


(* FOR Loop Syntax *)

CONST [TFLAGS] forOmitsValue = (maxMultiplicity = 1);
(* Constant to define whether or not conforming ADTs shall support value
   loop variants in FOR loop headers.  Always TRUE for ProtoSet ADTs. *)

(* This value may be queried by invoking TFLAGS(SetADT, forOmitsValue) *)


CONST [TFLAGS] forOmitsAscDesc = (NOT isOrdered);
(* Constant to define whether or not conforming ADTs shall support both
   ascending and descending FOR loop iteration.  FALSE when ordered. *)

(* This value may be queried by invoking TFLAGS(SetADT, forOmitsAscDesc) *)


(* Optional Features *)

(* Invalid Accessor Retrieval Intercept *)

CONST * invAccessorRetrievalIntercept = FALSE;
(* Required constant to define whether invalid accessor retrieval errors may
   be intercepted by user defined handlers.  Always FALSE for set ADTs. *)


(* Compiler Generated Set Operations *)

CONST * synthesizeSetOperations : BOOLEAN;
(* Required constant to define whether set operations shall be synthesised.
   Its value may be TRUE or FALSE.  When this value is FALSE, conforming ADTs
   must provide bindings for all set operations. *)


(* Required Procedures *)

(* Introspection *)

(* Binding to Predefined Function COUNT *)

PROCEDURE [COUNT] cardinality ( set : ProtoSet ) : LONGCARD;
(* Required function to return the number of elements stored in a set. *)

(* Supports use case: COUNT(set)  *)


PROCEDURE capacity ( set : ProtoSet ) : LONGCARD;
(* Required function to return the allocated capacity of a set. *)


PROCEDURE isResizable ( set : ProtoSet ) : BOOLEAN;
(* Required function to return the resizable property of a set. *)


(* Memory Management *)

(* Binding to NEW *)

PROCEDURE [NEW] new
  ( NEW newSet : ProtoSet; initialCapacity : LONGCARD );
(* Required procedure to allocate a new set with a default or given initial
   capacity. *)

(* Supports use cases:
   
   NEW set;
   
   NEW set OF capacity;
   
   and in combination with bindings to STORE and VALUE:
   
   NEW set := setExpression; *)


(* Binding to RETAIN *)

isRefCounted ->
PROCEDURE [RETAIN] retain ( set : ProtoSet );
(* Procedure to retain a set and prevent its deallocation.
   Required when reference counting is supported. *)

(* Supports use case:
   
   RETAIN set; *)


(* Binding to RELEASE *)

PROCEDURE [RELEASE] release ( set : ProtoSet );
(* Required procedure to cancel an outstanding retain and ultimately deallocate
   a set when no further retains are outstanding, or immediately when
   reference counting is not supported. *)

(* Supports use case:
   
   RELEASE set; *)


(* Value Storage *)

(* Binding to STORE *)

PROCEDURE [STORE] storeCounterForElement
  ( VAR target : SetADT; element : ElementType; count : CounterType );
(* Required to overwrite the multiplicity of a given element in a set. *)

(* Supports use cases:
   
   set[element] := count;
      
   STORE(set, element, count); *)


PROCEDURE [STORE|,] storeCounterForElements
  ( VAR target : SetADT;
    entries : ARGLIST >0 OF { element : ElementType; count : CounterType } );
(* Required to overwrite the multiplicities of given elements in a set. *)

(* Supports use cases:
   
   COPY set := { elem1, count1, elem2, count2, elem3, count3, ... }
   
   STORE(set, elem1, count1, elem2, count2, elem3, count3, ...); *)


(* Value Retrieval *)

(* Binding to VALUE *)

PROCEDURE [RETRIEVE] counterForElement
  ( VAR set : ProtoSet; element : ElementType ) : CounterType;
(* Required to retrieve the multiplicity of a given element in a set. *)

(* Supports use cases:
   
   set[element]
   
   VALUE(set, element)
   
   within expressions. *)


PROCEDURE [IN] isElement
  ( VAR set : ProtSet; element : ElementType ) : BOOLEAN;
(* Required to retrieve the membership status of a given element in a set. *)

(* Supports use case:
   
   set IN element
      
   within expressions. *)


(* Value Insertion *)

(* Binding to INSERT *)

PROCEDURE [INSERT] insertElement
  ( VAR target : ProtoSet; element : ElementType );
(* Required to add a given element to a set or increment its counter. *)

(* Supports use case:
         
   INSERT(set, element); *)


PROCEDURE [INSERT|,] insertElements
  ( VAR target : ProtoSet; elements : ARGLIST >0 OF ElementType );
(* Required to add given elements to a set or increment their counters. *)

(* Supports use case:
   
   INSERT(set, elem1, elem2, elem3, ...); *)


(* Value Removal *)

(* Binding to REMOVE *)

PROCEDURE [REMOVE] removeElement
  ( VAR target : ProtoSet; element : ElementType );
(* Required to remove a given element from a set or decrement its counter. *)

(* Supports use case:
         
   REMOVE(set, element); *)


PROCEDURE [REMOVE|,] removeElements
  ( VAR target : ProtoSet; elements : ARGLIST >0 OF ElementType );
(* Required to remove given elements from a set or decrement their counters. *)

(* Supports use case:
   
   REMOVE(set, elem1, elem2, elem3, ...); *)


PROCEDURE [REMOVE|*] removeAllElements ( VAR ProtoSet : SetADT );
(* Required procedure to remove all elements from a set. *)

(* Supports use case:
   
   COPY set := EMPTY; *)


(* Iteration *)

(* Binding to FOR *)

TYPE LoopBodyType = PROCEDURE ( VAR ProtoSet, CONST ElementType );
(* Required procedure type to synthesise the body of a for loop. *)

PROCEDURE [FOR] forIterator
  ( VAR set : ProtoSet; doStatements : LoopBodyType );

(* Required procedure to iterate over all elements of a set
   and execute body doStatements for each element. *)

(* Supports use case:
   
   FOR element IN set DO statementSequence END; *)


(* Relational Operations *)

(* Binding to the = and # Operators *)

PROCEDURE [=] isEqual ( set1, set2 : ProtoSet ) : BOOLEAN;
(* Required function to test the equivalence of two set. *)

(* Supported use cases:
   
   set1 = set2
   
   set1 # set2
   
   within expressions. *)


(* Binding to the >, >=, < and <= Operators *)

PROCEDURE [SUBSET] isSubset ( set1, set2 : ProtoSet ) : BOOLEAN;
(* Required function to test if a given first set is a subset of a second. *)

(* Supported use cases:
   
   set1 > set2
   
   set1 >= set2
   
   set1 < set2
   
   set1 <= set2
   
   within expressions. *)


(* Set Operations *)

(* Binding to the + Operator *)

NOT synthesizeSetOperations ->
PROCEDURE [+] union ( NEW target : ProtoSet; op1, op2 : ProtoSet );
(* Procedure to calculate the union of two sets. *)

(* Supported use case:
   
   set1 + set2
      
   within expressions. *)


(* Binding to the \ Operator *)

NOT synthesizeSetOperations ->
PROCEDURE [\] complement ( NEW target : ProtoSet; op1, op2 : ProtoSet );
(* Procedure to calculate the relative complement of two sets. *)

(* Supported use case:
   
   set1 \ set2
      
   within expressions. *)


(* Binding to the * Operator *)

NOT synthesizeSetOperations ->
PROCEDURE [*] intersection ( NEW target : ProtoSet; op1, op2 : ProtoSet );
(* Procedure to calculate the intersection of two sets. *)

(* Supported use case:
   
   set1 * set2
      
   within expressions. *)


(* Binding to the / Operator *)

NOT synthesizeSetOperations ->
PROCEDURE [/] symDiff ( NEW target : ProtoSet; op1, op2 : ProtoSet );
(* Procedure to calculate the symmetric difference of two sets. *)

(* Supported use case:
   
   set1 / set2
      
   within expressions. *)


END ProtoSet.