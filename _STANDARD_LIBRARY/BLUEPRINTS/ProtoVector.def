(* (C) 2012-2015 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

BLUEPRINT ProtoVector [ProtoComputational];

(* Specialised Blueprint for Vector ADTs *)


REFERENTIAL IndexType, ComponentType;


(* Required Module Type *)

MODULE TYPE = OPAQUE;
(* Vector ADTs shall be dynamically allocatable. *)

LITERAL = { ARGLIST >0 OF ComponentType };
(* Structured literals of non-empty component lists shall be compatible. *)


(* Required Constants *)

(* Classification *)

CONST [TCOMP] isComputational = TRUE;
(* Vector ADTs are always computational. *)

CONST [TNUM] isNumeric = FALSE;
(* Vector ADTs are always non-numeric. *)


(* Memory Management Model *)

CONST [TDYN] isDynamic = TRUE;
(* Vector ADTs are dynamically allocatable. *)

isDynamic ->
CONST [TREFC] isRefCounted : BOOLEAN;
(* Vector ADTs shall define whether they are reference counted. *)


(* Capacity Limit *)

CONST [TLIMIT] capacityLimit : LONGCARD;
(* Vector ADTs shall define their component limit. *)


(* Value Access Model *)

CONST [TBYIDX] valueAccessByIndex = TRUE;
(* Vector ADTs access components by index. *)

CONST [TRIGID] isRigid = TRUE;
(* Vector ADTs do not support resize, append, insert nor remove operations. *)


(* Iteration Order *)

CONST [TBDFOR] bidirectionalIteration = TRUE;
(* Vector ADTs always support bidirectional FOR loop iteration. *)


(* Required Procedures *)

(* Introspection *)

PROCEDURE [COUNT] count ( vector : ProtoVector ) : LONGCARD;
(* Required function to return the dimension of a vector. *)


(* Memory Management *)

PROCEDURE [NEW] new ( NEW vector : ProtoVector; dim : LONGCARD );
(* Required procedure to allocate and return a new vector. *)

isRefCounted ->
PROCEDURE [RETAIN] retain ( vector : ProtoVector );
(* Procedure to retain a vector and prevent its deallocation.
   Required when reference counting is supported. *)

PROCEDURE [RELEASE] release ( VAR vector : ProtoVector );
(* Required procedure to cancel an outstanding retain and ultimately deallocate
   a vector when no further retains are outstanding, or immediately when
   reference counting is not supported. *)


(* Value Storage *)

(* Binding to STORE *)

PROCEDURE [STORE] storeValue
 ( vector : ProtoVector; index : IndexType; value : ComponentType );
(* Required procedure to overwrite a vector component at a given index. *)


(* Value Retrieval *)

(* Binding to RETRIEVE *)

PROCEDURE [RETRIEVE] valueAtIndex
 ( vector : ProtoVector; index : IndexType ) : ComponentType;
(* Required function to return the vector component at a given index. *)


(* Iteration *)

(* Binding to FOR *)

TYPE LoopBodyType = PROCEDURE ( VAR ProtoVector, CONST IndexType );
(* Required procedure type to synthesise the body of a for loop. *)

PROCEDURE [FOR] forIterator
  ( VAR vector : ProtoVector; doStatements : LoopBodyType; order : CHAR );

(* Required procedure to iterate over all indices of a vector in ascending "+"
   or descending "-" order and execute body doStatements for each index. *)


(* Sign Reversal *)

PROCEDURE [+/-] unaryMinus ( VAR result : ProtoVector; v : ProtoVector );
(* Required procedure to return the additive inverse of a vector (-v). *)


(* Arithmetic Operations *)

(* Vector-Vector Arithmetic *)

PROCEDURE [+] add ( VAR result : ProtoVector; v1, v2 : ProtoVector );
(* Required procedure to add two vectors (v1 + v2). *)

PROCEDURE [-] subtract ( VAR result : ProtoVector; v1, v2 : ProtoVector );
(* Required procedure to subtract one vector from another (v1 - v2). *)

PROCEDURE [*] cross ( VAR result : ProtoVector; v1, v2 : ProtoVector );
(* Required procedure to return the cross product of two vectors (v1 * v2). *)

PROCEDURE [*.] dot ( v1, v2 : ProtoVector ) : ComponentType;
(* Required procedure to return the dot product of two vectors (v1 *. v2). *)


(* Vector-Scalar Arithmetic *)

PROCEDURE addScalar
  ( VAR result : ProtoVector; v : ProtoVector; scalar : ComponentType );
(* Required procedure to add a scalar to each vector component. *)

PROCEDURE subScalar
  ( VAR result : ProtoVector; v : ProtoVector; scalar : ComponentType );
(* Required procedure to subtract a scalar from each vector component. *)

PROCEDURE mulByScalar
  ( VAR result : ProtoVector; v : ProtoVector; scalar : ComponentType );
(* Required procedure to multiply each vector component by a scalar. *)

PROCEDURE divByScalar
  ( VAR result : ProtoVector; v : ProtoVector; scalar : ComponentType );
(* Required procedure to divide each vector component by a scalar. *)


(* Relational Operations *)

PROCEDURE [=] isEqual ( v1, v2 : ProtoVector ) : BOOLEAN;
(* Required function to test the equality of two vectors. *)

(* The operation for # is synthesised from this binding. *)


(* Inhibited Bindings *)

PROCEDURE [TMIN] = NONE; (* inhibited *)
(* Vector ADTs may not be required to bind to TMIN. *)

PROCEDURE [TMAX] = NONE; (* inhibited *)
(* Vector ADTs may not be required to bind to TMAX. *)

PROCEDURE [SXF] = NONE; (* inhibited *)
(* Vector ADTs may not be required to bind to SXF. *)

PROCEDURE [VAL] = NONE; (* inhibited *)
(* Vector ADTs may not be required to bind to VAL. *)

PROCEDURE [ABS] = NONE; (* inhibited *)
(* Vector ADTs may not be required to bind to ABS. *)

PROCEDURE [ODD] = NONE; (* inhibited *)
(* Vector ADTs may not be required to bind to ODD. *)

PROCEDURE [/] = NONE; (* inhibited *)
(* Vector ADTs may not be required to bind to / (division). *)

PROCEDURE [<] = NONE; (* inhibited *)
(* Vector ADTs may not be required to bind to < (less-than). *)

PROCEDURE [>] = NONE; (* inhibited *)
(* Vector ADTs may not be required to bind to > (greater-than). *)


END ProtoVector.