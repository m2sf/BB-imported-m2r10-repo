(* (C) 2009-2014 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Blueprint for Statically Allocatable Array ADTs *)

BLUEPRINT ProtoStaticArray [ProtoStaticCollection];

REFERENTIAL IndexType, ValueType, ComponentCount, LoopBodyType;


(* Required Module Type *)

MODULE TYPE = RECORD := { ARGLIST ComponentCount OF ValueType };
(* Static Array ADTs must be records to be statically allocatable,
   array literals with a fixed number of components are compatible. *)


(* Required Constants *)


(* Orderedness *)

CONST [DESCENDING] isOrdered = TRUE;
(* Required constant to define whether conforming ADTs shall be ordered.
   Its value is always TRUE for arrays. *)


(* NIL Storage *)

CONST [NIL] allowsNilStorage : BOOLEAN;
(* Required constant to define whether NIL is a storable value.
   Its value may be TRUE or FALSE. *)


(* Support for Invalid Accessor Retrieval Intercept *)

CONST * invAccessorRetrievalIntercept = TRUE;
(* Required constant to define whether invalid accessor retrieval errors
   may be intercepted by user defined handlers. Always TRUE for arrays. *)


(* Required Procedures *)


(* Introspection *)

(* Binding to Predefined Function TLIMIT *)

PROCEDURE [TLIMIT] capacityLimit : LONGCARD;
(* Required function to return the allocation capacity limit of the ADT. *)

(* An expression of the form TLIMIT(ArrayADT)
   is synthesised as ArrayADT.capacityLimit(). *)


(* Binding to Predefined Function COUNT *)

PROCEDURE [COUNT] count ( array : ProtoStaticArray ) : LONGCARD;
(* Required function to return the number of values stored in an array. *)

(* An expression of the form COUNT(array)
   is synthesised as ArrayADT.count(array). *)


(* Literal Assignment *)

(* Binding to the := Operator *)

PROCEDURE [:=] assign
  ( VAR array : ProtoStaticArray;
    valueList : ARGLIST ComponentCount OF ValueType );
(* Required procedure to assign a structured value to an array. *)

(* A statement of the form array := { val1, val2, val3 }
   is synthesised as ArrayADT.assign(array, val1, val2, val3). *)


(* Copying *)

(* Binding to Predefined Procedure COPY *)

PROCEDURE [COPY] copy
  ( source : ProtoStaticArray; VAR target : ProtoStaticArray );
(* Required procedure to copy the contents of a source array into a
   target array. *)

(* A statement of the form array1 := array2
   is synthesised as ArrayADT.copy(array2, array1). *)


(* Value Storage *)

(* Binding to Predefined Procedure STORE *)

PROCEDURE [STORE] storeValueAtIndex
  ( VAR array : ProtoStaticArray; index : IndexType; value : ValueType );
  (* Required procedure to store a value in an array at a given index. *)

(* A statement of the form array[index] := value
   is equivalent to STORE(array, index, value )
   and is synthesised as ArrayADT.storeValueAtIndex(array, index, value). *)


(* Value Retrieval *)

(* Binding to Predefined Function RETRIEVE *)

PROCEDURE [RETRIEVE] valueAtIndex
  ( CONST array : ProtoStaticArray; index : IndexType ) : ValueType;
(* Required function to retrieve a value stored at a given index in an array. *)

(* An expression of the form array[index]
   is equivalent to RETRIEVE(array, index)
   and is synthesised as ArrayADT.valueAtIndex(array, index). *)


(* Index Out Of Range Retrieval Error Handling *)

(* A user defined index-out-of-range handler function may be used to change
   the default behaviour when RETRIEVE is called with an out-of-range index. *)

(* Handler Type *)

invAccessorRetrievalIntercept ->
TYPE HandlerType = PROCEDURE ( VAR ValueType ) : BOOLEAN;
(* Required procedure type for user defined index-out-of-range handlers. *)

(* An example of an index-out-of-range handler is given below:
   
   PROCEDURE mayAbortOnIndexOutOfRange
     ( VAR valueToReturn : CARDINAL ) : BOOLEAN;
   BEGIN
     valueToReturn := 0;
     RETURN FALSE
   END mayAbortOnIndexOutOfRange;
   
   This handler tells its caller not to abort and to return zero. *)


(* Handler Installation *)

invAccessorRetrievalIntercept ->
PROCEDURE installIndexOutOfRangeHandler ( handler : HandlerType );
(* Required procedure to install a user defined index-out-of-range handler. *)


(* Iteration *)

(* Binding to FOR IN iterator *)

TYPE LoopBodyType = PROCEDURE ( VAR ProtoStaticArray, CONST IndexType );
(* Required procedure type to synthesise the body of a for loop. *)

PROCEDURE [FOR] forIterator
  ( VAR array : ProtoStaticArray;
    doStatements : LoopBodyType;
    ascending : BOOLEAN );
(* Required procedure to iterate over all index/value pairs of an array
   in a given order and execute the passed in doStatements for each pair. *)
   
(* A statement of the form
     FOR element IN set DO statementSeq END
   is synthesised in two steps.
   
   The loop header is synthesised as
     ArrayADT.forIterator( array, forLoopBody, TRUE );
   
   The loop body is synthesised as
     PROCEDURE forLoopBody
       ( VAR array : ArrayADT; CONST index : IndexType ) <*INLINE*>;
     BEGIN statementSeq END forLoopBody;
   
   The loop header of a FOR DESCENDING statement is sythesised with
   FALSE passed for parameter ascending in the call to forIterator. *)


(* Relational Operations *)

(* Binding to the = and # Operators *)

PROCEDURE [=] isEqual ( array1, array2 : ProtoArray ) : BOOLEAN;
(* Required function to test the equivalence of two arrays. *)

(* An expression of the form array1 = array2
   is synthesised as ArrayADT.isEqual(array1, array2). *)

(* The operation for the # operator
   is synthesized as NOT (array1 = array2). *)


(* Conditionally Inhibited Bindings *)

(* None *)


(* Unconditionally Inhibited Bindings *)

(* Value Insertion and Removal *)

(* Operations INSERT and REMOVE are not meaningful for static array ADTs.
   Conforming blueprints may not require binding to these operations. *)

PROCEDURE [INSERT] NIL; (* inhibited *)

PROCEDURE [REMOVE] NIL; (* inhibited *)


(* Membership Test *)

(* Operation IN is not meaningful for static array ADTs.
   Conforming blueprints may not require binding to IN. *)

PROCEDURE [IN] NIL; (* inhibited *)


(* Relational Operations *)

(* Operations <, <=, > and >= are not meaningful for static array ADTs.
   Conforming blueprints may not require binding to these operations. *)

PROCEDURE [<] NIL; (* inhibited *)

PROCEDURE [>] NIL; (* inhibited *)


(* Operation SUBSET is not meaningful for static array ADTs.
   Conforming blueprints may not require binding to SUBSET. *)

PROCEDURE [SUBSET] NIL; (* inhibited *)


END ProtoStaticArray.