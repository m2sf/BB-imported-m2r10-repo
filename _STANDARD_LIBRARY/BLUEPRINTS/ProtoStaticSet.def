(* (C) 2009-2014 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Blueprint for Statically Allocatable Set ADTs *)

BLUEPRINT ProtoStaticSet [ProtoStaticCollection];

REFERENTIAL ElementType, ProcType;

(* Static Set ADTs must be records to be statically allocatable,
   structured literals with a list of elements are compatible *)

MODULE TYPE = RECORD := { ARGLIST OF ElementType };


(* Bindings required for static Set ADTs *)


(* Required Constants *)


(* Orderedness *)

CONST [DESCENDING] isOrdered = FALSE;
(* Required constant to define whether conforming ADTs shall be ordered.
   Its value is always FALSE for static sets. *)


(* NIL Storage *)

CONST [NIL] allowsNilStorage : BOOLEAN;
(* Required constant to define whether NIL is a storable value.
   Its value is always FALSE for static sets. *)


CONST * invAccessorRetrievalIntercept = FALSE;
(* Required constant to define whether invalid accessor retrieval errors
   may be intercepted by user defined handlers. Always FALSE for sets. *)


(* Required Procedures *)


(* Introspection *)

(* Binding to Predefined Function TLIMIT *)

PROCEDURE [TLIMIT] capacityLimit : LONGCARD;
(* Required function to return the allocation capacity limit of the set ADT. *)

(* An expression of the form TLIMIT(SetADT)
   is synthesised as SetADT.capacityLimit(). *)


(* Binding to Predefined Function COUNT *)

PROCEDURE [COUNT] count ( set : ProtoStaticSet ) : LONGCARD;
(* Required function to return the number of elements stored in a set. *)

(* An expression of the form COUNT(set)
   is synthesised as SetADT.length(set). *)


(* Literal Assignment *)

(* Binding to the := Operator *)

PROCEDURE [:=] assign
  ( VAR set : ProtoStaticSet; elementList : ARGLIST OF ElementType );
(* Required procedure to assign a structured value to a set. *)

(* A statement of the form
     set := { elem1, elem2, elem3, ... }
   is synthesised as
     SetADT.assignStructuredValue(set, elem1, elem2, elem3, ...). *)


(* Copying *)

(* Binding to Predefined Procedure COPY *)

PROCEDURE [COPY] copy
  ( source : ProtoStaticSet; VAR target : ProtoStaticSet );
(* Required procedure to copy the contents of a source set into a
   target set. *)

(* A statement of the form set1 := set2
   is synthesised as SetADT.copy(set2, set1). *)


(* Value Storage *)

(* Binding to Predefined Procedure STORE *)

PROCEDURE [STORE] storeElement
  ( VAR set : ProtoStaticSet; elementList : ARGLIST OF ElementType );
(* Required procedure to store an element in a set. *)

(* A statement of the form set[element] := TRUE
   is equivalent to STORE(set, elem )
   and is synthesised as  SetADT.storeElement(set, elem ). *)


(* Value Retrieval *)

(* Binding to Predefined Function RETRIEVE *)

PROCEDURE [RETRIEVE] isElement
  ( CONST set : ProtoStaticSet; element : ElementType ) : BOOLEAN;
(* Required function to retrieve an element from a set. *)

(* An expression of the form set[element]
   is equivalent to RETRIEVE(set, element)
   and is synthesised as SetADT.isElement(set, element). *)


(* Value Insertion *)

(* Binding to Predefined Procedure INSERT *)

PROCEDURE [INSERT] insertElements
  ( VAR set : ProtoStaticSet; elementList : VARGLIST OF ElementType );
(* Required procedure to insert one or more elements into a set. *)

(* A statement of the form INSERT(set, elem1, elem2, elem3, ...)
   is synthesised as SetADT.insertElements(set, elem1, elem2, elem3, ...). *)


(* Value Removal *)

(* Binding to Predefined Procedure REMOVE *)

PROCEDURE [REMOVE] removeElements
  ( VAR set : ProtoStaticSet; elementList : ARGLIST OF ElementType );
(* Required procedure to remove one or more elements from a set. *)

(* A statement of the form INSERT(set, elem1, elem2, elem3, ...)
   is synthesised as SetADT.insertElements(set, elem1, elem2, elem3, ...).
   
   A statement of the form set[element] := NIL
   is equivalent to REMOVE(set, element)
   and is synthesised as SetADT.insertElements(set, element). *)


(* Membership Test *)

(* Binding to IN syntax *)

PROCEDURE [IN] in
  ( CONST set : ProtoStaticSet; element : ElementType ) : BOOLEAN;
(* Function to test whether a value is stored in a set. *)

(* An expression of the form elem IN set
   is synthesised as SetADT.in(set, elem). *)


(* Iteration *)

(* Binding to FOR IN iterator *)

TYPE LoopBodyType = PROCEDURE ( VAR ProtoStaticSet, CONST ElementType );
(* Required procedure type to synthesise the body of a for loop. *)

PROCEDURE [FOR] forIterator
  ( VAR set : ProtoStaticSet;
    doStatements : LoopBodyType;
    ascending : BOOLEAN );
(* Required procedure to iterate over all elements of a set
   and execute the passed in doStatements for each element. *)
   
(* A statement of the form
     FOR element IN set DO statementSeq END
   is synthesised in two steps.
   
   The loop header is synthesised as
     SetADT.forIterator( set, forLoopBody, TRUE );
   
   The loop body is synthesised as
     PROCEDURE forLoopBody
       ( VAR set : SetADT; CONST element : ElementType ) <*INLINE*>;
     BEGIN statementSeq END forLoopBody; *)



(* Set Operations *) 

(* Binding to the + Operator *)

PROCEDURE [+] union ( set1, set2 : ProtoStaticSet ) : ProtoStaticSet;
(* Required function to return the union of two sets. *)

(* An expression of the form set1 + set2
   is synthesised as SetADT.union(set1, set2). *)


(* Binding to the - Operator *)

PROCEDURE [-] difference ( set1, set2 : ProtoStaticSet ) : ProtoStaticSet;
(* Required function to return the set difference of two sets. *)

(* An expression of the form set1 - set2
   is synthesised as SetADT.difference(set1, set2). *)


(* Binding to the * Operator *)

PROCEDURE [*] intersection ( set1, set2 : ProtoStaticSet ) : ProtoStaticSet;
(* Required function to return the intersection of two sets. *)

(* An expression of the form set1 * set2
   is synthesised as SetADT.intersection(set1, set2). *)


(* Binding to the / Operator *)

PROCEDURE [/] symmetricDiff ( set1, set2 : ProtoStaticSet ) : ProtoStaticSet;
(* Required functon to return the symmetric difference of two sets. *)

(* An expression of the form set1 / set2
   is synthesised as SetADT.symmetricDiff(set1, set2). *)


(* Relational Operations *)

(* Binding to the = and # Operators *)

PROCEDURE [=] isEqual ( set1, set2 : ProtoStaticSet ) : BOOLEAN;
(* Required function to test the equality of two sets. *)

(* An expression of the form set1 = set2
   is synthesised as SetADT.isEqual(set1, set2).
   
   An expression of the form set1 # set2
   is synthesised as NOT SetADT.isEqual(set1, set2). *)


(* Binding to Predefined Function SUBSET *)

PROCEDURE [SUBSET] isSubset ( set1, set2 : ProtoStaticSet ) : BOOLEAN;
(* Required function to test whether one set is a subset of another. *)

(* An expression of the form set1 > set2
   is synthesised as SetADT.isSubset(set2, set1).
   
   An expression of the form set1 >= set2 is synthesised as
   (COUNT(set1) > COUNT(set2)) AND SetADT.isSubset(set2, set1). *)
   
   An expression of the form set1 < set2
   is synthesised as SetADT.isSubset(set1, set2).
   
   An expression of the form set1 <= set2 is synthesised as
   (COUNT(set1) < COUNT(set2)) AND SetADT.isSubset(set1, set2). *)


END ProtoStaticSet.