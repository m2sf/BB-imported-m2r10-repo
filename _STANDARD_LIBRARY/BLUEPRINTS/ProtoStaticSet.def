(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Blueprint for Statically Allocatable Set ADTs *)

BLUEPRINT ProtoStaticSet [ProtoCollection];

PLACEHOLDERS ElementType, ProcType;

(* Static Set ADTs must be opaque records to be statically allocatable,
   set literals are compatible *)

TYPE ProtoStaticSet = OPAQUE RECORD := { VARIADIC OF ElementType };


(* Bindings required for static set ADTs *)

(* Capacity limit *)

(* Binding to Pervasive Function TLIMIT *)

PROCEDURE [TLIMIT] capacityLimit : LONGCARD;
(* Procedure to return the element limit of a Set ADT. *)

(* An expression of the form TLIMIT(SetADT))
   is synthesised as SetADT.capacityLimit() *)


(* Storage, Removal, Retrieval and Inspection of Contents *)

PROCEDURE [STORE] storeElements
  ( VAR set : ProtoStaticSet; valueList : VARIADIC OF ElementType );
(* Procedure to store zero or more elements in a set ADT variable. *)

(* An invocation of STORE(set, elem1, elem2, elem3 ...) is transformed
   at compile time to ADT.storeElements(set, elem1, elem2, elem3 ...)
   for first operands of the ADT type. *)


PROCEDURE [REMOVE] removeElements
  ( VAR set : ProtoStaticSet; valueList : VARIADIC OF ElementType );
(* Procedure to remoeve one or more elements from a set ADT variable *)

(* An invocation of REMOVE(set, elem1, elem2, elem3 ...) is transformed
   at compile time to ADT.removeElements(set, elem1, elem2, elem3 ...)
   for first operands of the ADT type. *)


PROCEDURE [RETRIEVE] membershipForElement
  ( CONST set : ProtoStaticSet; value : ElementType ) : BOOLEAN;
(* Function to retrieve and return a value from a set ADT variable *)

(* An incocation of RETRIEVE(set, elem) is transformed at compile time to
   ADT.membershipForElement(set, elem) for first operands of the ADT type. *)


PROCEDURE [IN] isElement
  ( CONST set : ProtoStaticSet; value : CHAR ) : BOOLEAN;
(* Function to test whether a value is stored in a set ADT variable. *)

(* An expression of the form elem IN set is transformed at compile time to
   ADT.isElement(set, elem) for first operands of the ADT type. *)


PROCEDURE [COUNT] count ( set : ProtoStaticSet ) : LONGCARD;
(* Procedure to return the element count of a Set ADT value. *)

(* An expression of the form COUNT(set) is transformed at compile time to
   SetADT.count(set) for operands of the ADT type. *)


(* Iteration *)

TYPE ProcType = PROCEDURE ( ElementType );

PROCEDURE [FOR] forIterator
  ( VAR set : ProtoStaticSet; forLoopBody : ProcType; ascending : BOOLEAN );
(* Procedure to iterate over all elements of a Set ADT value and execute
   doStatements for each element with the given iteration order. *)
   
(* A statement of the form
     FOR elem IN set DO statementSeq END
   is transformed at compile time in two steps.
   The loop header is transformed to
     SetADT.forIterator( set, forLoopBody, TRUE );
   The loop body is transformed to a procedure definition
     <* INLINE *> PROCEDURE forLoopBody ( element : ElementType );
     BEGIN statementSeq END forLoopBody;
   inserted before the current scope's BEGIN-END block. *)   


(* Set Operations *) 

PROCEDURE [+] union
  ( CONST set1, set2 : ProtoStaticSet ) : ProtoStaticSet;
(* Procedure to return the union of two set ADT values *)

(* An expression of the form set1 + set2 is transformed at compile time to
   ADT.union(set1, set2) for operands of the ADT type. *)


PROCEDURE [-] difference
  ( CONST set1, set2 : ProtoStaticSet ) : ProtoStaticSet;
(* Procedure to return the set difference of two set ADT values *)

(* An expression of the form set1 - set2 is transformed at compile time to
   ADT.difference(set1, set2) for operands of the ADT type. *)


PROCEDURE [*] intersection
  ( CONST set1, set2 : ProtoStaticSet ) : ProtoStaticSet;
(* Procedure to return the intersection of two set ADT values *)

(* An expression of the form set1 * set2 is transformed at compile time to
   ADT.intersection(set1, set2) for operands of the set ADT type. *)


PROCEDURE [/] symmetricDiff
  ( CONST set1, set2 : ProtoStaticSet ) : ProtoStaticSet;
(* Procedure to return the symmetric difference of two set ADT values *)

(* An expression of the form set1 / set2 is transformed at compile time to
   ADT.symmetricDiff(set1, set2) for operands of the set ADT type. *)


(* Relational operations *)

(* Binding to = operator *)

PROCEDURE [=] isEqual ( CONST set1, set2 : ProtoStaticSet ) : BOOLEAN;
(* Procedure to test the equality of two set ADT values. *)

(* An expression of the form set1 = set2 is transformed at compile time to
   ADT.isEqual(set1, set2) for operands of the set ADT type.
   
   An expression of the form set1 # set2 is transformed at compile time to
   NOT ADT.isEqual(set1, set2) for operands of the set ADT type. *)


PROCEDURE [SUBSET] isSubset ( set1, set2 : ProtoStaticSet ) : BOOLEAN;
(* Procedure to test whether one set ADT value is a subset of another *)

(* An expression of the form set1 > set2 is transformed at compile time to
   ADT.isSubset(set2, set1) for operands of the set ADT type.
   
   An expression of the form set1 >= set2 is transformed at compile time
   to (COUNT(set1) > COUNT(set2)) AND ADT.isSubset(set2, set1) for
   operands of the set ADT type.
   
   An expression of the form set1 < set2 is transformed at compile time to
   ADT.isSubset(set1, set2) for operands of the set ADT type.
   
   An expression of the form set1 <= set2 is transformed at compile time
   to (COUNT(set1) < COUNT(set2)) AND ADT.isSubset(set1, set2) for
   operands of the set ADT type. *)
   

(* IO operations *)

PROCEDURE Read ( infile : File; VAR set : ProtoStaticSet );
(* Procedure to read a value from a file into a set ADT variable. *)

(* A statement of the form READ(file, set) is transformed at compile time
   to ADT.Read(file, set) for second operands of the set ADT type. *)


PROCEDURE Write ( outfile : File; CONST set : ProtoStaticSet );
(* Procedure to write a set ADT value to a file. *)

(* A statement of the form WRITE(file, set) is transformed at compile time
   to ADT.Write(file, set) for second operands of the set ADT type. *)


PROCEDURE WriteF ( outfile      : File;
                   CONST fmtStr : ARRAY OF CHAR;
                   items        : VARIADIC OF ProtoStaticSet );
(* Procedure to write one or more set ADT values formatted into a file. *)

(* A statement of the form WRITEF(file, fmt, set1, set2, set3, ...) is trans-
   formed at compile time to ADT.WriteF(file, fmt, set1, set2, set3, ...) for
   third operands and any following operands of the set ADT type. *)


(* Introspection *)

PROCEDURE capacity ( CONST set : ProtoStaticSet ) : LONGCARD;
(* Function to return the value of TLIMIT(CHARSET). *)


PROCEDURE entryLimit ( CONST set : ProtoStaticSet ) : LONGCARD;
(* Function to return the value of TLIMIT(CHARSET). *)


PROCEDURE isOrdered ( CONST charSet : CHARSET ) : BOOLEAN;
(* Function to always return TRUE. *)


PROCEDURE isResizable ( CONST charSet : CHARSET ) : BOOLEAN;
(* Function to always return FALSE. *)

END ProtoStaticSet.