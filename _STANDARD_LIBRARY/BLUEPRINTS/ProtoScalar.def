(* (C) 2012-2014 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* General Blueprint for Scalar Numeric ADTs *)

BLUEPRINT ProtoScalar [ProtoNumeric]; (* conforms to ProtoNumeric *)

(* Scalar number ADTs must be opaque records to be statically allocatable,
   either integer or real number literals may be used, but not both *)

MODULE TYPE = OPAQUE RECORD := INTEGER | REAL;


(* Bindings required for scalar ADTs *)


(* Required Constants *)

CONST [TSIGNED] isSigned : BOOLEAN;
(* whether the ADT is signed or unsigned *)

CONST [TBASE] base : CARDINAL;
(* radix in which values of the ADT are encoded, 2 or 10 *)

CONST [TPRECISION] precision : [1..4000] OF CARDINAL;
(* maximum number of digits the ADT can encode *)

CONST [TMINEXP] eMin : INTEGER;
(* smallest exponent the ADT can encode *)

CONST [TMAXEXP] eMax : CARDINAL;
(* largest exponent the ADT can encode *)


(* Required Procedures *)

(* Bindings to predefined functions TMIN and TMAX *)

PROCEDURE [TMIN] minValue : ProtoScalar;
(* function to return the minimal value of the ADT *)

PROCEDURE [TMAX] maxValue : ProtoScalar;
(* function to return the maximal value of the ADT *)


(* Bindings to scalar conversion primitives *)

PROCEDURE [SXF] toSXF ( lexeme : ARRAY OF CHAR; VAR sxf : ARRAY OF OCTET );
(* procedure to convert a literal to a value in scalar exchange format *)

PROCEDURE [VAL] fromSXF ( sxf : ARRAY OF OCTET; VAR value : ProtoScalar );
(* procedure to convert value in scalar exchange format to the scalar ADT *)


(* The assignment of literal values is synthesised from SXF and VAL. *)


(* The operations ABS, NEG and ODD are not common to all scalar types,
   their bindings may be required by more specialised blueprints. *)


(* Bindings to dyadic operations *)

PROCEDURE [+] add ( op1, op2 : ProtoScalar ) : ProtoScalar;
(* function to bind to the + operator for operands of the ADT *)

(* The operation for the ++ statement is synthesized as op := op + VAL(1) *)

PROCEDURE [-] subtract ( op1, op2 : ProtoScalar ) : ProtoScalar;
(* function to bind to the - operator for operands of the ADT *)

(* The operation for the -- statement is synthesized as op := op - VAL(1) *)

PROCEDURE [*] multiply ( op1, op2 : ProtoScalar ) : ProtoScalar;
(* function to bind to the * operator for operands of the ADT *)

(* The operations /, DIV and MOD are not common to all scalar types,
   their bindings may be required by more specialised blueprints. *)


(* Bindings to relational operations *)

PROCEDURE [=] isEqual ( op1, op2 : ProtoScalar ) : BOOLEAN;
(* function to bind to the = operator for operands of the ADT *)

(* The operation for the # operator is synthesized as NOT (op1 = op2) *)

PROCEDURE [>] isGreater ( op1, op2 : ProtoScalar ) : BOOLEAN;
(* function to bind to the > operator for operands of the ADT *)

(* The operation for the <= operator is synthesized as NOT (op1 > op2) *)

PROCEDURE [<] isLess ( op1, op2 : ProtoScalar ) : BOOLEAN;
(* function to bind to the < operator for operands of the ADT *)

(* The operation for the >= operator is synthesized as NOT (op1 < op2) *)


END ProtoScalar.