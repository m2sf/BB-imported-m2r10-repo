(* (C) 2012-2015 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

BLUEPRINT ProtoScalar [ProtoNumeric];

(* General Blueprint for Scalar ADTs *)


(* Required Module Type *)

MODULE TYPE = RECORD;
(* All scalar ADTs shall be statically allocatable. *)

LITERAL = INTEGER | REAL;
(* Integer or real number literals may be used. *)


(* Required Constants *)

(* Classification *)

CONST [TCOMP] isComputational = TRUE;
(* Scalar ADTs are always computational. *)

CONST [TNUM] isNumeric = TRUE;
(* Scalar ADTs are always numeric. *)

CONST isScalar = TRUE;
(* Sclalar ADTs are always scalar. *)

CONST isCountable : BOOLEAN;
(* Scalar ADTs shall define whether they are countable or not. *)


(* Scalar Properties *)

CONST [TSIGNED] isSigned : BOOLEAN;
(* Scalar ADTs shall define whether they are signed or unsigned. *)

CONST [TBASE] base : CARDINAL; (* either 2 or 10. *)
(* Scalar ADTs shall define the radix in which values are encoded. *) 

CONST [TPRECISION] precision : CARDINAL; (* 1 to 4000 *)
(* Scalar ADTs shall define the maximum number of encodable digits. *)

isCountable ->
CONST [TMINEXP] eMin = 0;
(* Countable scalar ADTs shall define eMin with a value of zero. *)

NOT isCountable ->
CONST [TMINEXP] eMin : INTEGER;
(* Uncountable scalar ADTs shall define the smallest encodable exponent. *)

isCountable ->
CONST [TMAXEXP] eMax = 0;
(* Countable scalar ADTs shall define eMax with a value of zero. *)

NOT isCountable ->
CONST [TMAXEXP] eMin : INTEGER;
(* Uncountable scalar ADTs shall define the largest encodable exponent. *)


(* Memory Management *)

CONST [TDYN] isDynamic = FALSE;
(* Scalar ADTs are always statically allocated. *)


(* Required Procedures *)

(* Introspection *)

(* Smallest Value *)

PROCEDURE [TMIN];
(* All scalar ADTs shall be required to bind to TMIN. *)


(* Largest Value *)

PROCEDURE [TMAX];
(* All scalar ADTs shall be required to bind to TMAX. *)


(* Scalar Conversion *)

(* Conversion to Scalar Exchange Format *)

PROCEDURE [SXF];
(* All scalar ADTs shall be required to bind to SXF. *)


(* Conversion from Scalar Exchange Format *)

PROCEDURE [VAL];
(* All scalar ADTs shall be required to bind to VAL. *)


(* Absolute Value *)

PROCEDURE [ABS];
(* All scalar ADTs shall be required to bind to ABS. *)


(* Sign Reversal *)

isSigned -> PROCEDURE [+/-];
(* Signed scalar ADTs shall be required to bind to Unary Minus. *)


(* Odd/Even Test *)

isCountable -> PROCEDURE [ODD];
(* Countable scalar ADTs shall be required to bind to ODD. *)


(* Arithmetic Operations *)

PROCEDURE [+];
(* All scalar ADTs shall be required to bind to + (addition). *)

PROCEDURE [-];
(* All scalar ADTs shall be required to bind to - (subtraction). *)

PROCEDURE [*];
(* All scalar ADTs shall be required to bind to * (multiplication). *)

NOT isCountable -> PROCEDURE [/];
(* Uncountable scalar ADTs shall be required to bind to / (division). *)

isCountable -> PROCEDURE [DIV];
(* Countable scalar ADTs shall be required to bind to DIV. *)

isCountable -> PROCEDURE [MOD];
(* Countable scalar ADTs shall be required to bind to MOD. *)


(* Relational Operations *)

PROCEDURE [=];
(* All scalar ADTs shall be required to bind to = (equality). *)

(* The operation for # is synthesised from this binding. *)


PROCEDURE [<];
(* All scalar ADTs shall be required to bind to < (less-than). *)

(* The operation for >= is synthesised from this binding. *)


PROCEDURE [>];
(* All scalar ADTs shall be required to bind to > (greater-than). *)

(* The operation for <= is synthesised from this binding. *)


(* Inhibited Bindings *)

NOT isSigned -> PROCEDURE [+/-] = NONE; (* inhibited *)
(* Unsigned scalar ADTs may not be required to bind to unary minus. *)

NOT isCountable -> PROCEDURE [ODD] = NONE; (* inhibited *)
(* Uncountable scalar ADTs may not be required to bind to ODD. *)

isCountable -> PROCEDURE [/] = NONE; (* inhibited *)
(* Countable scalar ADTs may not be required to bind to / (division). *)

NOT isCountable -> PROCEDURE [DIV] = NONE; (* inhibited *)
(* Uncountable scalar ADTs may not be required to bind to DIV. *)

NOT isCountable -> PROCEDURE [MOD] = NONE; (* inhibited *)
(* Uncountable scalar ADTs may not be required to bind to MOD. *)


END ProtoScalar.