(* (C) 2009-2015 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Specialised Blueprint for Dynamically Allocatable Array ADTs *)

BLUEPRINT ProtoArray [ProtoCollection];

REFERENTIAL IndexType, ValueType, HandlerType, LoopBodyType;


(* Required Module Type *)

MODULE TYPE = OPAQUE;

LITERAL = { ARGLIST OF ValueType };
(* Array literals with a variable number of values are compatible. *)


(* Required Constants *)

(* Memory Management Model *)

CONST [TDYN] isDynamic = TRUE;
(* Required constant to define whether conforming ADTs shall implement
   dynamic memory management.  Its value is always TRUE for ProtoArray ADTs. *)

(* This value may be queried by invoking TDYN(ArrayADT) *)


CONST [TREFC] isRefCounted : BOOLEAN;
(* Constant to define whether conforming dynamic ADTs shall implement
   reference counting.  Its value may be TRUE or FALSE. *)

(* This value may be queried by invoking TREFC(ArrayADT) *)


(* Capacity Limit *)

CONST [TLIMIT] capacityLimit : LONGCARD;
(* Required function to return the index/value pair limit of the ADT. *)

(* This value may be queried by invoking TLIMIT(ArrayADT) *)


(* Value Access Model *)

CONST [TBYIDX] valueAccessByIndex = TRUE;
(* Constant to indicate that conforming ADTs shall access values by index.
   Its value is always TRUE for array ADTs. *)

(* This value may be queried by invoking TBYIDX(ArrayADT) *)


(* NIL Storage *)

CONST [TNIL] supportsNilStorage : BOOLEAN;
(* Constant to define whether or not conforming ADTs shall treat
(* NIL as a storable value.  Its value may be TRUE or FALSE. *)

(* This value may be queried by invoking TNIL(ArrayADT) *)


(* Iteration Order *)

CONST [TBDFOR] bidirectionalIteration = TRUE;
(* Constant to define whether conforming ADTs shall support descending
   FOR loop iteration.  Its value is always TRUE for array ADTs. *)

(* This value may be queried by invoking TBDFOR(ArrayADT) *)


(* Invalid Accessor Retrieval Intercept *)

CONST * invAccessorRetrievalIntercept = TRUE;
(* Required constant to define whether invalid accessor retrieval errors may
   be intercepted by user defined handlers.  Always TRUE for array ADTs. *)


(* Required Procedures *)

(* Introspection *)

(* Binding to Predefined Function COUNT *)

PROCEDURE [COUNT] count ( array : ProtoArray ) : LONGCARD;
(* Required function to return the number of values stored in an array. *)

(* Supports use case: COUNT(array)  *)


PROCEDURE capacity ( array : ProtoArray ) : LONGCARD;
(* Required function to return the allocated capacity of an array. *)


PROCEDURE isResizable ( array : ProtoArray ) : BOOLEAN;
(* Required function to return the resizable property of an array. *)


(* Memory Management *)

(* Binding to NEW *)

PROCEDURE [NEW] new
  ( NEW newArray : ProtoArray; initialCapacity : LONGCARD );
(* Required procedure to allocate a new array with a default or given initial
   capacity. *)

(* Supports use cases:
   
   NEW array;
   
   NEW array OF capacity;
   
   and in combination with bindings to STORE and RETRIEVE:
   
   NEW array := arrayExpression; *)


(* Binding to RETAIN *)

isRefCounted ->
PROCEDURE [RETAIN] retain ( array : ProtoArray );
(* Procedure to retain an array and prevent its deallocation.
   Required when reference counting is supported. *)

(* Supports use case:
   
   RETAIN array; *)


(* Binding to RELEASE *)

PROCEDURE [RELEASE] release ( array : ProtoArray );
(* Required procedure to cancel an outstanding retain and ultimately deallocate
   an array when no further retains are outstanding, or immediately when
   reference counting is not supported. *)

(* Supports use case:
   
   RELEASE array; *)


(* Value Storage *)

(* Binding to STORE *)

PROCEDURE [STORE] storeValue
 ( array : ProtoArray; index : IndexType; value : ValueType );
(* Required procedure to store a single value at a given index in a target
   array or append it to the target array if the index equals COUNT(target). *)

(* Supports use cases:
   
   array[index] := value;
   
   COPY array[index] := value;
   
   STORE(array, index, value); *)


PROCEDURE [STORE|#] storeValues
  ( target : ProtoArray; fromIndex : IndexType; values : ARRAY OF ValueType );
(* Procedure to store multiple values at a given start index in a target
   array or append them if the start index equals COUNT(target). *)

(* Supports use cases:
   
   COPY array := arrayExpression;
   
   and slice updates of the form
   
   COPY array[n..m] := arrayExpression;
      
   when COUNT(array[n..m]) <= COUNT(arrayExpression). *)


PROCEDURE [STORE|*] fillWithValue
  ( target : ProtoArray;
    fromIndex : IndexType; valueCount : LONGCARD; fillValue : ValueType );
(* Procedure to store a given number of fill values at a given start index in
   a target array or append them if the start index equals COUNT(target). *)

(* Supports use cases:
   
   COPY array := { fillValue BY valueCount };
   
   and slice updates of the form
   
   COPY array[n..m] := { fillValue BY valueCount };
   
   when COUNT(array[n..m]) <= COUNT(arrayExpression). *)


(* Value Retrieval *)

(* Binding to RETRIEVE *)

PROCEDURE [RETRIEVE] valueAtIndex
 ( array : ProtoArray; index : IndexType ) : ValueType;
(* Required function to return the value stored in an array at a given index. *)

(* Supports use cases:
   
   array[index]
   
   RETRIEVE(array, index, value)
   
   within expressions. *)


(* Index Out Of Range Retrieval Error Handling *)

(* A user defined index-out-of-range handler function may be used to change
   the default behaviour when RETRIEVE is called with an out-of-range index. *)

(* Handler Type *)

invAccessorRetrievalIntercept ->
TYPE HandlerType = PROCEDURE ( VAR ValueType ) : BOOLEAN;
(* Procedure type for user defined index-out-of-range handlers.
   The type is required when invAccessorRetrievalIntercept is TRUE. *)


(* An example of an index-out-of-range handler is given below:
   
   PROCEDURE mayAbortOnIndexOutOfRange
     ( VAR valueToReturn : CARDINAL ) : BOOLEAN;
   BEGIN
     valueToReturn := 0;
     RETURN FALSE
   END mayAbortOnIndexOutOfRange;
   
   This handler tells its caller not to abort and to return zero. *)


(* Handler Installation *)

invAccessorRetrievalIntercept ->
PROCEDURE installIndexOutOfRangeHandler ( handler : HandlerType );
(* Procedure to install a user defined index-out-of-range handler.
   The procedure is required when invAccessorRetrievalIntercept is TRUE. *)


(* Value Insertion *)

(* Binding to INSERT *)

PROCEDURE [INSERT] insertValue
  ( VAR target : ProtoArray; atIndex : IndexType; value : ValueType );
(* Required procedure to insert a given value into a target array
   at a given index. *)

(* Supports use cases:
   
   array[index..] := value;
   
   COPY array[index..] := value;
   
   INSERT(array, index, value); *)


PROCEDURE [INSERT|#] insertValues
  ( VAR target : ProtoArray; atIndex : IndexType; values : ARRAY OF ValueType );
(* Required procedure to insert one or more given values into a target array
   at a given index. *)

(* Supports use cases:
   
   COPY array[index..] := { val1, val2, val3, ... };
   
   INSERT(array, index, val1, val2, val3, ...);
   
   COPY array[index..] := arrayExpression; *)


PROCEDURE [INSERT|*] insertAndFill
  ( VAR target : ProtoArray;
    atIndex : IndexType; valueCount : LONGCARD; fillValue : ValueType );
(* Required procedure to insert a given number of given fill-values
   into a target array at a given index. *)

(* Supports use case:
      
   COPY array[index..] := { fillValue BY valueCount };
   
   and slice updates of the form
   
   COPY array[n..m] := { fillValue BY valueCount };
   
   when COUNT(array[n..m]) > COUNT(arrayExpression). *)


(* Value Removal *)

(* Binding to REMOVE *)

PROCEDURE [REMOVE] removeValue
  ( array : ProtoArray; atIndex : IndexType );
(* Required procedure to remove a value from an array at a given index. *)

(* Supports use case:
   
   REMOVE(array, index); *)


PROCEDURE [REMOVE|#] removeValues
  ( VAR target : ProtoArray; atIndex : IndexType; valueCount : LONGCARD );
(* Required procedure to remove one or more values from an array. *)

(* Supports use cases:
      
   REMOVE(array, index, valueCount);
   
   COPY array[n..m] := EMPTY; *)


PROCEDURE [REMOVE|*] removeAllValues ( array : ProtoArray );
(* Required procedure to remove all values from an array. *)

(* Supports use cases:
   
   REMOVE(array, 0, COUNT(array));
      
   COPY array := EMPTY; *)


(* Copying *)

(* Copying is synthesised from bindings to STORE and RETRIEVE. *)


(* Concatenation *)

(* Concatenation is synthesised from bindings to STORE and RETRIEVE. *)


(* Iteration *)

(* Binding to FOR *)

TYPE LoopBodyType = PROCEDURE ( VAR ProtoArray, CONST IndexType );
(* Required procedure type to synthesise the body of a for loop. *)

PROCEDURE [FOR] forIterator
  ( VAR array : ProtoArray; doStatements : LoopBodyType; order : CHAR );

(* Required procedure to iterate over all indices of an array in ascending "+"
   or descending "-" order and execute body doStatements for each index. *)

(* Supports use cases:
   
   FOR index IN array DO statementSequence END;

   FOR index++ IN array DO statementSequence END;
   
   FOR index-- IN array DO statementSequence END; *)


(* Relational Operations *)

(* Binding to the = and # Operators *)

PROCEDURE [=] isEqual ( array1, array2 : ProtoArray ) : BOOLEAN;
(* Required function to test the equivalence of two arrays. *)

(* Supported use cases:
   
   array1 = array2
   
   array1 # array2
   
   within expressions. *)


(* Inhibited Bindings *)

(* Arithmetic Operations *)

(* Arithmetic operations +, -, *, and / are not meaningful for Array ADTs.
   Conforming blueprints may not require binding to these operations. *)

PROCEDURE [+] = NONE; (* inhibited *)

PROCEDURE [-] = NONE; (* inhibited *)

PROCEDURE [*] = NONE; (* inhibited *)

PROCEDURE [/] = NONE; (* inhibited *)


(* Relational Operations *)

(* Relational operations >, >=, < and <= are not meaningful for Array ADTs.
   Conforming blueprints may not require binding to these operations. *)

PROCEDURE [<] = NONE; (* inhibited *)

PROCEDURE [>] = NONE; (* inhibited *)

(* Set operations are not meaningful for array ADTs.  Conforming blueprints
   may not require binding to these operations. *)

PROCEDURE [SUBSET] = NONE; (* inhibited *)


END ProtoArray.