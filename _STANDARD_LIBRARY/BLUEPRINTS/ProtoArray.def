(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Blueprint for Dynamically Allocatable Array ADTs *)

BLUEPRINT ProtoArray [ProtoCollection];

PLACEHOLDERS IndexType, ValueType, ProcType;

(* Array ADTs must be opaque,
   array literals are compatible *)

TYPE ProtoArray = OPAQUE := { VARIADIC OF ValueType };


(* Bindings required for Array ADTs *)

(* Capacity limit *)

(* Binding to pervasive function TLIMIT *)

PROCEDURE [TLIMIT] capacityLimit : LONGCARD;
(* Procedure to return the index/value pair limit of an Array ADT. *)

(* An expression of the form TLIMIT(ArrayADT))
   is synthesised as ArrayADT.capacityLimit() *)


(* Construction and Destruction *)

PROCEDURE [NEW] new ( VAR array : ProtoArray );
(* Procedure to allocate and initialise a new Array ADT variable. *)

(* A statement of the form NEW(array)
   is synthesised as ArrayADT.new(array) *)

PROCEDURE [RELEASE] release ( VAR array : ProtoArray );
(* Procedure to release an Array ADT variable. *)

(* A statement of the form RELEASE(array)
   is synthesised as ArrayADT.release(array) *)


(* Binding to assignment symbol *)

PROCEDURE [:=] assign ( VAR array : ProtoArray;
                        valueList : VARIADIC OF ValueType );
(* Procedure to assign a structured literal to an Array ADT variable. *)

(* A statement of the form array := { value1, value2, ..., valueN }
   is synthesised as assign( array, value1, value2, ..., valueN ) *)


(* Storage and retrieval *)

(* Binding to [ ] notation within left hand entities *)

PROCEDURE [STORE] storeValue ( VAR array : ProtoArray;
                                   index : IndexType; value : ValueType );
(* Procedure to store a value at a given index in an Array ADT variable. *)

(* A statement of the form array[index] := value
   is synthesised as storeValue( array, index, value) *)


(* Binding to [ ] notation within expressions *)

PROCEDURE [RETRIEVE] valueAtIndex ( array : ProtoArray;
                                    index : IndexType ) : ValueType;
(* Procedure to return the value stored at a given index in an Array ADT
   value. *)

(* An expression of the form array[index]
   is synthesised as valueAtIndex( array, index ) *)


(* Index/Value count *)

(* Binding to pervasive function COUNT *)

PROCEDURE [COUNT] count ( array : ProtoArray ) : LONGCARD;
(* Procedure to return the index/value count of an Array ADT value. *)

(* An expression of the form COUNT(array)
   is synthesised as ArrayADT.count(array) *)


(* Iteration *)

(* Binding to FOR IN iterator *)

TYPE ProcType = PROCEDURE ( VAR ProtoArray; CONST IndexType );

PROCEDURE [FOR] forIterator ( VAR array : ProtoArray;
                           doStatements : ProcType );

(* Procedure to iterate over all index/value pairs of an Array ADT value in
   ascending order and execute the passed in doStatements for each pair. *)
   
(* A statement of the form
     FOR index IN array DO statementSeq END
   is synthesised in two steps.
   The loop header is synthesised as
     ArrayADT.forIterator( array, forLoopBody );
   The loop body is synthesised as
     <* INLINE *> PROCEDURE forLoopBody ( VAR array : ArrayADT;
                                        CONST index : IndexType );
     BEGIN statementSeq END forLoopBody; *)

PROCEDURE [DESCENDING] reverseFor ( VAR array : ArrayType;
                                 doStatements : ProcType );

(* Procedure to iterate over all index/value pairs of an ArrayType ADT value
   in descending order and execute the passed in doStatements for each
   pair. *)
   
(* A statement of the form
     FOR DESCENDING index IN array DO statementSeq END
   is synthesised in two steps.
   The loop header is synthesised as
     ArrayADT.reverseFor( array, forLoopBody );
   The loop body is synthesised as
     <* INLINE *> PROCEDURE forLoopBody ( VAR array : ArrayADT;
                                        CONST index : IndexType );
     BEGIN statementSeq END forLoopBody; *)
   

(* Dyadic operations *)

(* The operations +, -, * and / are not common to all Array ADTs,
   their bindings may be required by more specialised prototypes. *)


(* Relational operations *)

(* Binding to = operator *)

PROCEDURE [=] isEqual ( array1, array2 : ProtoArray ) : BOOLEAN;
(* Procedure to test the equivalence of two Array ADT values. *)

(* An expression of the form array1 = array2
   is synthesised as ArrayADT.isEqual(array1, array2) *)

(* The operation for the # operator
   is synthesized as NOT (array1 = array2) *)


(* Binding to < operator *)

(* The operations < and <= are not meaningful for arrays. *)


(* Binding to > operator *)

(* The operations > and >= are not meaningful for arrays. *)


END ProtoArray.