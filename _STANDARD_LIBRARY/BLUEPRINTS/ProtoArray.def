(* (C) 2009-2015 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Specialised Blueprint for Dynamically Allocatable Array ADTs *)

BLUEPRINT ProtoArray [ProtoCollection];

REFERENTIAL IndexType, ValueType, HandlerType, LoopBodyType;


(* Required Module Type *)

MODULE TYPE = OPAQUE;

LITERAL = { ARGLIST OF ValueType };
(* Array literals with a variable number of values are compatible. *)


(* Required Constants *)


(* Mutability *)

(* Memory Management Model *)

CONST isRefCounted = TRUE;
(* Required constant to define whether conforming ADTs should be
   reference counted. Its value may be TRUE or FALSE. *)


(* Iteration Order *)

CONST [TBIDI] bidirectionalIteration = TRUE;
(* Required constant to define whether conforming ADTs support bidirectional
   FOR loop iteration. Its value is always TRUE for Array ADTs. *)

(* An expression of the form TBIDI(ArrayADT))
   is synthesised as ArrayADT.bidirectionalIteration. *)


(* NIL Storage *)

CONST [TNIL] allowsNilStorage : BOOLEAN;
(* Required constant to define whether NIL should be a storable value.
   Its value may be TRUE or FALSE. *)

(* An expression of the form TNIL(ArrayADT))
   is synthesised as ArrayADT.allowsNilStorage. *)

(* Support for Invalid Accessor Retrieval Intercept *)

CONST * invAccessorRetrievalIntercept = TRUE;
(* Required constant to define whether invalid accessor retrieval errors may
   be intercepted by user defined handlers. Always TRUE for Array ADTs. *)


(* Required Procedures *)


(* Introspection *)

(* Binding to Predefined Function TLIMIT *)

PROCEDURE [TLIMIT] capacityLimit : LONGCARD;
(* Required function to return the index/value pair limit of the ADT. *)

(* An expression of the form TLIMIT(ArrayADT))
   is synthesised as ArrayADT.capacityLimit(). *)


(* Binding to Predefined Function COUNT *)

PROCEDURE [COUNT] count ( array : ProtoArray ) : LONGCARD;
(* Required function to return the number of values stored in an array. *)

(* An expression of the form COUNT(array)
   is synthesised as ArrayADT.count(array). *)


PROCEDURE capacity ( array : ProtoArray ) : LONGCARD;
(* Required function to return the allocated capacity of an array. *)

PROCEDURE entryLimit ( array : ProtoArray ) : LONGCARD;
(* Required function to return the value limit of an array. *)

PROCEDURE isResizable ( array : ProtoArray ) : BOOLEAN;
(* Required function to return the resizable property of an array. *)


(* Memory Management *)

(* Binding to the NEW statement *)

PROCEDURE [NEW] newWithCapacity
  ( NEW array : ProtoArray; capacity : LONGCARD );
(* Required procedure to allocate a new array with a given
   initial capacity. *)

(* A statement of the form NEW array;
   is synthesised as ArrayADT.newWithCapacity(array, 0);
   
   A statement of the form NEW array OF capacity;
   is synthesised as ArrayADT.newWithCapacity(array, capacity); *)


PROCEDURE [NEW+] newWithValues
  ( NEW array : ProtoArray; initWith : ARGLIST OF ValueType );
(* Required procedure to allocate a new array and initialise it
   with zero or more given values. *)

(* A statement of the form NEW array := { val1, val2, val3, ... };
   is synthesised as ArrayADT.newWithValues(array, val1, val2, val3, ... ); *)


PROCEDURE [NEW*] newWithCopy
  ( NEW array : ProtoArray; source : ProtoArray ) : ProtoArray;
(* Required function to return a newly allocated copy of an array. *)

(* An expression of the form NEW array := source;
   is synthesised as ArrayADT.newWithCopy(array, source); *)


PROCEDURE [NEW++]; (* TO DO *)


(* Binding to the RETAIN statement *)

isRefCounted ->
PROCEDURE [RETAIN] retain ( array : ProtoArray );
(* Procedure to retain an array and prevent its deallocation.
   The procedure is required when the ADT is reference counted. *)

(* A statement of the form RETAIN array;
   is synthesised as ArrayADT.retain(array); *)


(* Binding to the RELEASE statement *)

PROCEDURE [RELEASE] release ( array : ProtoArray );
(* Required procedure to cancel an outstanding retain
   or deallocate an array if no retains are outstanding. *)

(* A statement of the form RELEASE array;
   is synthesised as ArrayADT.release(array); *)


(* Copying *)

(* Binding to the COPY statement *)

PROCEDURE [COPY] copyValues
  ( VAR array : ProtoArray;
    values : ARGLIST OF ValueType ) : ProtoArray;
(* Required procedure to destructively update an array from a
   given value list. *)

(* An expression of the form COPY array := { val1, val2, val3, ... };
   is synthesised as ArrayADT.copyValues(array, val1, val2, val3, ... ); *)

PROCEDURE [COPY+]; (* TO DO *)

PROCEDURE [COPY*] copy
  ( VAR array : ProtoArray; source : ProtoArray ) : ProtoArray;
(* Required procedure to return a newly allocated copy of an array. *)

(* An expression of the form COPY array := source;
   is synthesised as ArrayADT.copy(array, source); *)

PROCEDURE [COPY++]; (* TO DO *)


(* Value Storage *)

(* Binding to Predefined Procedure STORE *)

PROCEDURE [STORE] storeValue
 ( array : ProtoArray; index : IndexType; value : ValueType );
(* Required procedure to store a value at a given index in an
   array. *)

(* A statement of the form array[index] := value
   is equivalent to STORE(array, index, value) and
   is synthesised as ArrayADT.storeValue(array, index, value). *)


(* Value Retrieval *)

(* Binding to Predefined Function RETRIEVE *)

PROCEDURE [RETRIEVE] valueAtIndex
 ( array : ProtoArray; index : IndexType ) : ValueType;
(* Required function to return the value stored in an array at a given index. *)

(* An expression of the form array[index]
   is equivalent to RETRIEVE(array, index) and
   is synthesised as ArrayADT.valueAtIndex(array, index). *)


(* Index Out Of Range Retrieval Error Handling *)

(* A user defined index-out-of-range handler function may be used to change
   the default behaviour when RETRIEVE is called with an out-of-range index. *)

(* Handler Type *)

invAccessorRetrievalIntercept ->
TYPE HandlerType = PROCEDURE ( VAR ValueType ) : BOOLEAN;
(* Procedure type for user defined index-out-of-range handlers.
   The type is required when invAccessorRetrievalIntercept is TRUE. *)


(* An example of an index-out-of-range handler is given below:
   
   PROCEDURE mayAbortOnIndexOutOfRange
     ( VAR valueToReturn : CARDINAL ) : BOOLEAN;
   BEGIN
     valueToReturn := 0;
     RETURN FALSE
   END mayAbortOnIndexOutOfRange;
   
   This handler tells its caller not to abort and to return zero. *)


(* Handler Installation *)

invAccessorRetrievalIntercept ->
PROCEDURE installIndexOutOfRangeHandler ( handler : HandlerType );
(* Procedure to install a user defined index-out-of-range handler.
   The procedure is required when invAccessorRetrievalIntercept is TRUE. *)


(* Value Insertion *)

(* Binding to Predefined Procedure INSERT *)

PROCEDURE [INSERT] insertValuesAtIndex
  ( targetArray : ProtoArray;
    index : IndexType;
    values : ARGLIST OF ValueType );
(* Procedure to insert a value list into a target array at a given index.
   The procedure is required when the ADT is mutable. *)

(* A statement of the form
     INSERT(array, index, val1, val2, val3, ...)
   is synthesised as
     ArrayADT.insertValuesAtIndex(array, index, val1, val2, val3, ...). *)


PROCEDURE insertArrayAtIndex
  ( targetArray : ProtoArray; index : IndexType; sourceArray : ProtoArray );
(* Procedure to insert a source array into a target array at a given
   index. The procedure is required when the ADT is mutable. *)


(* Value Removal *)

(* Binding to Predefined Procedure REMOVE *)

PROCEDURE [REMOVE] removeValuesAtIndex
  ( array : ProtoArray; index : IndexType; valueCount : LONGCARD );
(* Procedure to remove one or more values from an array at a given index.
   The procedure is required when the ADT is mutable. *)

(* A statement of the form REMOVE(array, index, n);
   is synthesised as ArrayADT.removeValuesAtIndex(array, index, n).
   
   A statement of the form array[index] := NIL
   is treated equivalent to REMOVE(array, index, 1)
   if constant allowsNilStorage is TRUE. *)


(* Iteration *)

(* Binding to FOR IN iterator *)

TYPE LoopBodyType = PROCEDURE ( VAR ProtoArray, CONST IndexType );
(* Required procedure type to synthesise the body of a for loop. *)

PROCEDURE [FOR] forIterator
  ( VAR array : ProtoArray; doStatements : LoopBodyType; ascending : BOOLEAN );

(* Required procedure to iterate over all index/value pairs of an array
   in a given order and execute the passed in doStatements for each pair. *)
   
(* A statement of the form
     FOR index IN array DO statementSeq END
   is synthesised in two steps.
   
   The loop header is synthesised as
     ArrayADT.forIterator(array, forLoopBody, TRUE);
   
   The loop body is synthesised as
     PROCEDURE forLoopBody
       ( VAR array : ArrayADT; CONST index : IndexType ) <*INLINE*>;
     BEGIN statementSeq END forLoopBody;
   
   The loop header of a FOR DESCENDING statement is sythesised with
   FALSE passed for parameter ascending in the call to forIterator. *)


(* Relational Operations *)

(* Binding to the = and # Operators *)

PROCEDURE [=] isEqual ( array1, array2 : ProtoArray ) : BOOLEAN;
(* Required function to test the equivalence of two arrays. *)

(* An expression of the form array1 = array2
   is synthesised as ArrayADT.isEqual(array1, array2). *)

(* The operation for the # operator
   is synthesized as NOT (array1 = array2). *)


(* Conditionally Inhibited Bindings *)

(* None *)


(* Unconditionally Inhibited Bindings *)

(* Arithmetic Operations *)

(* Arithmetic operations +, -, *, and / are not meaningful for Array ADTs.
   Conforming blueprints may not require binding to these operations. *)

PROCEDURE [+] = NONE; (* inhibited *)

PROCEDURE [-] = NONE; (* inhibited *)

PROCEDURE [*] = NONE; (* inhibited *)

PROCEDURE [/] = NONE; (* inhibited *)


(* Relational Operations *)

(* Relational operations >, >=, < and <= are not meaningful for Array ADTs.
   Conforming blueprints may not require binding to these operations. *)

PROCEDURE [<] = NONE; (* inhibited *)

PROCEDURE [>] = NONE; (* inhibited *)

(* The SUBSET operation is not meaningful for array ADTs.
   Conforming blueprints may not require binding to SUBSET. *)

PROCEDURE [SUBSET] = NONE; (* inhibited *)


END ProtoArray.