(* (C) 2009-2014 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Blueprint for Dynamically Allocatable Array ADTs *)

BLUEPRINT ProtoArray [ProtoCollection];

REFERENTIAL IndexType, ValueType, HandlerType, ProcType;


(* Required Module Type *)

MODULE TYPE = OPAQUE := { ARGLIST OF ValueType };
(* Array ADTs must be opaque,
   array literals with a variable number of values are compatible. *)


(* Bindings required for Array ADTs *)

(* Required Constants *)

CONST [:=] isMutable : BOOLEAN;
(* Required constant to define whether the ADT is mutable. TRUE or FALSE. *)

(* Requiring bindings to COPY, STORE and INSERT is permitted when this
   value is TRUE, otherwise it will cause a compile time error. *)


CONST [DESCENDING] isOrdered = TRUE;
(* Required constant to define whether the ADT is ordered. Always TRUE. *)

(* The use of FOR DESCENDING syntax is permitted when this value is TRUE. *)


(* Capacity limit *)

(* Binding to predefined function TLIMIT *)

PROCEDURE [TLIMIT] capacityLimit : LONGCARD;
(* Required function to return the index/value pair limit of the ADT. *)

(* An expression of the form TLIMIT(ArrayADT))
   is synthesised as ArrayADT.capacityLimit() *)


(* Construction and Destruction *)

PROCEDURE [NEW] new ( VAR array : ProtoArray );
(* Procedure to allocate and initialise a new Array ADT variable. *)

(* A statement of the form NEW(array)
   is synthesised as ArrayADT.new(array) *)

PROCEDURE [RELEASE] release ( VAR array : ProtoArray );
(* Procedure to release an Array ADT variable. *)

(* A statement of the form RELEASE(array)
   is synthesised as ArrayADT.release(array) *)


(* Storage, retrieval and insertion *)

(* Binding to [ ] notation within L-values *)

PROCEDURE [STORE] storeValue ( VAR array : ProtoArray;
                                   index : IndexType; value : ValueType );
(* Procedure to store a value at a given index in an Array ADT variable. *)

(* A statement of the form array[index] := value
   is synthesised as storeValue( array, index, value) *)


(* Binding to [ ] notation within expressions *)

PROCEDURE [RETRIEVE] valueAtIndex ( array : ProtoArray;
                                    index : IndexType ) : ValueType;
(* Required function to return the value stored in an array at a given index. *)

(* An expression of the form array[index]
   is synthesised as valueAtIndex( array, index ) *)

TYPE HandlerType = PROCEDURE ( VAR ValueType ) : BOOLEAN;
(* Required procedure type for user defined index-out-of-range handlers. *)

(* An index-out-of-range handler function may be used to modify the default
   behaviour when RETRIEVE is called with an out-of-range index. 
   
   An example of an index-out-of-range handler is given below:
   
   PROCEDURE mayAbortOnIndexOutOfRange
     ( VAR valueToReturn : CARDINAL ) : BOOLEAN;
   BEGIN
     (* tell caller to return zero *)
     valueToReturn := 0;
     (* tell caller NOT to abort *)
     RETURN FALSE;
   END mayAbortOnIndexOutOfRange; *)

PROCEDURE installIndexOutOfRangeHandler ( handler : HandlerType );
(* Required procedure to install a user defined index-out-of-range handler. *)


PROCEDURE [INSERT] insertValuesAtIndex
  ( targetArray : ProtoArray;
    index : IndexType;
    values : ARGLIST OF ValueType );
(* Required procedure to insert a value list into a target array at a given
   index. *)

(* A statement of the form
     INSERT(array, index, val1, val2, val3, ...);
   is transformed at compile time into a procedure call of the form
     ArrayADT.insertValuesAtIndex(array, index, val1, val2, val3, ...);
   for designators of the array ADT type. *)


PROCEDURE [INSERT] insertArrayAtIndex
  ( targetArray : ProtoArray;
    index : IndexType;
    sourceArray : ProtoArray );
(* Required procedure to insert a source array into a target array at a given
   index. *)

(* A statement of the form
     INSERT(targetArray, index, sourceArray);
   is transformed at compile time into a procedure call of the form
     ArrayADT.insertArrayAtIndex(targetArray, index, sourceArray);
   for designators of the array ADT type. *)



(* Index/Value count *)

(* Binding to predefined function COUNT *)

PROCEDURE [COUNT] count ( array : ProtoArray ) : LONGCARD;
(* Required function to return the index/value count of an array. *)

(* An expression of the form COUNT(array)
   is synthesised as ArrayADT.count(array) *)


(* Iteration *)

(* Binding to FOR IN iterator *)

TYPE ProcType = PROCEDURE ( VAR ProtoArray, CONST IndexType );
(* Required procedure type to synthesise the body of a for loop. *)

PROCEDURE [FOR] forIterator
  ( VAR array : ProtoArray; doStatements : ProcType; ascending : BOOLEAN );

(* Required procedure to iterate over all index/value pairs of an array
   in a given order and execute the passed in doStatements for each pair. *)
   
(* A statement of the form
     FOR index IN array DO statementSeq END
   is synthesised in two steps.
   First, the loop header is synthesised as
     ArrayADT.forIterator( array, forLoopBody, TRUE );
   Then the loop body is synthesised as
     PROCEDURE forLoopBody
       ( VAR array : ArrayADT; CONST index : IndexType ) <*INLINE*>;
     BEGIN statementSeq END forLoopBody;
   
   The loop header of a FOR DESCENDING statement is sythesised with
   FALSE passed for parameter ascending in the forIterator call. *)


(* Dyadic operations *)

(* The operations +, -, * and / are not common to all Array ADTs,
   their bindings may be required by more specialised blueprints. *)


(* Relational operations *)

(* Binding to = operator *)

PROCEDURE [=] isEqual ( array1, array2 : ProtoArray ) : BOOLEAN;
(* Required procedure to test the equivalence of two arrays. *)

(* An expression of the form array1 = array2
   is synthesised as ArrayADT.isEqual(array1, array2) *)

(* The operation for the # operator
   is synthesized as NOT (array1 = array2) *)


(* Binding to < operator *)

(* The operations < and <= are not meaningful for array ADTs. *)

PROCEDURE [<] NIL;
(* Conforming blueprints may not require a binding to the < operator. *)


(* Binding to > operator *)

(* The operations > and >= are not meaningful for array ADTs. *)

PROCEDURE [>] NIL;
(* Conforming blueprints may not require a binding to the > operator. *)


END ProtoArray.