(* (C) 2009-2015 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Specialised Blueprint for Dictionary ADTs *)

BLUEPRINT ProtoDictionary [ProtoCollection];

REFERENTIAL KeyType, ValueType, HandlerType, LoopBodyType;


(* Required Module Type *)

MODULE TYPE = OPAQUE;

LITERAL = { ARGLIST OF { KeyType, ValueType } };
(* Structured literals with a variable number of key/value pairs. *)


(* Required Constants *)

(* Memory Management Model *)

CONST [TDYN] isDynamic = TRUE;
(* Required constant to define whether conforming ADTs shall implement
   dynamic memory management.  Always TRUE for ProtoDictionary ADTs. *)

(* This value may be queried by invoking TDYN(ADT) *)


CONST [TREFC] isRefCounted : BOOLEAN;
(* Constant to define whether conforming dynamic ADTs shall implement
   reference counting.  Its value may be TRUE or FALSE. *)

(* This value may be queried by invoking TREFC(ADT) *)


(* Capacity Limit *)

CONST [TLIMIT] capacityLimit : LONGCARD;
(* Required constant to define the key/value pair limit of the ADT. *)

(* This value may be queried by invoking TLIMIT(ADT) *)


(* Value Access Model *)

CONST [TBYKEY] valueAccessByKey = TRUE;
(* Constant to indicate that conforming ADTs shall access values by key.
   Its value is always TRUE for dictionary ADTs. *)

(* This value may be queried by invoking TBYVAL(ADT) *)


(* NIL Storage *)

CONST [TNIL] supportsNilStorage : BOOLEAN;
(* Constant to define whether or not conforming ADTs shall treat
(* NIL as a storable element.  Its value may be TRUE or FALSE. *)

(* This value may be queried by invoking TNIL(ADT) *)


(* Iteration Order *)

CONST [TBDFOR] bidirectionalIteration = FALSE;
(* Constant to define whether conforming ADTs shall support descending
   FOR loop iteration.  Its value may be TRUE or FALSE. *)

(* This value may be queried by invoking TBDFOR(ADT) *)


(* Uniqueness Of Keys *)

CONST uniqueKeys : BOOLEAN;
(* Required constant to define whether keys are unique. TRUE or FALSE. *)


(* Optional Features *)

(* Invalid Accessor Intercept *)

CONST * invalidAccessorIntercept : BOOLEAN;
(* Required constant to define whether invalid key errors may be intercepted
   by user defined invalid-key handlers.  Its value may be TRUE or FALSE. *)


(* Compiler Generated Dictionary Operations *)

CONST * synthesizeDictOperations : BOOLEAN;
(* Required constant to define whether operations union, complement,
   intersection and symmetric difference shall be synthesised.
   Its value may be TRUE or FALSE.  When this value is FALSE,
   conforming ADTs must provide bindings for these operations. *)


(* Required Procedures *)

(* Introspection *)

(* Binding to Predefined Function COUNT *)

PROCEDURE [COUNT] count ( dict : ProtoDictionary ) : LONGCARD;
(* Required function to return the number of key/value pairs stored in a
   dictionary. *)

(* Supports use case: COUNT(dict)  *)


NOT uniqueKeys ->
PROCEDURE [COUNT:#] valueCountForKey
  ( VAR target : ProtoDictionary; key : KeyType ) : LONGCARD;
(* Function to return the number of values stored in a dictionary for a
   given key.  This function is required when keys are not unique. *)

(* Supports use case: COUNT(dict, key)  *)


PROCEDURE capacity ( dict : ProtoDictionary ) : LONGCARD;
(* Required function to return the allocated capacity of a dictionary. *)


PROCEDURE isResizable ( dict : ProtoDictionary ) : BOOLEAN;
(* Required function to return the resizable property of a dictionary. *)


(* Memory Management *)

(* Binding to NEW *)

PROCEDURE [NEW] new
  ( NEW newDict : ProtoDictionary; initialCapacity : LONGCARD );
(* Required procedure to allocate a new dictionary with a default or given
   initial capacity. *)

(* Supports use cases:
   
   NEW dict;
   
   NEW dict OF capacity;
   
   and in combination with bindings to STORE and RETRIEVE:
   
   NEW dict := dictExpression; *)


(* Binding to RETAIN *)

isRefCounted ->
PROCEDURE [RETAIN] retain ( dict : ProtoDictionary );
(* Procedure to retain a dictionary and prevent its deallocation.
   Required when reference counting is supported. *)

(* Supports use case:
   
   RETAIN dict; *)


(* Binding to RELEASE *)

PROCEDURE [RELEASE] release ( dict : ProtoDictionary );
(* Required procedure to cancel an outstanding retain and ultimately deallocate
   a dictionary when no further retains are outstanding, or immediately when
   reference counting is not supported. *)

(* Supports use case:
   
   RELEASE dict; *)


(* Value Storage *)

(* Binding to STORE *)

PROCEDURE [STORE] storeValueForKey
  ( VAR target : ProtoDictionary; key : KeyType; value : ValueType );
(* Required to overwrite the value of a given key in a dictionary. *)

(* Supports use cases:
   
   dict[key] := value;
      
   STORE(dict, key, value); *)


NOT uniqueKeys ->
PROCEDURE [STORE:#] storeNthValueForKey
  ( VAR target : ProtoDictionary;
    key : KeyType; index : LONGCARD; value : ValueType );
(* Procedure to overwrite the n-th value of a given key in a dictionary.
   This procedure is required when keys are not unique. *)

(* Supports use cases:
   
   dict[key, index] := value;
      
   STORE(dict, key, index, value); *)


PROCEDURE [STORE:,] storeValuesForKeys
  ( VAR target : ProtoDictionary;
    entries : ARGLIST >0 OF { key : KeyType; value : ValueType } );
(* Required to overwrite the values of given keys in a dictionary. *)

(* Supports use cases:
   
   COPY dict := { key1, val1, key2, val2, key3, val3, ... }
   
   STORE(dict, key1, val1, key2, val2, key3, val3, ...); *)


(* Value Retrieval *)

(* Binding to VALUE *)

PROCEDURE [VALUE] valueForKey
  ( dict : ProtoDictionary; key : KeyType; VAR value : ValueType );
(* Required to retrieve the value of a given key in a dictionary. *)

(* Supports use cases:
   
   dict[key]
   
   VALUE(dict, key)
   
   within expressions. *)


NOT uniqueKeys ->
PROCEDURE [VALUE:#] nthValueForKey
  ( dict : ProtoDictionary; key : KeyType; index : LONGCARD;
    VAR value : ValueType );
(* Procedure to retrieve the n-th value of a given key in a dictionary.
   This procedure is required when keys are not unique. *)

(* Supports use cases:
   
   dict[key, index]
   
   VALUE(dict, key, index)
   
   within expressions. *)


PROCEDURE [IN] keyExists
  ( dict : ProtoDictionary; key : KeyType ) : BOOLEAN;
(* Required to retrieve the presence of a key in a dictionary. *)

(* Supports use case:
   
   key IN dict
      
   within expressions. *)


PROCEDURE [EXISTS] keyValuePairExists
  ( dict : ProtoDictionary; key : KeyType; value : ValueType ) : BOOLEAN;
(* Required to retrieve the presence of a key/value pair in a dictionary. *)

(* Supports use case:
   
   EXISTS(dict, key, value)
      
   within expressions. *)


(* Value Insertion *)

(* Binding to INSERT *)

PROCEDURE [INSERT] insertValueForKey
  ( VAR target : ProtoDictionary; key : KeyType; value : ValueType );
(* Required to add a new key/value pair to a dictionary. *)

(* Supports use case:
         
   INSERT(dict, key, value); *)


PROCEDURE [INSERT:,] insertKeysAndValues
  ( VAR target : ProtoDictionary;
    entries : ARGLIST >0 OF { key : KeyType; value : ValueType } );
(* Required to add new key/value pairs to a dictionary. *)

(* Supports use case:
   
   INSERT(dict, key1, val2, key2, val2, key3, val3, ...); *)


(* Value Removal *)

(* Binding to REMOVE *)

PROCEDURE [REMOVE] removeKey
  ( VAR target : ProtoDictionary; key : KeyType );
(* Required to remove a given key and its value from a dictionary. *)

(* Supports use case:
         
   REMOVE(dict, key); *)


NOT uniqueKeys ->
PROCEDURE [REMOVE:#] removeNthValueForKey
  ( VAR target : ProtoDictionary; key : KeyType; index : LONGCARD );
(* Procedure to remove the n-th value stored for key from a dictionary.
   This procedure is required when keys are not unique. *)

(* Supports use case:
         
   REMOVE(dict, key, index); *)


PROCEDURE [REMOVE:,] removeKeys
  ( VAR target : ProtoDictionary; keys : ARGLIST >0 OF KeyType );
(* Required to remove given keys and their values from a dictionary. *)

(* Supports use case:
   
   REMOVE(dict, key1, key2, key3, ...); *)


PROCEDURE [REMOVE:*] removeAllKeys ( VAR dict : ProtoDictionary );
(* Required to remove all keys and their values from a dictionary. *)

(* Supports use case:
   
   COPY dict := EMPTY; *)


(* Invalid Key Error Handling *)

(* A user defined invalid-key handler function may be used to change
   the default behaviour when an invalid-key error occurs. *)

(* Handler Type *)

invalidAccessorIntercept ->
TYPE HandlerType = PROCEDURE ( VAR ValueType ) : BOOLEAN;
(* Procedure type for user defined invalid-key handlers.
   The type is required when invalidAccessorIntercept is TRUE. *)

(* An example of an invalid-key handler is given below:
   
   PROCEDURE mayAbortOnInvalidKey
     ( VAR valueToReturn : CARDINAL ) : BOOLEAN;
   BEGIN
     valueToReturn := 0;
     RETURN FALSE
   END mayAbortOnInvalidKey;
   
   This handler tells its caller not to abort and to return zero. *)


(* Handler Installation *)

invalidAccessorIntercept ->
PROCEDURE installInvalidKeyHandler ( handler : HandlerType );
(* Procedure to install a user defined invalid-key handler.
   The procedure is required when invalidAccessorIntercept is TRUE. *)


(* Copying *)

(* Copying is synthesised from bindings to STORE and VALUE. *)


(* Iteration *)

(* Binding to FOR *)

TYPE LoopBodyType = PROCEDURE ( VAR ProtoDictionary, CONST KeyType );
(* Required procedure type to synthesise the body of a for loop. *)

PROCEDURE [FOR] forIterator
  ( VAR dict : ProtoDictionary; doStatements : LoopBodyType; order : CHAR );

(* Required procedure to iterate over all keys of a dictionary in ascending "+"
   or descending "-" order and execute body doStatements for each key. *)

(* Supports use cases:
   
   FOR key IN dict DO statementSequence END;

   FOR key++ IN dict DO statementSequence END;
   
   FOR key-- IN dict DO statementSequence END; *)


(* Relational Operations *)

(* Binding to the = and # Operators *)

PROCEDURE [=] isEqual ( dict1, dict2 : ProtoDictionary ) : BOOLEAN;
(* Required function to test the equivalence of two dictionaries. *)

(* Supported use cases:
   
   dict1 = dict2
   
   dict1 # dict2
   
   within expressions. *)


(* Binding to the >, >=, < and <= Operators *)

PROCEDURE [SUBSET] isSubset ( dict1, dict2 : ProtoDictionary ) : BOOLEAN;
(* Required function to test if a first dictionary is a subset of a second. *)

(* Supported use cases:
   
   dict1 > dict2
   
   dict1 >= dict2
   
   dict1 < dict2
   
   dict1 <= dict2
   
   within expressions. *)


(* Set Operations *)

(* Binding to the + Operator *)

NOT synthesizeDictOperations ->
PROCEDURE [+] union
  ( NEW target : ProtoDictionary; op1, op2 : ProtoDictionary );
(* Procedure to calculate the union of two dictionaries. *)

(* Supported use case:
   
   dict1 + dict2
      
   within expressions. *)


(* Binding to the \ Operator *)

NOT synthesizeDictOperations ->
PROCEDURE [\] complement
  ( NEW target : ProtoDictionary; op1, op2 : ProtoDictionary );
(* Procedure to calculate the relative complement of two dictionaries. *)

(* Supported use case:
   
   dict1 \ dict2
      
   within expressions. *)


(* Binding to the * Operator *)

NOT synthesizeDictOperations ->
PROCEDURE [*] intersection
  ( NEW target : ProtoDictionary; op1, op2 : ProtoDictionary );
(* Procedure to calculate the intersection of two dictionaries. *)

(* Supported use case:
   
   dict1 * dict2
      
   within expressions. *)


(* Binding to the / Operator *)

NOT synthesizeDictOperations ->
PROCEDURE [/] symDiff
  ( NEW target : ProtoDictionary; op1, op2 : ProtoDictionary );
(* Procedure to calculate the symmetric difference of two dictionaries. *)

(* Supported use case:
   
   set1 / set2
      
   within expressions. *)


END ProtoDictionary.