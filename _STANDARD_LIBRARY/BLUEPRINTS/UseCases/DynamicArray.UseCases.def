(* M2 R10 Project, (c) 2014 B.Kowarsch & R.Sutcliffe, all rights reserved. *)

(* Dynamic Array ADTs *)

(* Use cases for conversion of built-in arrays to dynamic array ADTs,
   allocation, copying, slicing, insertion and concatenation of dynamic
   array ADTs, required bindings and resulting compile time transformations. *)

(* Status: Dec 5, 2014 *)


(* =======================
 *    U s e   C a s e s
 * ======================= *)


(* Assignment *)

(* assign NIL *)

array := NIL;
 
(* assign array *)

array := source;

(* assign function call result *)

array := function(arrayExpression);


(* Allocation / Non-destructive Copying *)

(* without initialisation *)

NEW array;

(* allocate and initialise with values *)

NEW array := { val1, val2, val3, ... };

(* allocate and initialise with array *)

NEW array := source;

(* allocate and initialise with slice *)

NEW array := source[n..m];

(* allocate and initialise with concatenation of arrays *)

NEW array := source1 -> source2 -> ... ;
 
(* allocate and initialise with concatenation of arrays and slices *)

NEW array := source1[m..p] -> source2[q..r] -> source3 -> ... ;

(* allocate and initialise with concatenation of arrays, slices and values *)

NEW array := source1[m..p] -> source2 -> { val1, val2, val3, ... } -> ... ;

(* allocate and initialise with function call result *)

NEW array := function(arrayExpression);


(* Destructive Copying *)

(* copy values *)

COPY target := { val1, val2, val3, ... };
 
(* copy array *)

COPY target := source;

(* copy slice *)

COPY target := source[n..m];

(* copy concatenation of arrays *)

COPY target := source1 -> source2 -> ... ;
 
(* copy concatenation of arrays and slices *)

COPY target := source1[m..p] -> source2[q..r] -> source3 -> ... ;

(* copy concatenation of arrays, slices and values *)

COPY target := source1[m..p] -> source2 -> { val1, val2, val3, ... } -> ... ;

(* copy function call result *)

COPY target := function(arrayExpression);


(* Insertion *)

(* insert values *)

COPY target[n..] := { val1, val2, val3, ... };

(* insert contents of array *)

COPY target[n..] := source;

(* insert slice *)

COPY target[n..] := source[n..m];

(* insert concatenation of arrays *)

COPY target[n..] := source1 -> source2 -> ... ;

(* insert concatenation of arrays and slices *)

COPY target[n..] := source1[m..p] -> source2[q..r] -> source3 -> ... ;

(* insert concatenation of arrays, slices and values *)

COPY target[n..] := src1[m..p] -> src2 -> { val1, val2, val3, ... } -> ... ;

(* insert function call result *)

COPY target[n..] := function(arrayExpression);


(* L-Value Slicing *)

(* copy values into slice *)

COPY target[n..m] := { val1, val2, val3, ... };

(* copy contents of array into slice *)

COPY target[n..m] := source;

(* copy slice into slice *)

COPY target[n..m] := source[p..q];

(* copy concatenation of arrays into slice *)

COPY target[n..m] := source1 -> source2 -> ... ;

(* copy concatenation of arrays and slices into slice *)

COPY target[n..m] := source1[p..q] -> source2[r..s] -> source3 -> ... ;

(* copy concatenation of arrays, slices and values into slice *)

COPY target[n..m] := src1[p..q] -> src2 -> { val1, val2, val3, ... } -> ... ;

(* copy function call result into slice *)

COPY target[n..m] := function(arrayExpression);


(* Converting Built-in Arrays to Dynamic Arrays *)

(* allocate and initialise dynamic array from built-in array *)

NEW array := builtinArray;

(* copy contents of built-in array to dynamic array *)

COPY target := builtinArray;

(* allocate and initialise dynamic array from slice of built-in array *)

NEW array := builtinArray[n..m];

(* copy slice of built-in array to dynamic array *)

COPY target := builtinArray[n..m];

(* where *)

VAR builtinArray : <ARRAY any OF ValueType>;


(* Using a Built-in Array within an Array Expression *)

NEW array := source -> builtinArray -> ... ;

COPY target := source -> builtinArray -> ... ;

COPY target[n..] := source -> builtinArray -> ... ;

COPY target[n..m] := source -> builtinArray -> ... ;

(* where *)

VAR builtinArray : <ARRAY any OF ValueType>;


(* Using a Built-in Array Slice within an Array Expression *)

NEW array := source -> builtinArray[n..m] -> ... ;

COPY target := source -> builtinArray[n..m] -> ... ;

COPY target[n..] := source -> builtinArray[m..p] -> ... ;

COPY target[n..m] := source -> builtinArray[p..q] -> ... ;

(* where *)

VAR builtinArray : <ARRAY any OF ValueType>;


(* =====================
 *    B i n d i n g s
 * ===================== *)


(* Assignment *)

(* no bindings *)


(* Allocation *)

(* binding #1 *)

PROCEDURE [NEW] new ( VAR newArray : ADT; values : ARGLIST OF ValueType );

(* supported use cases *)

NEW array;

NEW array := { val1, val2, val3, ... };


(* binding #2 (a) : when not implementing concatenation and slicing ... *)

PROCEDURE [NEW*] newWithArray ( VAR new : ADT; source : ADT );

(* supported use case *)

NEW array := source;


(* binding #2 (b) : when implementing concatenation and slicing ... *)

PROCEDURE [NEW*] newWithArrayOrSlice
  ( VAR new : ADT; source : ADT; start, end : INTEGER );

(* supported use cases *)

NEW array := source;

NEW array := source[n..m];


(* binding #3 : when implementing concatenation and slicing ... *)

PROCEDURE [NEW+] newWithArraysOrSlices
  ( VAR new : ADT;
    initWith : ARGLIST OF { array : ADT; start, end : INTEGER } );

(* supported use cases *)

NEW array := source1 -> source2 -> ... ;

NEW array := source1[n..m] -> source2 -> ... ;

NEW array := source1[n..m] -> source2[p..q] -> ... ;


(* binding #4 : when implementing concatenation and slicing ... *)

PROCEDURE [NEW++] newWithArrayExpression
  ( VAR new : ADT;
    initWith : ARGLIST OF
      { array : ADT; start, end : INTEGER; values : ARGLIST OF ValueType } );

(* supported use cases *)

NEW array := source -> { val1, val2, val3, ... } -> ... ;

NEW array := { val1, val2, val3, ... } -> source -> ... ;

NEW array := source[n..m] -> { val1, val2, val3, ... } -> ... ;

NEW array := { val1, val2, val3, ... } -> source[n..m] -> ... ;


(* Copying *)

(* binding #1 *)

PROCEDURE [COPY] copyValues ( VAR target : ADT; values : ARGLIST OF ValueType );

(* supported use case *)

COPY target := { val1, val2, val3, ... };


(* binding #2 (a) : when not implementing concatenation and slicing ... *)

PROCEDURE [COPY*] copyArray ( VAR target : ADT; source : ADT );

(* supported use case *)

COPY target := source;


(* binding #2 (b) : when implementing concatenation and slicing ... *)

PROCEDURE [COPY*] copyArrayOrSlice
  ( VAR target : ADT; source : ADT; start, end : INTEGER );

(* supported use cases *)

COPY target := source;

COPY target := source[n..m];


(* binding #3 : when implementing concatenation and slicing ... *)

PROCEDURE [COPY+] copyArraysOrSlices
  ( VAR target : ADT;
    source : ARGLIST OF { array : ADT; start, end : INTEGER } );

(* supported use cases *)

COPY target := source1 -> source2 -> ... ;

COPY target := source1[n..m] -> source2 -> ... ;

COPY target := source1[n..m] -> source2[p..q] -> ... ;


(* binding #4 : when implementing concatenation and slicing ... *)

PROCEDURE [COPY++] copyArrayExpression
  ( VAR target : ADT;
    source : ARGLIST OF
      { array : ADT; start, end : INTEGER; values : ARGLIST OF ValueType } );

(* supported use cases *)

COPY target := source -> { val1, val2, val3, ... } -> ... ;

COPY target := { val1, val2, val3, ... } -> source -> ... ;

COPY target := source[n..m] -> { val1, val2, val3, ... } -> ... ;

COPY target := { val1, val2, val3, ... } -> source[n..m] -> ... ;


(* Insertion *)

(* binding #1 *)

PROCEDURE [INSERT] insertValues
  ( VAR target : ADT; atIndex : INTEGER; values : ARGLIST OF ValueType );

(* supported use case *)

COPY target[n..] := { val1, val2, val3, ... };


(* binding #2 (a) : when not implementing concatenation and slicing ... *)

PROCEDURE [INSERT*] insertArray
  ( VAR target : ADT; atIndex : INTEGER; source : ADT );

(* supported use case *)

COPY target[n..] := source;


(* binding #2 (b) : when implementing concatenation and slicing ... *)

PROCEDURE [INSERT*] insertArrayOrSlice
  ( VAR target : ADT; atIndex : INTEGER; source : ADT; start, end : INTEGER );

(* supported use cases *)

COPY target[n..] := source;

COPY target[n..] := source[m..p];


(* binding #3 : when implementing concatenation and slicing ... *)

PROCEDURE [INSERT+] insertArraysOrSlices
  ( VAR target : ADT; atIndex : INTEGER;
    source : ARGLIST OF { array : ADT; start, end : INTEGER } );

(* supported use cases *)

COPY target[n..] := source1 -> source2 -> ... ;

COPY target[n..] := source1[m..p] -> source2 -> ... ;

COPY target[n..] := source1[m..p] -> source2[q..r] -> ... ;


(* binding #4 : when implementing concatenation and slicing ... *)

PROCEDURE [INSERT++] insertArrayExpression
  ( VAR target : ADT; atIndex : INTEGER;
    source : ARGLIST OF
      { array : ADT; start, end : INTEGER; values : ARGLIST OF ValueType } );

(* supported use cases *)

COPY target[n..] := source -> { val1, val2, val3, ... } -> ... ;

COPY target[n..] := { val1, val2, val3, ... } -> source -> ... ;

COPY target[n..] := source[m..p] -> { val1, val2, val3, ... } -> ... ;

COPY target[n..] := { val1, val2, val3, ... } -> source[m..p] -> ... ;


(* L-Value Slicing *)

(* binding #1 : when implementing concatenation and slicing ... *)

PROCEDURE [..] updateSliceWithValues
  ( VAR target : ADT; start, end : INTEGER; values : ARGLIST OF ValueType );

(* supported use case *)

COPY target[n..m] := { val1, val2, val3, ... };


(* binding #2 : when implementing concatenation and slicing ... *)

PROCEDURE [..*] updateSliceWithArrayOrSlice
  ( VAR target : ADT; tgtStart, tgtEnd : INTEGER;
        source : ADT; srcStart, srcEnd : INTEGER );

(* supported use cases *)

COPY target[n..m] := source;

COPY target[n..m] := source[p..q];


(* binding #3 : when implementing concatenation and slicing ... *)

PROCEDURE [..+] updateSliceWithArraysOrSlices
  ( VAR target : ADT; tgtStart, tgtEnd : INTEGER;
        source : ARGLIST OF { array : ADT; start, end : INTEGER } );

(* supported use cases *)

COPY target[n..m] := source1 -> source2 -> ... ;

COPY target[n..m] := source1[p..q] -> source2 -> ... ;

COPY target[n..m] := source1[p..q] -> source2[r..s] -> ... ;


(* binding #4 : when implementing concatenation and slicing ... *)

PROCEDURE [..++] updateSliceWithArrayExpression
  ( VAR target : ADT; tgtStart, tgtEnd : INTEGER;
    source : ARGLIST OF
      { array : ADT; start, end : INTEGER; values : ARGLIST OF ValueType } );

(* supported use cases *)

COPY target[n..m] := source -> { val1, val2, val3, ... } -> ... ;

COPY target[n..m] := { val1, val2, val3, ... } -> source -> ... ;

COPY target[n..m] := source[p..q] -> { val1, val2, val3, ... } -> ... ;

COPY target[n..m] := { val1, val2, val3, ... } -> source[p..q] -> ... ;


(* Argument Passing *)

(* required binding *)

PROCEDURE [RETAIN] retain ( VAR array : ADT );

(* supported use cases *)

target := function(arrayExpression);

NEW target := function(arrayExpression);

COPY target := function(arrayExpression);

COPY target[n..] := function(arrayExpression);

COPY target[n..m] := function(arrayExpression);


(* Converting Built-in Arrays to Dynamic Arrays *)

(* binding (a) : when not implementing concatenation and slicing ... *)

PROCEDURE [ARRAY] convertBuiltinArray
  ( VAR array : ADT; CONST from : ARRAY OF ValueType );
(* If array is NIL upon entry, a newly allocated instance will
   be passed back. Otherwise, it will be destructively updated. *)

(* supported use cases *)

NEW array := builtinArray;

COPY target := builtinArray;


(* binding (b) : when implementing concatenation and slicing ... *)

PROCEDURE [ARRAY] convertBuiltinArrayOrSlice
  ( VAR array : ADT;
    CONST from : ARRAY OF ValueType; start, end : INTEGER );
(* If array is NIL upon entry, a newly allocated instance will
   be passed back. Otherwise, it will be destructively updated. *)

(* supported use cases *)

NEW array := builtinArray;

NEW array := builtinArray[n..m];

COPY target := builtinArray;

COPY target := builtinArray[n..m];


(* Using a Built-in Array within an Array Expression *)

(* required binding *)

PROCEDURE [RETAIN] retain ( VAR array : ADT );

(* supported use cases *)

NEW array := source -> builtinArray -> ... ;

COPY target := source -> builtinArray -> ... ;

COPY target[n..] := source -> builtinArray -> ... ;

COPY target[n..m] := source -> builtinArray -> ... ;


(* Using a Built-in Array Slice within an Array Expression *)

(* required binding *)

PROCEDURE [RETAIN] retain ( VAR array : ADT );

(* supported use cases *)

NEW array := source -> builtinArray[n..m] -> ... ;

COPY target := source -> builtinArray[n..m] -> ... ;

COPY target[n..] := source -> builtinArray[m..p] -> ... ;

COPY target[n..m] := source -> builtinArray[p..q] -> ... ;


(* ===================================
 *    T r a n s f o r m a t i o n s
 * =================================== *)


(* Assignment *)

(* assign NIL *)

array := NIL;

=> array := NIL;
 

(* assign array *)

array := source;

=> array := source;


(* assign function call result *)

array := function(arrayExpression);

=> VAR temp : ADT;
   (* prepare argument *)
   temp := arrayExpression;
   (* call function and assign result *)
   array := function(temp); ADT.release(temp);


(* Allocation / Non-destructive Copying *)

(* without initialisation *)

NEW array;

=> ADT.new(array);


(* allocate and initialise with values *)

NEW array := { val1, val2, val3, ... };
 
=> ADT.new(array, val1, val2, val3, ...);


(* allocate and initialise with array *)

NEW array := source;

(* if concatenation and slicing is not implemented ... *)

=> ADT.newWithArray(array, source);

(* if concatenation and slicing is implemented ... *)

=> ADT.newWithArrayOrSlice(array, source, 0, -1);


(* allocate and initialise with concatenation of arrays *)

NEW array := source1 -> source2 -> ... ;

=> ADT.newWithArraysOrSlices(
    (* L-value *) array,
    (* R-value *) source1, 0, -1, source2, 0, -1, ...);


(* allocate and initialise with concatenation of arrays and slices *)

NEW array := source1[n..m] -> source2[p..q] -> source3 -> ... ;

=> ADT.newWithArraysOrSlices(
    (* L-value *) array,
    (* R-value *) source1, n, m, source2, p, q, source3, 0, -1, ...);


(* allocate and initialise with concatenation of arrays, slices and values *)

NEW array := source1[n..m] -> source2 -> { val1, val2, val3, ... } -> ... ;

=> ADT.newWithArrayExpression(
    (* L-value *) array,
    (* R-value *) source1, n, m, { },
                  source2, 0, -1, { val1, val2, val3, ... }, ... );


(* allocate and initialise with function call result *)

NEW array := function(arrayExpression);

=> VAR temp : ADT;
   (* prepare argument *)
   temp := arrayExpression;
   (* call function and create array with result *)
   ADT.newWithArray(array, function(temp)); ADT.release(temp);


(* Destructive Copying *)

(* copy values *)

COPY target := { val1, val2, val3, ... };

=> ADT.copyValues(target, val1, val2, val3, ...);

 
(* copy array *)

COPY target := source;

(* if concatenation and slicing is not implemented ... *)

=> ADT.copyArray(target, source);

(* if concatenation and slicing is implemented ... *)

=> ADT.copyArrayOrSlice(target, source, 0, -1);


(* copy slice *)

COPY target := source[n..m];

=> ADT.copyArrayOrSlice(target, source, n, m);


(* copy concatenation of arrays *)

COPY target := source1 -> source2 -> ... ;

=> ADT.copyArraysOrSlices(
    (* L-value *) target,
    (* R-value *) source1, 0, -1, source2, 0, -1, ...);


(* copy concatenation of arrays and slices *)

COPY target := source1[n..m] -> source2[p..q] -> source3 -> ... ;

=> ADT.copyArraysOrSlices(
    (* L-value *) target,
    (* R-value *) source1, n, m, source2, p, q, source3, 0, -1, ...);


(* copy concatenation of arrays, slices and values *)

COPY target := source1[n..m] -> source2 -> { val1, val2, val3, ... } -> ... ;

=> ADT.copyArrayExpression(
    (* L-value *) target,
    (* R-value *) source1, n, m, { },
                  source2, 0, -1, { val1, val2, val3, ... }, ... );


(* copy function call result *)

COPY target := function(arrayExpression);

=> VAR tempArg, tempResult : ADT;
   (* prepare argument *)
   tempArg := arrayExpression;
   (* call function *)
   tempResult := function(tempArg); ADT.release(tempArg);
   (* copy function call result into target *)
   ADT.copyArray(target, tempResult); ADT.release(tempResult);


(* Insertion *)

(* insert values *)

COPY target[n..] := { val1, val2, val3, ... };

=> ADT.insertValues(target, n, val1, val2, val3, ...);

 
(* insert contents of array *)

COPY target[n..] := source;

(* if concatenation and slicing is not implemented ... *)

=> ADT.insertArray(target, n, source);

(* if concatenation and slicing is implemented ... *)

=> ADT.insertArrayOrSlice(target, n, source, 0, -1);


(* insert slice *)

COPY target[n..] := source[m..p];

=> ADT.insertArrayOrSlice(target, n, source, m, p);


(* insert concatenation of arrays *)

COPY target[n..] := source1 -> source2 -> ... ;

=> ADT.insertArraysOrSlices(
    (* L-value *) target, n,
    (* R-value *) source1, 0, -1, source2, 0, -1, ...);


(* insert concatenation of arrays and slices *)

COPY target[n..] := source1[m..p] -> source2[q..r] -> source3 -> ... ;

=> ADT.insertArraysOrSlices(
    (* L-value *) target, n,
    (* R-value *) source1, m, p, source2, q, r, source3, 0, -1, ...);


(* insert concatenation of arrays, slices and values *)

COPY target[n..] := src1[m..p] -> src2 -> { val1, val2, val3, ... } -> ... ;

=> ADT.insertArrayExpression(
    (* L-value *) target, n,
    (* R-value *) src1, m, p, { },
                  src2, 0, -1, { val1, val2, val3, ... }, ... );


(* insert function call result *)

COPY target[n..] := function(arrayExpression);

=> VAR tempArg, tempResult : ADT;
   (* prepare argument *)
   tempArg := arrayExpression;
   (* call function *)
   tempResult := function(tempArg); ADT.release(tempArg);
   (* insert function call result into target *)
   ADT.insertArray(target, n, tempResult); ADT.release(tempResult);


(* L-Value Slicing *)

(* copy values into slice *)

COPY target[n..m] := { val1, val2, val3, ... };

=> ADT.updateSliceWithValues(target, n, m, val1, val2, val3, ...);


(* copy contents of array into slice *)

COPY target[n..m] := source;

=> ADT.updateSliceWithArrayOrSlice(target, n, m, source, 0, -1);


(* copy R-value slice into L-value slice *)

COPY target[n..m] := source[p..q];

=> ADT.updateSliceWithArrayOrSlice(target, n, m, source, p, q);


(* copy concatenation of arrays into slice *)

COPY target[n..m] := source1 -> source2 -> ... ;

=> ADT.updateSliceWithArraysOrSlices(
    (* L-value *) target, n, m,
    (* R-value *) source1, 0, -1, source2, 0, -1, ...);


(* copy concatenation of arrays and slices into slice *)

COPY target[n..m] := source1[p..q] -> source2[r..s] -> source3 -> ... ;

=> ADT.updateSliceWithArraysOrSlices(
    (* L-value *) target, n, m,
    (* R-value *) source1, p, q, source2, r, s, source3, 0, -1, ...);


(* copy concatenation of arrays, slices and values into slice *)

COPY target[n..m] := src1[p..q] -> src2 -> { val1, val2, val3, ... } -> ... ;

=> ADT.insertArrayExpression(
    (* L-value *) target, n, m,
    (* R-value *) src1, p, q, { },
                  src2, 0, -1, { val1, val2, val3, ... }, ... );


(* copy function call result into slice *)

COPY target[n..m] := function(arrayExpression);

=> VAR tempArg, tempResult : ADT;
   (* prepare argument *)
   tempArg := arrayExpression;
   (* call function *)
   tempResult := function(tempArg); ADT.release(tempArg);
   (* update target slice with function call result *)
   ADT.updateSliceWithArrayOrSlice(target, n, m, tempResult, 0, -1);
   ADT.release(tempResult);


(* Conversion of Built-in Arrays *)

(* allocate and initialise from built-in array *)

NEW array := builtinArray;

(* if concatenation and slicing is not implemented ... *)

=> IF array # NIL THEN RaiseRuntimeFault(allocTargetNotNil) END;
   ADT.convertBuiltinArray(array, builtinArray);

(* if concatenation and slicing is implemented ... *)

=> IF array # NIL THEN RaiseRuntimeFault(allocTargetNotNil) END;
   ADT.convertBuiltinArrayOrSlice(array, builtinArray, 0, -1);


(* copy contents of built-in array to dynamic array *)

COPY target := builtinArray;

(* if concatenation and slicing is not implemented ... *)

=> IF target = NIL THEN RaiseRuntimeFault(attemptToDerefNIL) END;
   ADT.convertBuiltinArray(array, builtinArray);

(* if concatenation and slicing is implemented ... *)

=> IF target = NIL THEN RaiseRuntimeFault(attemptToDerefNIL) END;
   ADT.convertBuiltinArrayOrSlice(array, builtinArray, 0, -1);


(* allocate and initialise from slice of built-in array *)

NEW array := builtinArray[n..m];

=> IF array # NIL THEN RaiseRuntimeFault(allocTargetNotNil) END;
   ADT.convertBuiltinArrayOrSlice(array, builtinArray, n, m);


(* copy slice of built-in array to dynamic array *)

COPY target := builtinArray[n..m];

=> IF target = NIL THEN RaiseRuntimeFault(attemptToDerefNIL) END;
   ADT.convertBuiltinArrayOrSlice(array, builtinArray, n, m);


(* Using a Built-in Array within an Array Expression *)

NEW array := source -> builtinArray -> ... ;

=> VAR temp : ADT;
   NEW temp := builtinArray; (* see conversion *)
   NEW array := source -> temp -> ... ; RELEASE temp;

COPY target := source -> builtinArray -> ... ;

=> VAR temp : ADT;
   NEW temp := builtinArray; (* see conversion *)
   COPY target := source -> temp -> ... ; RELEASE temp;

COPY target[n..] := source -> builtinArray -> ... ;

=> VAR temp : ADT;
   NEW temp := builtinArray; (* see conversion *)
   COPY target[n..] := source -> temp -> ... ; RELEASE temp;

COPY target[n..m] := source -> builtinArray -> ... ;

=> VAR temp : ADT;
   NEW temp := builtinArray; (* see conversion *)
   COPY target[n..m] := source -> temp -> ... ; RELEASE temp;


(* Using a Built-in Array Slice within an Array Expression *)

NEW array := source -> builtinArray[n..m] -> ... ;

=> VAR temp : ADT;
   NEW temp := builtinArray[n..m]; (* see conversion *)
   NEW array := source -> temp -> ... ; RELEASE temp;

COPY target := source -> builtinArray[n..m] -> ... ;

=> VAR temp : ADT;
   NEW temp := builtinArray[n..m]; (* see conversion *)
   COPY target := source -> temp -> ... ; RELEASE temp;

COPY target[n..] := source -> builtinArray[m..p] -> ... ;

=> VAR temp : ADT;
   NEW temp := builtinArray[m..p]; (* see conversion *)
   COPY target[n..] := source -> temp -> ... ; RELEASE temp;

COPY target[n..m] := source -> builtinArray[p..q] -> ... ;

=> VAR temp : ADT;
   NEW temp := builtinArray[p..q]; (* see conversion *)
   COPY target[n..m] := source -> temp -> ... ; RELEASE temp;


(* END OF FILE *)