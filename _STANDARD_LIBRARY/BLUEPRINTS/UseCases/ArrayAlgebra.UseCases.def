(* M2 R10 Project, (c) 2014 B.Kowarsch & R.Sutcliffe, all rights reserved. *)

(* Array Algebra *)

(* Exploration of possible use cases for array algebra,
   required bindings and resulting compile time transformations. *)

(* Status: Dec 12, 2014 *)


(* =======================
 *    U s e   C a s e s
 * ======================= *)


(* Sign Operations *)

(* Sign Removal *)

array1 := ABS(array2);

NEW array1 := ABS(array2);

COPY array1 := ABS(array2);


(* Sign Reversal *)

array1 := -array2;

NEW array1 := -array2;

COPY array1 := -array2;


(* Array-Array Operations *)

(* Addition *)

array1 := array2 + array3;

NEW array1 := array2 + array3;

COPY array1 := array2 + array3;


(* Subtraction *)

array1 := array2 - array3;

NEW array1 := array2 - array3;

COPY array1 := array2 - array3;


(* Multiplication *)

array1 := array2 * array3;

NEW array1 := array2 * array3;

COPY array1 := array2 * array3;


(* Division *)

array1 := array2 / array3;

NEW array1 := array2 / array3;

COPY array1 := array2 / array3;


(* Scalar-Array Operations *)

(* Addition *)

(* option #1 : overload + operator *)

array1 := array2 + scalar;

array1 := scalar + array2;

NEW array1 := array2 + scalar;

NEW array1 := scalar + array2;

COPY array1 := array2 + scalar;

COPY array1 := scalar + array2;


(* option #2 : special symbol operator *)

array1 := array2 :+ scalar;

array1 := scalar +: array2;

NEW array1 := array2 :+ scalar;

NEW array1 := scalar +: array2;

COPY array1 := array2 :+ scalar;

COPY array1 := scalar +: array2;


(* option #3 : extension library function *)

array1 := Array.sumWithScalarTerm(array2, scalar);

NEW array1 := Array.sumWithScalarTerm(array2, scalar);

COPY array1 := Array.sumWithScalarTerm(array2, scalar);


(* Subtraction *)

(* option #1 : overload - operator *)

array1 := array2 - scalar;

array1 := scalar - array2;

NEW array1 := array2 - scalar;

NEW array1 := scalar - array2;

COPY array1 := array2 - scalar;

COPY array1 := scalar - array2;


(* option #2 : special symbol operator *)

array1 := array2 :- scalar;

array1 := scalar -: array2;

NEW array1 := array2 :- scalar;

NEW array1 := scalar -: array2;

COPY array1 := array2 :- scalar;

COPY array1 := scalar -: array2;


(* option #3 : extension library functions *)

array1 := Array.diffWithScalarSubtrahend(array2, scalar);

array1 := Array.diffWithScalarMinuend(scalar, array2);

NEW array1 := Array.diffWithScalarSubtrahend(array2, scalar);

NEW array1 := Array.diffWithScalarMinuend(scalar, array2);

COPY array1 := Array.diffWithScalarSubtrahend(array2, scalar);

COPY array1 := Array.diffWithScalarMinuend(scalar, array2);


(* Multiplication *)

(* option #1 : overload + operator *)

array1 := array2 * scalar;

array1 := scalar * array2;

NEW array1 := array2 * scalar;

NEW array1 := scalar * array2;

COPY array1 := array2 * scalar;

COPY array1 := scalar * array2;


(* option #2 : special symbol operator *)

array1 := array2 :* scalar;

array1 := scalar *: array2;

NEW array1 := array2 :* scalar;

NEW array1 := scalar *: array2;

COPY array1 := array2 :* scalar;

COPY array1 := scalar *: array2;


(* option #3 : extension library function *)

array1 := Array.prodWithScalarFactor(array2, scalar);

NEW array1 := Array.prodWithScalarFactor(array2, scalar);

COPY array1 := Array.prodWithScalarFactor(array2, scalar);


(* Division *)

(* option #1 : overload / operator *)

array1 := array2 / scalar;

array1 := scalar / array2;

NEW array1 := array2 / scalar;

NEW array1 := scalar / array2;

COPY array1 := array2 / scalar;

COPY array1 := scalar / array2;


(* option #2 : special symbol operator *)

array1 := array2 :/ scalar;

array1 := scalar /: array2;

NEW array1 := array2 :/ scalar;

NEW array1 := scalar /: array2;

COPY array1 := array2 :/ scalar;

COPY array1 := scalar /: array2;


(* option #3 : extension library functions *)

array1 := Array.quotWithScalarDivisor(array2, scalar);

array1 := Array.quotWithScalarDividend(scalar, array2);

NEW array1 := Array.quotWithScalarDivisor(array2, scalar);

NEW array1 := Array.quotWithScalarDividend(scalar, array2);

COPY array1 := Array.quotWithScalarDivisor(array2, scalar);

COPY array1 := Array.quotWithScalarDividend(scalar, array2);


(* Rotation and Shift Operations *)

(* Left Rotation *)

Array.rotateLeft(array, n);

Array.newByRotatingLeft(array1, array2, n);


(* Right Rotation *)

Array.rotateRight(array, n);

Array.newByRotatingRight(array1, array2, n);


(* Left Shift *)

Array.shiftLeft(array, n, fillValue);

Array.newByShiftingLeft(array1, array2, n, fillValue);


(* Right Shift *)

Array.shiftRight(array, n, fillValue);

Array.newByShiftingRight(array1, array2, n, fillValue);


(* =====================
 *    B i n d i n g s
 * ===================== *)


(* Sign Operations *)

(* Sign Removal *)

PROCEDURE [ABS] abs ( VAR result : Array; operand : Array );

(* supported use cases *)

array1 := ABS(array2);

NEW array1 := ABS(array2);

COPY array1 := ABS(array2);


(* Sign Reversal *)

PROCEDURE [NEG] neg ( VAR result : Array; operand : Array );

(* supported use cases *)

array1 := -array2;

NEW array1 := -array2;

COPY array1 := -array2;


(* Array-Array Operations *)

(* Addition *)

PROCEDURE [+] add ( VAR result : Array; left, right : Array );

(* supported use cases *)

array1 := array2 + array3;

NEW array1 := array2 + array3;

COPY array1 := array2 + array3;


(* Subtraction *)

PROCEDURE [-] sub ( VAR result : Array; left, right : Array );

(* supported use cases *)

array1 := array2 - array3;

NEW array1 := array2 - array3;

COPY array1 := array2 - array3;


(* Multiplication *)

PROCEDURE [*] mul ( VAR result : Array; left, right : Array );

(* supported use cases *)

array1 := array2 * array3;

NEW array1 := array2 * array3;

COPY array1 := array2 * array3;


(* Division *)

PROCEDURE [/] div ( VAR result : Array; left, right : Array );

(* supported use cases *)

array1 := array2 / array3;

NEW array1 := array2 / array3;

COPY array1 := array2 / array3;


(* Scalar-Array Operations *)

(* Addition *)

PROCEDURE [:+] addScalar
  ( VAR result : Array; left : Array; right : ValueType );

(* supported use cases *)

array1 := array2 + scalar;

array1 := scalar + array2;

NEW array1 := array2 + scalar;

NEW array1 := scalar + array2;

COPY array1 := array2 + scalar;

COPY array1 := scalar + array2;


(* Subtraction *)

(* scalar subtrahend *)

PROCEDURE [:-] subScalar
  ( VAR result : Array; left : Array; right : ValueType );

(* supported use cases *)

array1 := array2 - scalar;

NEW array1 := array2 - scalar;

COPY array1 := array2 - scalar;


(* scalar minuend *)

PROCEDURE [-:] subFromScalar
  ( VAR result : Array; left : ValueType; right : Array );

(* supported use cases *)

array1 := scalar - array2;

NEW array1 := scalar - array2;

COPY array1 := scalar - array2;


(* Multiplication *)

PROCEDURE [:*] mulByScalar
  ( VAR result : Array; left : Array; right : ValueType );

(* supported use cases *)

array1 := array2 * scalar;

array1 := scalar * array2;

NEW array1 := array2 * scalar;

NEW array1 := scalar * array2;

COPY array1 := array2 * scalar;

COPY array1 := scalar * array2;


(* Division *)

(* scalar divisor *)

PROCEDURE [:/] divByScalar
  ( VAR result : Array; left : Array; right : ValueType );

(* supported use cases *)

array1 := array2 / scalar;

NEW array1 := array2 / scalar;

COPY array1 := array2 / scalar;


(* scalar dividend *)

PROCEDURE [/:] divScalarByArray
  ( VAR result : Array; left : ValueType; right : Array );

(* supported use cases *)

array1 := scalar - array2;

NEW array1 := scalar - array2;

COPY array1 := scalar - array2;


(* Rotation and Shift Operations *)

(* no bindings *)


(* ===================================
 *    T r a n s f o r m a t i o n s
 * =================================== *)


(* Sign Operations *)

(* Sign Removal *)

array1 := ABS(array2);

=> VAR temp : Array;
   NEW temp := ABS(array2); array1 := temp;

NEW array1 := ABS(array2);

=> IF array1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Array.new(array1); Array.abs(array1, array2);

COPY array1 := ABS(array2);

=> Array.abs(array1, array2);


(* Sign Reversal *)

array1 := -array2;

=> VAR temp : Array;
   Array.new(temp); Array.neg(temp, array2); array1 := temp;

NEW array1 := -array2;

=> IF array1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Array.new(array1); Array.neg(array1, array2);

COPY array1 := -array2;

=> Array.neg(array1, array2);


(* Array-Array Operations *)

(* Addition *)

array1 := array2 + array3;

=> VAR temp : Array;
   Array.new(temp); Array.add(temp, array2, array3); array1 := temp;

NEW array1 := array2 + array3;

=> IF array1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Array.new(array1); Array.add(array1, array2, array3);

COPY array1 := array2 + array3;

=> Array.add(array1, array2, array3);


(* Subtraction *)

array1 := array2 - array3;

=> VAR temp : Array;
   Array.new(temp); Array.sub(temp, array2, array3); array1 := temp;

NEW array1 := array2 - array3;

=> IF array1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Array.new(array1); Array.sub(array1, array2, array3);

COPY array1 := array2 - array3;

=> Array.sub(array1, array2, array3);


(* Multiplication *)

array1 := array2 * array3;

=> VAR temp : Array;
   Array.new(temp); Array.mul(temp, array2, array3); array1 := temp;

NEW array1 := array2 * array3;

=> IF array1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Array.new(array1); Array.mul(array1, array2, array3);

COPY array1 := array2 * array3;

=> Array.mul(array1, array2, array3);


(* Division *)

array1 := array2 / array3;

=> VAR temp : Array;
   Array.new(temp); Array.div(temp, array2, array3); array1 := temp;

NEW array1 := array2 / array3;

=> IF array1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Array.new(array1); Array.div(array1, array2, array3);

COPY array1 := array2 / array3;

=> Array.div(array1, array2, array3);


(* Scalar-Array Operations *)

(* Addition *)

array1 := scalar + array2;

array1 := scalar +: array2;

array1 := array2 :+ scalar;

=> VAR temp : Array;
   Array.new(temp); Array.addScalar(temp, array, scalar); array1 := temp;

NEW array1 := scalar + array2;

NEW array1 := scalar +: array2;

NEW array1 := array2 :+ scalar;

=> IF array1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Array.new(array1); Array.addScalar(array1, array2, scalar);

COPY array1 := scalar + array2;

COPY array1 := scalar +: array2;

COPY array1 := array2 :+ scalar;

=> Array.addScalar(array1, array2, scalar);


(* Subtraction *)

(* scalar subtrahend *)

array1 := scalar - array2;

array1 := scalar -: array2;

=> VAR temp : Array;
   Array.new(temp); Array.subFromScalar(temp, scalar, array2); array1 := temp;

NEW array1 := scalar - array2;

NEW array1 := scalar -: array2;

=> IF array1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Array.new(array1); Array.subFromScalar(array1, scalar, array2);

COPY array1 := scalar - array2;

COPY array1 := scalar -: array2;

=> Array.subFromScalar(array1, scalar, array2);


(* scalar minuend *)

array1 := array2 - scalar;

array1 := array2 :- scalar;

=> VAR temp : Array;
   Array.new(temp); Array.subScalar(temp, scalar, array2); array1 := temp;

NEW array1 := array2 - scalar;

NEW array1 := array2 :- scalar;

=> IF array1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Array.new(array1); Array.subScalar(array1, array2, scalar);

COPY array1 := array2 - scalar;

COPY array1 := array2 :- scalar;

=> Array.subScalar(array1, array2, scalar);


(* Multiplication *)

array1 := scalar * array2;

array1 := scalar *: array2;

array1 := array2 :* scalar;

=> VAR temp : Array;
   Array.new(temp); Array.mulByScalar(temp, scalar, array2); array1 := temp;

NEW array1 := scalar * array2;

NEW array1 := scalar *: array2;

NEW array1 := array2 :* scalar;

=> IF array1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Array.new(array1); Array.mulByScalar(array1, array2, scalar);

COPY array1 := scalar * array2;

COPY array1 := scalar *: array2;

COPY array1 := array2 :* scalar;

=> Array.mulByScalar(array1, array2, scalar);


(* Division *)

(* scalar divisor *)

array1 := array2 / scalar;

array1 := array2 :/ scalar;

=> VAR temp : Array;
   Array.new(temp); Array.divByScalar(temp, scalar, array2); array1 := temp;

NEW array1 := array2 / scalar;

NEW array1 := array2 :/ scalar;

=> IF array1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Array.new(array1); Array.divByScalar(array1, array2, scalar);

COPY array1 := array2 / scalar;

COPY array1 := array2 :/ scalar;

=> Array.divByScalar(array1, array2, scalar);


(* scalar dividend *)

array1 := scalar / array2;

array1 := scalar /: array2;

=> VAR temp : Array;
   Array.new(temp);
   Array.divScalarByArray(temp, scalar, array2); array1 := temp;

NEW array1 := scalar / array2;

NEW array1 := scalar /: array2;

=> IF array1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Array.new(array1); Array.divScalarByArray(array1, array2, scalar);

COPY array1 := scalar / array2;

COPY array1 := scalar /: array2;

=> Array.divScalarByArray(array1, array2, scalar);


(* Semantics *)

(* Sample Implementations *)

(* Array-Array Operations *)

(* Addition *)

PROCEDURE [+] add ( VAR result : Array; left, right : Array );
VAR
  largerArray : Array;
  maxIndex, largestCommonIndex : CARDINAL;
BEGIN

  (* if left operand is empty, result is right operand *)
  IF COUNT(left) = 0 THEN
    COPY result := right
  
  (* if right operand is empty, result is left operand *)
  ELSIF COUNT(right) = 0 THEN
    COPY result := left
  
  (* otherwise, add operands component-wise *)
  ELSE
  
    (* determine largest and largest common index *)
    IF COUNT(left) < COUNT(right) THEN
      largerArray := right;
      maxIndex := COUNT(right)-1;
      largestCommonIndex := COUNT(left)-1
    ELSE
      largerArray := left;
      maxIndex := COUNT(left)-1;
      largestCommonIndex := COUNT(right)-1
    END;
    
    (* remove any remaining components from result *)
    IF COUNT(result) # 0 THEN Array.remove(0, COUNT(result)-1) END;
    
    (* add items within common index range *)
    FOR index IN [0..largestCommonIndex] OF CARDINAL DO
      result[index] := left[index] + right[index]
    END;
    
    (* copy any remaining items from larger array *)
    IF largestCommonIndex < maxIndex THEN
      FOR index IN [largestCommonIndex+1 .. maxIndex] OF CARDINAL DO
        result[index] := largerArray[index]
      END
    END
  END;

  RETURN
END add;


(* Subtraction *)

PROCEDURE [-] sub ( VAR result : Array; left, right : Array );
VAR
  largerArray : Array;
  maxIndex, largestCommonIndex : CARDINAL;
BEGIN

  (* if left operand is empty, result is right operand *)
  IF COUNT(left) = 0 THEN
    COPY result := right
  
  (* if right operand is empty, result is left operand *)
  ELSIF COUNT(right) = 0 THEN
    COPY result := left
  
  (* otherwise, subtract second operand from first operand component-wise *)
  ELSE
  
    (* determine largest and largest common index *)
    IF COUNT(left) < COUNT(right) THEN
      largerArray := right;
      maxIndex := COUNT(right)-1;
      largestCommonIndex := COUNT(left)-1
    ELSE
      largerArray := left;
      maxIndex := COUNT(left)-1;
      largestCommonIndex := COUNT(right)-1
    END;
    
    (* remove any remaining components from result *)
    IF COUNT(result) # 0 THEN Array.remove(0, COUNT(result)-1) END;
    
    (* subtract items within common index range *)
    FOR index IN [0..largestCommonIndex] OF CARDINAL DO
      result[index] := left[index] - right[index]
    END;
    
    (* copy any remaining items from larger array *)
    IF largestCommonIndex < maxIndex THEN
      FOR index IN [largestCommonIndex+1 .. maxIndex] OF CARDINAL DO
        result[index] := largerArray[index]
      END
    END
  END;

  RETURN
END sub;


(* Multiplication *)

PROCEDURE [*] mul ( VAR result : Array; left, right : Array );
VAR
  largerArray : Array;
  maxIndex, largestCommonIndex : CARDINAL;
BEGIN

  (* if left operand is empty, result is right operand *)
  IF COUNT(left) = 0 THEN
    COPY result := right
  
  (* if right operand is empty, result is left operand *)
  ELSIF COUNT(right) = 0 THEN
    COPY result := left
  
  (* otherwise, multiply operands component-wise *)
  ELSE
  
    (* determine largest and largest common index *)
    IF COUNT(left) < COUNT(right) THEN
      largerArray := right;
      maxIndex := COUNT(right)-1;
      largestCommonIndex := COUNT(left)-1
    ELSE
      largerArray := left;
      maxIndex := COUNT(left)-1;
      largestCommonIndex := COUNT(right)-1
    END;
    
    (* remove any remaining components from result *)
    IF COUNT(result) # 0 THEN Array.remove(0, COUNT(result)-1) END;

    (* multiply items within common index range *)
    FOR index IN [0..largestCommonIndex] OF CARDINAL DO
      result[index] := left[index] * right[index]
    END;
    
    (* copy any remaining items from larger array *)
    IF largestCommonIndex < maxIndex THEN
      FOR index IN [largestCommonIndex+1 .. maxIndex] OF CARDINAL DO
        result[index] := largerArray[index]
      END
    END
  END;

  RETURN
END mul;


(* Division *)

PROCEDURE [/] div ( VAR result : Array; left, right : Array );
VAR
  largerArray : Array;
  maxIndex, largestCommonIndex : CARDINAL;
BEGIN

  (* if left operand is empty, result is right operand *)
  IF COUNT(left) = 0 THEN
    COPY result := right
  
  (* if right operand is empty, result is left operand *)
  ELSIF COUNT(right) = 0 THEN
    COPY result := left
  
  (* otherwise, divide first operand by second operand component-wise *)
  ELSE
  
    (* determine largest and largest common index *)
    IF COUNT(left) < COUNT(right) THEN
      largerArray := right;
      maxIndex := COUNT(right)-1;
      largestCommonIndex := COUNT(left)-1
    ELSE
      largerArray := left;
      maxIndex := COUNT(left)-1;
      largestCommonIndex := COUNT(right)-1
    END;
    
    (* remove any remaining components from result *)
    IF COUNT(result) # 0 THEN Array.remove(0, COUNT(result)-1) END;

    (* divide items within common index range *)
    FOR index IN [0..largestCommonIndex] OF CARDINAL DO
      result[index] := left[index] / right[index]
    END;
    
    (* copy any remaining items from larger array *)
    IF largestCommonIndex < maxIndex THEN
      FOR index IN [largestCommonIndex+1 .. maxIndex] OF CARDINAL DO
        result[index] := largerArray[index]
      END
    END
  END;

  RETURN
END div;


(* Scalar-Array Operations *)

(* Addition *)

PROCEDURE [:+] addScalar
  ( VAR result : Array; left : Array; right : ValueType );
BEGIN
  IF COUNT(result) # 0 THEN Array.remove(0, COUNT(result)-1) END;
  FOR index IN [0..COUNT(left)] OF CARDINAL DO
    result[index] := left[index] + right
  END;
  RETURN
END addScalar;


(* Subtraction *)

(* scalar subtrahend *)

PROCEDURE [:-] subScalar
  ( VAR result : Array; left : Array; right : ValueType );
BEGIN
  IF COUNT(result) # 0 THEN Array.remove(0, COUNT(result)-1) END;
  FOR index IN [0..COUNT(left)] OF CARDINAL DO
    result[index] := left[index] - right
  END;
  RETURN
END subScalar;


(* scalar minuend *)

PROCEDURE [-:] subFromScalar
  ( VAR result : Array; left : ValueType; right : Array );
BEGIN
  IF COUNT(result) # 0 THEN Array.remove(0, COUNT(result)-1) END;
  FOR index IN [0..COUNT(right)] OF CARDINAL DO
    result[index] := left - right[index]
  END;
  RETURN
END subFromScalar;


(* Multiplication *)

PROCEDURE [:*] mulByScalar
  ( VAR result : Array; left : Array; right : ValueType );
BEGIN
  IF COUNT(result) # 0 THEN Array.remove(0, COUNT(result)-1) END;
  FOR index IN [0..COUNT(left)] OF CARDINAL DO
    result[index] := left[index] * right
  END;
  RETURN
END mulByScalar;


(* Division *)

(* scalar divisor *)

PROCEDURE [:/] divByScalar
  ( VAR result : Array; left : Array; right : ValueType );
BEGIN
  IF COUNT(result) # 0 THEN Array.remove(0, COUNT(result)-1) END;
  FOR index IN [0..COUNT(left)] OF CARDINAL DO
    result[index] := left[index] / right
  END;
  RETURN
END divByScalar;

(* scalar dividend *)

PROCEDURE [/:] divScalarByArray
  ( VAR result : Array; left : ValueType; right : Array );
BEGIN
  IF COUNT(result) # 0 THEN Array.remove(0, COUNT(result)-1) END;
  FOR index IN [0..COUNT(left)] OF CARDINAL DO
    result[index] := left / right[index]
  END;
  RETURN
END divScalarByArray;


(* END OF FILE *)