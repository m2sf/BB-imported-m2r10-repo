(* M2 R10 Project, (c) 2014 B.Kowarsch & R.Sutcliffe, all rights reserved. *)

(* Dynamic Set ADTs *)

(* Use cases for conversion of built-in sets to dynamic set ADTs, allocation
   copying, slicing, insertion and removal operations of dynamic set ADTs,
   required bindings and resulting compile time transformations. *)

(* Status: Dec 10, 2014 *)


(* =======================
 *    U s e   C a s e s
 * ======================= *)


(* Assignment *)

(* assign NIL *)

set := NIL;
 
(* assign set *)

set := source;

(* assign function call result *)

set := function(setExpression);


(* Allocation / Non-destructive Copying *)

(* without initialisation *)

NEW set;

(* allocate and initialise with values *)

NEW set := { elem1, elem2, elem3, ... };

(* allocate and initialise with set *)

NEW set := source;

(* allocate and initialise with union of sets *)

NEW set := source1 + source2 + source3 + ... ;

(* allocate and initialise with union of sets and literals *)

NEW set := source1 + source2 + { elem1, elem2, elem3 + ... }, + ... ;

(* allocate and initialise with function call result *)

NEW set := function(setExpression);


(* Destructive Copying *)

(* copy values *)

COPY target := { elem1, elem2, elem3, ... };

(* copy set *)

COPY target := source;

(* copy union of sets *)

COPY target := source1 + source2 + source3 + ... ;

(* allocate and initialise with union of sets and literals *)

COPY target := source1 + source2 + { elem1, elem2, elem3 + ... }, + ... ;

(* copy function call result *)

COPY target := function(setExpression);


(* Insertion *)

(* insert values *)

INSERT(set, elem1, elem2, elem3, ...);


(* Removal *)

(* remove values *)

REMOVE(set, elem1, elem2, elem3, ...);


(* =====================
 *    B i n d i n g s
 * ===================== *)


(* Assignment *)

(* no bindings *)


(* Allocation *)

(* binding #1 *)

PROCEDURE [NEW] new ( VAR newSet : ADT; values : ARGLIST OF ValueType );

(* supported use cases *)

NEW set;

NEW set := { val1, val2, val3, ... };


(* binding #2 *)

PROCEDURE [NEW*] newWithSet ( VAR new : ADT; source : ADT );

(* supported use case *)

NEW set := source;


(* binding #3 *)

PROCEDURE [NEW+] newWithUnionOfSets
  ( VAR new : ADT; initWith : ARGLIST OF ADT );

(* supported use cases *)

NEW set := source1 + source2 + ... ;


(* binding #4 *)

PROCEDURE [NEW++] newWithUnionOfSetsAndLiterals
  ( VAR new : ADT;
    initWithSets : ARGLIST OF ADT; andValues : ARGLIST OF ValueType } );

(* supported use cases *)

NEW set := source + { elem1, elem2, elem3, ... } + ... ;

NEW set := { elem1, elem2, elem3, ... } + source + ... ;


(* Copying *)

(* binding #1 *)

PROCEDURE [COPY] copyValues ( VAR target : ADT; values : ARGLIST OF ValueType );

(* supported use case *)

COPY target := { elem1, elem2, elem3, ... };


(* binding #2 *)

PROCEDURE [COPY*] copySet ( VAR target : ADT; source : ADT );

(* supported use case *)

COPY target := source;


(* binding #3 *)

PROCEDURE [COPY+] copyUnionOfSets
  ( VAR target : ADT; source : ARGLIST OF ADT );

(* supported use cases *)

COPY target := source1 + source2 + ... ;


(* binding #4 : when implementing concatenation and slicing ... *)

PROCEDURE [COPY++] copyUnionOfSetsAndLiterals
  ( VAR target : ADT;
    initWithSets : ARGLIST OF ADT; andValues : ARGLIST OF ValueType } );

(* supported use cases *)

COPY target := source + { elem1, elem2, elem3, ... } + ... ;

COPY target := { elem1, elem2, elem3, ... } + source + ... ;


(* Insertion *)

(* binding *)

PROCEDURE [INSERT] insertValues
  ( VAR target : ADT; values : ARGLIST OF ValueType );

(* supported use cases *)

INSERT(target, elem1, elem2, elem3, ... };


(* Argument Passing *)

(* required binding *)

PROCEDURE [RETAIN] retain ( VAR set : ADT );

(* supported use cases *)

target := function(setExpression);

NEW target := function(setExpression);

COPY target := function(setExpression);


(* Removal *)

(* binding *)

PROCEDURE [REMOVE] removeValues
  ( VAR target : ADT; values : ARGLIST OF ValueType );

(* supported use cases *)

REMOVE(target, elem1, elem2, elem3, ...);


(* ===================================
 *    T r a n s f o r m a t i o n s
 * =================================== *)


(* Assignment *)

(* assign NIL *)

set := NIL;

=> set := NIL;
 

(* assign set *)

set := source;

=> set := source;


(* assign function call result *)

set := function(setExpression);

=> VAR temp : ADT;
   (* prepare argument *)
   temp := setExpression;
   (* call function and assign result *)
   set := function(temp); ADT.release(temp);


(* Allocation / Non-destructive Copying *)

(* without initialisation *)

NEW set;

=> ADT.new(set);


(* allocate and initialise with values *)

NEW set := { elem1, elem2, elem3, ... };
 
=> ADT.new(set, elem1, elem2, elem3, ...);


(* allocate and initialise with set *)

NEW set := source;

=> ADT.newWithSet(set, source);


(* allocate and initialise with union of sets *)

NEW set := source1 + source2 + ... ;

=> ADT.newWithUnionOfSets(
    (* L-value *) set,
    (* R-value *) source1, source2, source3, ...);


(* allocate and initialise with union of sets and literals *)

NEW set := source1 + source2 + { elem1, elem2, elem3, ... } + ... ;

=> ADT.newWithUnionOfSetsAndLiterals(
    (* L-value *) set,
    (* R-value *) { source1, source2 }, { elem1, elem2, elem3, ... } );

NEW set := { elem1, elem2, elem3, ... } + source1 + source2 + ... ;

=> ADT.newWithUnionOfSetsAndLiterals(
    (* L-value *) set,
    (* R-value *) { source1, source2 }, { elem1, elem2, elem3, ... } );


(* allocate and initialise with function call result *)

NEW set := function(setExpression);

=> VAR temp : ADT;
   (* prepare argument *)
   temp := setExpression;
   (* call function and create set with result *)
   ADT.newWithSet(set, function(temp)); ADT.release(temp);


(* Destructive Copying *)

(* copy values *)

COPY target := { elem1, elem2, elem3, ... };

=> ADT.copyValues(target, elem1, elem2, elem3, ...);

 
(* copy set *)

COPY target := source;

=> ADT.copySet(target, source);



(* copy union of sets *)

COPY target := source1 + source2 + ... ;

=> ADT.copyUnionOfSets(
    (* L-value *) set,
    (* R-value *) source1, source2, source3, ...);


(* copy union of sets and literals *)

COPY target := source1 + source2 + { elem1, elem2, elem3, ... } + ... ;

=> ADT.copyUnionOfSetsAndLiterals(
    (* L-value *) set,
    (* R-value *) { source1, source2 }, { elem1, elem2, elem3, ... } );

COPY target := { elem1, elem2, elem3, ... } + source1 + source2 + ... ;

=> ADT.copyUnionOfSetsAndLiterals(
    (* L-value *) set,
    (* R-value *) { source1, source2 }, { elem1, elem2, elem3, ... } );


(* copy function call result *)

COPY target := function(setExpression);

=> VAR tempArg, tempResult : ADT;
   (* prepare argument *)
   tempArg := setExpression;
   (* call function *)
   tempResult := function(tempArg); ADT.release(tempArg);
   (* copy function call result into target *)
   ADT.copySet(target, tempResult); ADT.release(tempResult);


(* Insertion *)

(* insert values *)

INSERT(target, elem1, elem2, elem3, ...);

=> ADT.insertValues(target, elem1, elem2, elem3, ...);


(* Removal *)

(* remove values *)

REMOVE(target, elem1, elem2, elem3, ...);

=> ADT.removeValues(target, elem1, elem2, elem3, ...);


(* END OF FILE *)