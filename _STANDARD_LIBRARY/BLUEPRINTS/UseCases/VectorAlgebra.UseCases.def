(* M2 R10 Project, (c) 2014 B.Kowarsch & R.Sutcliffe, all rights reserved. *)

(* Vector Algebra *)

(* Exploration of use cases for vector algebra,
   required bindings and resulting compile time transformations. *)

(* Status: Dec 14, 2014 *)


(* =======================
 *    U s e   C a s e s
 * ======================= *)


(* Sign Operations *)

(* Sign Removal *)

vector1 := ABS(vector2);

NEW vector1 := ABS(vector2);

COPY vector1 := ABS(vector2);


(* Sign Reversal *)

vector1 := -vector2;

NEW vector1 := -vector2;

COPY vector1 := -vector2;


(* Vector-Vector Operations *)

(* Addition *)

vector1 := vector2 + vector3;

NEW vector1 := vector2 + vector3;

COPY vector1 := vector2 + vector3;


(* Subtraction *)

vector1 := vector2 - vector3;

NEW vector1 := vector2 - vector3;

COPY vector1 := vector2 - vector3;


(* Dot Product *)

scalar := vector1 *. vector2;


(* Cross Product, R3 only *)

vector1 := vector2 * vector3;

NEW vector1 := vector2 * vector3;

COPY vector1 := vector2 * vector3;


(* Scalar-Vector Operations *)

(* Scalar Addition *)

(* option #1 : overload + operator *)

vector1 := vector2 + scalar;

NEW vector1 := vector2 + scalar;

COPY vector1 := vector2 + scalar;


(* option #2 : special symbol operator *)

vector1 := vector2 :+ scalar;

NEW vector1 := vector2 :+ scalar;

COPY vector1 := vector2 :+ scalar;


(* option #3 : extension library procedures *)

Vector.addScalar(vector1, vector2, scalar);

Vector.newFromScalarAddition(vector1, vector2, scalar);


(* Scalar Subtraction *)

(* option #1 : overload - operator *)

vector1 := vector2 - scalar;

NEW vector1 := vector2 - scalar;

COPY vector1 := vector2 - scalar;


(* option #2 : special symbol operator *)

vector1 := vector2 :- scalar;

NEW vector1 := vector2 :- scalar;

COPY vector1 := vector2 :- scalar;


(* option #3 : extension library procedures *)

Vector.subScalar(vector1, vector2, scalar);

Vector.newFromScalarSubtration(vector1, vector2, scalar);


(* Scalar Multiplication *)

(* option #1 : overload + operator *)

vector1 := vector2 * scalar;

NEW vector1 := vector2 * scalar;

COPY vector1 := vector2 * scalar;


(* option #2 : special symbol operator *)

vector1 := vector2 :* scalar;

NEW vector1 := vector2 :* scalar;

COPY vector1 := vector2 :* scalar;


(* option #3 : extension library procedures *)

Vector.mulScalar(vector1, vector2, scalar);

Vector.newFromScalarMultiplication(vector1, vector2, scalar);


(* Scalar Division *)

(* option #1 : overload + operator *)

vector1 := vector2 / scalar;

NEW vector1 := vector2 / scalar;

COPY vector1 := vector2 / scalar;


(* option #2 : special symbol operator *)

vector1 := vector2 :/ scalar;

NEW vector1 := vector2 :/ scalar;

COPY vector1 := vector2 :/ scalar;


(* option #3 : extension library function *)

Vector.divScalar(vector1, vector2, scalar);

Vector.newFromScalarDivision(vector1, vector2, scalar);


(* =====================
 *    B i n d i n g s
 * ===================== *)


(* Sign Operations *)

(* Sign Removal *)

PROCEDURE [ABS] abs ( VAR result : Vector; operand : Vector );

(* supported use cases *)

vector1 := ABS(vector2);

NEW vector1 := ABS(vector2);

COPY vector1 := ABS(vector2);


(* Sign Reversal *)

PROCEDURE [NEG] neg ( VAR result : Vector; operand : Vector );

(* supported use cases *)

vector1 := -vector2;

NEW vector1 := -vector2;

COPY vector1 := -vector2;


(* Vector-Vector Operations *)

(* Addition *)

PROCEDURE [+] add ( VAR result : Vector; left, right : Vector );

(* supported use cases *)

vector1 := vector2 + vector3;

NEW vector1 := vector2 + vector3;

COPY vector1 := vector2 + vector3;


(* Subtraction *)

PROCEDURE [-] sub ( VAR result : Vector; left, right : Vector );

(* supported use cases *)

vector1 := vector2 - vector3;

NEW vector1 := vector2 - vector3;

COPY vector1 := vector2 - vector3;


(* Dot Product *)

PROCEDURE [*.] dot ( left, right : Vector ) : ValueType;

(* supported use case *)

scalar := vector1 *. vector2;


(* Cross Product *)

PROCEDURE [*] cross ( VAR result : Vector; left, right : Vector );

(* supported use cases *)

vector1 := vector2 * vector3;

NEW vector1 := vector2 * vector3;

COPY vector1 := vector2 * vector3;


(* Scalar-Vector Operations *)

(* Scalar Addition *)

(* option #1 *)

PROCEDURE [:+] addScalar
  ( VAR result : Vector; left : Vector; right : ValueType );

(* supported use cases *)

vector1 := vector2 + scalar;

NEW vector1 := vector2 + scalar;

COPY vector1 := vector2 + scalar;


(* option #2 *)

PROCEDURE [:+] addScalar
  ( VAR result : Vector; left : Vector; right : ValueType );

(* supported use cases *)

vector1 := vector2 :+ scalar;

NEW vector1 := vector2 :+ scalar;

COPY vector1 := vector2 :+ scalar;


(* option #3 *)

(* no bindings *)

(* library procedure definitions *)

PROCEDURE addScalar
  ( VAR result : Vector; left : Vector; right : ValueType );

(* supported use case *)

Vector.addScalar(vector1, vector2, scalar);


PROCEDURE newFromScalarAddition
  ( NEW result : Vector; left : Vector; right : ValueType );

(* supported use case *)

Vector.newFromScalarAddition(vector1, vector2, scalar);


(* Scalar Subtraction *)

(* option #1 *)

PROCEDURE [:-] subScalar
  ( VAR result : Vector; left : Vector; right : ValueType );

(* supported use cases *)

vector1 := vector2 - scalar;

NEW vector1 := vector2 - scalar;

COPY vector1 := vector2 - scalar;


(* option #2 *)

PROCEDURE [:-] subScalar
  ( VAR result : Vector; left : Vector; right : ValueType );

(* supported use cases *)

vector1 := vector2 :- scalar;

NEW vector1 := vector2 :- scalar;

COPY vector1 := vector2 :- scalar;


(* option #3 *)

(* no bindings *)

(* library procedure definitions *)

PROCEDURE subScalar
  ( VAR result : Vector; left : Vector; right : ValueType );

(* supported use case *)

Vector.subScalar(vector1, vector2, scalar);


PROCEDURE newFromScalarSubtraction
  ( NEW result : Vector; left : Vector; right : ValueType );

(* supported use case *)

Vector.newFromScalarSubtraction(vector1, vector2, scalar);


(* Scalar Multiplication *)

(* option #1 *)

PROCEDURE [:*] mulScalar
  ( VAR result : Vector; left : Vector; right : ValueType );

(* supported use cases *)

vector1 := vector2 * scalar;

NEW vector1 := vector2 * scalar;

COPY vector1 := vector2 * scalar;


(* option #2 *)

PROCEDURE [:*] mulScalar
  ( VAR result : Vector; left : Vector; right : ValueType );

(* supported use cases *)

vector1 := vector2 :* scalar;

NEW vector1 := vector2 :* scalar;

COPY vector1 := vector2 :* scalar;


(* option #3 *)

(* no bindings *)

(* library procedure definitions *)

PROCEDURE mulScalar
  ( VAR result : Vector; left : Vector; right : ValueType );

(* supported use case *)

Vector.mulScalar(vector1, vector2, scalar);


PROCEDURE newFromScalarMultiplication
  ( NEW result : Vector; left : Vector; right : ValueType );

(* supported use case *)

Vector.newFromScalarMultiplication(vector1, vector2, scalar);


(* Scalar Division *)

(* option #1 *)

PROCEDURE [:/] divScalar
  ( VAR result : Vector; left : Vector; right : ValueType );

(* supported use cases *)

vector1 := vector2 / scalar;

NEW vector1 := vector2 / scalar;

COPY vector1 := vector2 / scalar;


(* option #2 *)

PROCEDURE [:/] addScalar
  ( VAR result : Vector; left : Vector; right : ValueType );

(* supported use cases *)

vector1 := vector2 :/ scalar;

NEW vector1 := vector2 :/ scalar;

COPY vector1 := vector2 :/ scalar;


(* option #3 *)

(* no bindings *)

(* library procedure definitions *)

PROCEDURE divScalar
  ( VAR result : Vector; left : Vector; right : ValueType );

(* supported use case *)

Vector.divScalar(vector1, vector2, scalar);


PROCEDURE newFromScalarDivision
  ( NEW result : Vector; left : Vector; right : ValueType );

(* supported use case *)

Vector.newFromScalarDivision(vector1, vector2, scalar);


(* ===================================
 *    T r a n s f o r m a t i o n s
 * =================================== *)


(* Sign Operations *)

(* Sign Removal *)

vector1 := ABS(vector2);

=> VAR temp : Vector;
   Vector.new(temp);
   Vector.abs(vector1, vector2); vector1 := temp;

NEW vector1 := ABS(vector2);

=> IF vector1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Vector.new(vector1); Vector.abs(vector1, vector2);

COPY vector1 := ABS(vector2);

=> Vector.abs(vector1, vector2);


(* Sign Reversal *)

vector1 := -vector2;

=> VAR temp : Vector;
   Vector.new(temp);
   Vector.neg(vector1, vector2); vector1 := temp;

NEW vector1 := -vector2;

=> IF vector1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Vector.new(vector1); Vector.neg(vector1, vector2);

COPY vector1 := -vector2;

=> Vector.neg(vector1, vector2);


(* Vector-Vector Operations *)

(* Addition *)

vector1 := vector2 + vector3;

=> VAR temp : Vector;
   Vector.new(temp);
   Vector.add(vector1, vector2, vector3); vector1 := temp;

NEW vector1 := vector2 + vector3;

=> IF vector1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Vector.new(vector1); Vector.add(vector1, vector2, vector3);

COPY vector1 := vector2 + vector3;

=> Vector.add(vector1, vector2, vector3);


(* Subtraction *)

vector1 := vector2 - vector3;

=> VAR temp : Vector;
   Vector.new(temp);
   Vector.sub(vector1, vector2, vector3); vector1 := temp;

NEW vector1 := vector2 - vector3;

=> IF vector1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Vector.new(vector1); Vector.sub(vector1, vector2, vector3);

COPY vector1 := vector2 - vector3;

=> Vector.sub(vector1, vector2, vector3);


(* Dot Product *)

scalar := vector1 *. vector2;

=> scalar := Vector.dot(vector1, vector2);


(* Cross Product *)

vector1 := vector2 * vector3;

=> VAR temp : Vector;
   (* verify that arguments are vectors in R3 *)
   IF (COUNT(vector2) # 3) OR (COUNT(vector3) # 3) THEN
     RaiseRuntimeFault(invalidParam)
   END;
   (* calculate cross product *)
   Vector.new(temp);
   Vector.cross(vector1, vector2, vector3); vector1 := temp;

NEW vector1 := vector2 * vector3;

=> IF vector1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   (* verify that arguments are vectors in R3 *)
   IF (COUNT(vector2) # 3) OR (COUNT(vector3) # 3) THEN
     RaiseRuntimeFault(invalidParam)
   END;
   (* calculate cross product *)
   Vector.new(vector1); Vector.cross(vector1, vector2, vector3);

COPY vector1 := vector2 * vector3;

=> (* verify that arguments are vectors in R3 *)
   IF (COUNT(vector2) # 3) OR (COUNT(vector3) # 3) THEN
     RaiseRuntimeFault(invalidParam)
   END;
   (* calculate cross product *)
   Vector.cross(vector1, vector2, vector3);


(* Vector-Scalar Operations *)

(* Scalar Addition *)

vector1 := vector2 + scalar; (* option #1 *)

vector1 := vector2 :+ scalar; (* option #2 *)

=> VAR temp : Vector;
   Vector.new(temp);
   Vector.addScalar(vector1, vector2, scalar); vector1 := temp;

NEW vector1 := vector2 + scalar;  (* option #1 *)

NEW vector1 := vector2 :+ scalar; (* option #2 *)

=> IF vector1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Vector.new(vector1); Vector.addScalar(vector1, vector2, scalar);

COPY vector1 := vector2 + scalar; (* option #1 *)

COPY vector1 := vector2 :+ scalar; (* option #2 *)

=> Vector.addScalar(vector1, vector2, scalar);


(* Scalar Subtraction *)

vector1 := vector2 - scalar; (* option #1 *)

vector1 := vector2 :- scalar; (* option #2 *)

=> VAR temp : Vector;
   Vector.new(temp);
   Vector.subScalar(vector1, vector2, scalar); vector1 := temp;

NEW vector1 := vector2 - scalar; (* option #1 *)

NEW vector1 := vector2 :- scalar; (* option #2 *)

=> IF vector1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Vector.new(vector1); Vector.subScalar(vector1, vector2, scalar);

COPY vector1 := vector2 - scalar; (* option #1 *)

COPY vector1 := vector2 :- scalar; (* option #2 *)

=> Vector.subScalar(vector1, vector2, scalar);


(* Scalar Multiplication *)

vector1 := vector2 * scalar; (* option #1 *)

vector1 := vector2 :* scalar; (* option #2 *)

=> VAR temp : Vector;
   Vector.new(temp);
   Vector.mulScalar(vector1, vector2, scalar); vector1 := temp;

NEW vector1 := vector2 * scalar; (* option #1 *)

NEW vector1 := vector2 :* scalar; (* option #2 *)

=> IF vector1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Vector.new(vector1); Vector.mulScalar(vector1, vector2, scalar);

COPY vector1 := vector2 * scalar; (* option #1 *)

COPY vector1 := vector2 :* scalar; (* option #2 *)

=> Vector.mulScalar(vector1, vector2, scalar);


(* Scalar Division *)

vector1 := vector2 / scalar; (* option #1 *)

vector1 := vector2 :/ scalar;  (* option #2 *)

=> VAR temp : Vector;
   Vector.new(temp);
   Vector.divScalar(vector1, vector2, scalar); vector1 := temp;

NEW vector1 := vector2 / scalar; (* option #1 *)

NEW vector1 := vector2 :/ scalar; (* option #2 *)

=> IF vector1 # NIL THEN RaiseRuntimeFault(formalNewParamNotNil) END;
   Vector.new(vector1); Vector.divScalar(vector1, vector2, scalar);

COPY vector1 := vector2 / scalar; (* option #1 *)

COPY vector1 := vector2 :/ scalar; (* option #2 *)

=> Vector.divScalar(vector1, vector2, scalar);


(* END OF FILE *)