(*!m2r10*) (* (C) 2009-2015 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* General Blueprint for Dynamically Allocatable Collection ADTs *)

BLUEPRINT ProtoCollection [ProtoRoot];

REFERENTIAL AccessorType, ValueType, HandlerType, LoopBodyType;


(* Required Module Type *)

MODULE TYPE = { isCollection; * };

TLITERAL =
  charLiteral | unicharLiteral |
  { ARGLIST OF AccessorType } |
  { ARGLIST OF { AccessorType, ValueType } };
(* Quoted literals or structured literals are compatible. *)


(* Required Constants *)

(* Memory Management Model *)

CONST [TDYN] isDynamic : BOOLEAN;
(* Required constant to define whether conforming ADTs should be dynamic.
   Its value may be TRUE or FALSE. *)

CONST [TREFC] isRefCounted : BOOLEAN;
(* Required constant to define whether conforming ADTs should be reference
   counted. Its value may be TRUE or FALSE. *)


(* Storage Capacity *)

CONST [TLIMIT] capacity : LONGCARD;
(* Required constant to define the entry limit of a collection ADT.
   Its value may be any LONGCARD value. Zero indicates no-limit. *)


(* Orderedness *)

CONST [TORDERED] isOrdered : BOOLEAN;
(* Required constant to define whether conforming ADTs permit bidirectional
   FOR loop iteration. Its value may be TRUE or FALSE. *)


(* NIL Storage *)

CONST [TFLAGS] supportsNilStorage : BOOLEAN;
(* Required constant to define whether NIL should be a storable value.
   Its value may be TRUE or FALSE. *)


(* Support for Invalid Accessor Retrieval Intercept *)

CONST * invAccessorRetrievalIntercept : BOOLEAN;
(* Required constant to define whether invalid accessor retrieval errors may
   be intercepted by user defined handlers. Its value may be TRUE or FALSE. *)


(* Required Procedures *)

(* Introspection *)

(* Binding to Predefined Function COUNT or LENGTH *)

(* When TLIMIT is required, either COUNT or LENGTH is required.
   Specialised blueprints must require one of the two accordingly. *)


(* Memory Management *)

isDynamic -> PROCEDURE [NEW];
(* Specialised blueprints shall require binding to NEW
   when the ADT is dynamic. *)

isRefCounted -> PROCEDURE [RETAIN];
(* Specialised blueprints shall require binding to RETAIN
   when the ADT is reference counted. *)

isDynamic -> PROCEDURE [RELEASE];
(* Specialised blueprints shall require binding to RELEASE
   when the ADT is dynamic. *)


(* Value Storage *)

(* Binding to Predefined Procedure STORE *)

PROCEDURE [STORE];
(* Specialised blueprints shall require binding to STORE. *)


(* Value Retrieval *)

(* Binding to Predefined Function VALUE *)

PROCEDURE [VALUE];
(* Specialised blueprints shall require binding to VALUE. *)


(* Invalid Accessor Retrieval Error Handling *)

(* A user defined invalid-accessor handler function may be used to change
   the default behaviour when RETRIEVE is called with an invalid accessor. *)

(* Handler Type *)

invAccessorRetrievalIntercept ->
TYPE HandlerType = PROCEDURE ( VAR ValueType ) : BOOLEAN;
(* Specialised blueprints must require procedure type for user defined
   invalid-accessor handlers when invAccessorRetrievalIntercept is TRUE. *)


(* Handler Installation *)

invAccessorRetrievalIntercept ->
PROCEDURE installHandler ( handler : HandlerType );
(* Specialised blueprints must require procedure to install user defined
   invalid-accessor handlers when invAccessorRetrievalIntercept is TRUE. *)


(* Value Insertion *)

(* Binding to Predefined Procedure INSERT *)

PROCEDURE [INSERT];
(* Specialised blueprints must always require binding to INSERT. *)


(* Value Removal *)

(* Binding to Predefined Procedure REMOVE *)

PROCEDURE [REMOVE];
(* Specialised blueprints must always require binding to REMOVE. *)


(* Value Appending *)

(* Binding to APPEND *)

(* The operation APPEND is not common to all collection ADTs,
   its binding may be required by more specialised blueprints. *)


(* Membership Test *)

(* Binding to IN syntax *)

(* The operation IN is not common to all collection ADTs,
   its binding may be required by more specialised blueprints. *)


(* Iteration *)

(* Binding to FOR *)

(* FOR loop iteration is not common to all collection ADTs,
   its bindings may be required by more specialised blueprints. *)


(* Relational Operations *)

(* Binding to the = and # Operators *)

PROCEDURE [=];
(* Specialised blueprints must always require binding to = operator. *)

(* The operation for the # operator is automatically synthesised. *)


(* Binding to < and > Operators *)

(* The operations less-than, less-or-equal, greater-than and
   greater-than-equal are not common to all collection ADTs,
   their binding may be required by specialised blueprints. *)


(* Set Operations *)

(* Binding to Predefined Function SUBSET *)

(* The operation SUBSET is not common to all collection ADTs,
   its binding may be required by specialised blueprints. *)


(* Conditionally Inhibited Bindings *)

(* Conforming blueprints may not require bindings to RETAIN and CONCAT,
   nor to any set operations if the ADT is not reference counted. *)

NOT isRefCounted -> PROCEDURE [RETAIN] = NONE; (* inhibited *)

NOT isRefCounted  -> PROCEDURE [+] = NONE; (* inhibited *)

NOT isRefCounted  -> PROCEDURE [-] = NONE; (* inhibited *)

NOT isRefCounted  -> PROCEDURE [*] = NONE; (* inhibited *)

NOT isRefCounted  -> PROCEDURE [/] = NONE; (* inhibited *)


(* Unconditionally Inhibited Bindings *)

(* Numeric Properties *)

(* Scalar properties are not meaningful for collection ADTs.
   Conforming blueprints may not require bindings to these properties. *)

CONST [TBASE] = NONE; (* inhibited *)

CONST [TPRECISION] = NONE; (* inhibited *)

CONST [TMINEXP] = NONE; (* inhibited *)

CONST [TMAXEXP] = NONE; (* inhibited *)


(* Introspection *)

(* Operations TMIN and TMAX are not meaningful for collection ADTs.
   Conforming blueprints may not require bindings to these operations. *)

PROCEDURE [TMIN] = NONE; (* inhibited *)

PROCEDURE [TMAX] = NONE; (* inhibited *)


(* Arithmetic Operations *)

(* Operations ABS, +/-, DIV and MOD are not meaningful for collection ADTs.
   Conforming blueprints may not require bindings to these operations. *)

PROCEDURE [ABS] = NONE; (* inhibited *)

PROCEDURE [+/-] = NONE; (* inhibited *)

PROCEDURE [DIV] = NONE; (* inhibited *)

PROCEDURE [MOD] = NONE; (* inhibited *)


(* Scalar Conversion *)

(* Scalar conversions are not meaningful for collection ADTs.
   Conforming blueprints may not require bindings to these operations. *)

PROCEDURE [SXF] = NONE; (* inhibited *)

PROCEDURE [VAL] = NONE; (* inhibited *)


END ProtoCollection.