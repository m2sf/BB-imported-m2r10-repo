(* (C) 2009, 2010 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE CharSetIO [ProtoIO] FOR CHARSET;

(* I/O Module for Type CHARSET *)

FROM FileIO IMPORT File;

(* EBNF of the textual representation of CHARSET values:
    charsetValue : simpleFormat | quotedCharFormat | mixedFormat ;
    simpleFormat : "{" ( codePoint  ( "," codePoint )* )? "}" ; 
    mnemonicFormat : "{" ( quotedChar ( "," quotedChar )* )? "}" ;
    mixedFormat : "{" ( codeOrChar ( "," codeOrChar )* )? "}" ;
    codePoint : "0u" base16Digit base16Digit ;
    quotedChar : mnemonic | '"' character '"' ;
    codeOrChar : codePoint | '"' character '"' ;
    mnemonic : "NUL" | "SOH" | "STX" | "ETX" | "EOT" | "ENQ" | "ACK" |
        "BEL" | "BS" | "HT" | "LF" | "VT" | "FF" | "CR" | "SO" | "SI" |
        "DLE" | "DC1" | "DC2" | "DC3" | "DC4" | "NAK" | "SYN" | "ETB" |
        "CAN" | "EM" | "SUB" | "ESC" | "FS" | "GS" | "RS" | "US" | "DEL" ;
    character : digit | letter |
        " " | "!" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" |
        "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" | "?" |
        "@" | "[" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~" ;
    digit : "0" .. "9" ;
    letter : "A" .. "Z" | "a" .. "z" ;
    base16Digit : "0" .. "9" | "A" .. "F" ; *)


PROCEDURE [READ] Read( infile : File; VAR n : CHARSET );
(* Reads the textual representation of a CHARSET value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the numeral being read are
     removed from infile
   - the numeric value of the numeral string read is assigned to the variable
     passed in for n
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with a CHARSET argument. *)

PROCEDURE [WRITE] Write( outfile : File; CONST n : CHARSET );
(* Writes the textual representation of value n to stream outfile. This
   procedure is substituted for invocations of WRITE with a CHARSET argument.*)

PROCEDURE [WRITEF] WriteF
  ( outfile      : File;
    CONST fmtStr : ARRAY OF CHAR;
    items        : ARGLIST OF CONST CHARSET );
(* Writes a formatted textual representation of one or more BYTE values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   CHARSET arguments. *)

PROCEDURE [READ] ReadArray ( infile : File; VAR value : ARRAY OF CHARSET );
(* Calls Read repeatedly to read the textual representation of a sequence of
 CHARSET values from stream infile nto an array 
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with an ARRAY OF CHARSET argument.*)


PROCEDURE [WRITE] WriteArray ( outfile : File; CONST value : ARRAY OF CHARSET );
(* Calls Write repeatedly to write an array  of CHARSETin simple format to stream outfile.
  This procedure is substituted for invocations of WRITE with an ARRAY OF CHARSET argument.*)

PROCEDURE [WRITEF] WriteArrayF
  ( outfile      : File;
    CONST fmtStr : ARRAY OF CHAR;
    items        : ARGLIST OF CONST ARRAY OFCHARSET );

(* Writes a formatted textual representation of one or more ARRAY OF CHARSET values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   ARRAY OF CHARSET arguments. *)

END CharSetIO.