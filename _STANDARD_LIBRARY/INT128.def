(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE INT128 [ProtoInteger];

(* 128-bit Integer Numbers *) 


FROM FileIO IMPORT File; (* required for IO *)


(* INT128 type *)

TYPE
    INT128 = OPAQUE RECORD
        value : ARRAY 16 OF OCTET; (* 128 bits *)
    END; (* INT128 *)


(* Bindings required by blueprint ProtoInteger *)

CONST
    isSigned = TRUE;
    base = 2; (* binary *)
    precision = 127; (* base-2 digits *)
    eMin = 0; (* smallest exponent *)
    eMax = 0; (* largest exponent *)


(* Range *) 

(* TMIN(INT128) = -170'141'183'460'469'231'731'687'303'715'884'105'728 *)

PROCEDURE [TMIN] minValue : INT128;
(* returns the smallest possible value of type INT128.
   This function is bound to pervasive function TMAX for type INT128. *)

(* TMAX(INT128) = 170'141'183'460'469'231'731'687'303'715'884'105'727 *)

PROCEDURE [TMAX] maxValue : INT128;
(* returns the largest possible value of type INT128.
   This function is bound to pervasive function TMAX for type INT128. *)


(* Type conversions *)

PROCEDURE [::] toCARD  ( n : INT128 ) : CARDINAL;
(* Converts INT128 value n to a CARDINAL value and returns it. This
   function is bound to the :: operator for INT128 to CARDINAL conversion. *)

PROCEDURE [::] toINT ( n : INT128 ) : INTEGER; 
(* Converts INT128 value n to an INTEGER value and returns it. This
   function is bound to the :: operator for INT128 to INTEGER conversion. *)

PROCEDURE [::] fromCARD  ( n : CARDINAL ) : INT128;
(* Converts CARDINAL value n to an INT128 value and returns it. This function
   is bound to the :: operator for CARDINAL to INT128 conversion. *)

PROCEDURE [::] fromINT  ( n : INTEGER ) : INT128;
(* Converts INTEGER value n to an INT128 value and returns it. This function
   is bound to the :: operator for INTEGER to INT128 conversion. *)


(* Scalar conversion primitives *)

PROCEDURE [SXF] toSXF ( n : INT128; VAR s : ARRAY OF OCTET );
(* Converts INT128 value n to a string in scalar exchange format.
   This procedure is bound to pervasive primitive SXF for type INT128. *)

PROCEDURE [VAL] fromSXF ( CONST s : ARRAY OF OCTET; VAR n : INT128 );
(* Converts a string in scalar exchange format to an INT128 value.
   This procedure is bound to pervasive primitive VAL for type INT128. *)


(* Monadic arithmetic operations *) 

PROCEDURE [ABS] abs ( n : INT128 ) : INT128;
(* Returns the absolute value of INT128 value n.
   This function is bound to pervasive function ABS for type INT128. *)

PROCEDURE [NEG] neg ( n : INT128 ) : INT128;
(* Returns the sign reversed value of INT128 value n.
   This function is bound to the unary minus operator for type INT128. *)

PROCEDURE [ODD] odd ( n : INT128 ) : BOOLEAN;
(* Returns TRUE if INT128 value n is odd, otherwise FALSE.
   This function is bound to pervasive function ODD for type INT128. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( n1, n2 : INT128 ) : INT128;
(* Adds INT128 values n1 and n2 and returns the result.
   This function is bound to the + operator for type INT128. *)

PROCEDURE [-] sub ( n1, n2 : INT128 ) : INT128;
(* Subtracts INT128 value n2 from n1 and returns the result.
   This function is bound to the - operator for type INT128. *)

PROCEDURE [*] multiply ( n1, n2 : INT128 ) : INT128;
(* Multiplies INT128 values n1 and n2 and returns the result.
   This function it bound to the * operator for type INT128. *)

PROCEDURE [DIV] divide ( n1, n2 : INT128 ) : INT128;
(* Divives INT128 value n1 by n2 and returns the result.
   This function is bound to the DIV operator for type INT128. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( n1, n2 : INT128 ) : BOOLEAN;
(* Returns TRUE if INT128 values n1 and n2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type INT128. *)

PROCEDURE [<] isLess ( n1, n2 : INT128 ) : BOOLEAN;
(* Returns TRUE if INT128 value n1 is less than n2, otherwise FALSE.
   This function is bound to operators < and >= for type INT128. *)

PROCEDURE [>] isGreater ( n1, n2 : INT128 ) : BOOLEAN;
(* Returns TRUE if INT128 value n1 is greater than n2, otherwise FALSE.
   This function is bound to operators > and <= for type INT128. *)


(* IO operations *)

PROCEDURE [READ] Read ( infile : File; VAR n : INT128 );
(* Reads the textual representation of an INT128 value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the numeral being read are
     removed from infile
   - the numeric value of the numeral string read is assigned to the variable
     passed in for n
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with an INT128 argument. *)

PROCEDURE [WRITE] Write ( outfile : File; n : INT128 );
(* Writes the textual representation of value n to stream outfile. This
   procedure is substituted for invocations of WRITE with an INT128 argument.*)

PROCEDURE [WRITEF] WriteF
  ( outfile      : File;
    CONST fmtStr : ARRAY OF CHAR;
    items        : VARIADIC OF INT128 );
(* Writes a formatted textual representation of one or more INT128 values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   INT128 arguments. *)

END INT128. (* one-twenty-eight *)