(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE LongRealIO;

(* I/O Module for Type LONGREAL *)

FROM FileIO IMPORT File;

(* EBNF of the textual representation of LONGREAL values:

    realValue :
        unpaddedRealValue | leftPaddedRealValue | rightPaddedRealValue ;
    leftPaddedRealValue : padding+ unPaddedRealValue ;
    rightPaddedRealValue : unPaddedRealValue padding+ ;
    unPaddedRealValue : simpleFormat | otherFormats ;
    otherFormats : sign? fillChar*
        ( fixedFmtNumeral | engFmtNumeral | expFmtNumeral ) suffix? ;
    simpleFormat : negativeSign? decimalDigit '.' decimalDigit+ exponent ;
    fixedFmtNumeral : integralPart decimalPoint fractionalPart ;
    engFmtNumeral : engIntegralPart decimalPoint fractionalPart engExponent ;
    expFmtNumeral : fixedFmtNumeral exponent ;
    padding : ' ' ;
    sign : " " | "+" | "-" ;
    negativeSign : "-" ;
    fillChar : " " | "*" | "0" ;
    integralPart :
        decimalDigit decimalDigit? decimalDigit? ( separator? digitGroup )* ;
    engIntegralPart :
        ( ( ( decimalDigit separator? )? decimalDigit )? decimalDigit )?
        decimalDigit ;
    fractionalPart :
        ( decimalDigit ( decimalDigit ( decimalDigit separator )? )? )*
        decimalDigit ;
    exponent : "E" ( "+" | "-" ) decimalDigit decimalDigit+ ;
    engExponent : exponent ;
    decimalPoint : "." | "," ;
    separator : " " | "." | "," ;
    digitGroup : decimalDigit decimalDigit decimalDigit ;
    decimalDigit  : "0" .. "9" ;
    suffix : "'" character* "'" ;

   Static semantics:

    decimalPoint and separator must never both use the same symbol
    the value represented by engExponent must always be divisible by three. *)

PROCEDURE Read ( infile : File; VAR n : LONGREAL );
(* Reads the textual representation of a LONGREAL value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the value being read are
     removed from infile
   - the textual representation of the value read is assigned to n
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with a LONGREAL argument.*)

PROCEDURE Write ( outfile : File; CONST n : LONGREAL );
(* Writes the value of LONGREAL n in simple format to stream outfile. This
   procedure is substituted for invocations of WRITE with a LONGREAL argument.*)

PROCEDURE WriteF ( outfile      : File;
                   CONST fmtStr : ARRAY OF CHAR;
                   items        : ARGLIST OF CONST LONGREAL );
(* Writes a formatted textual representation of one or more LONGREAL values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   LONGREAL arguments. *)

   (* for arrays of the type *)

PROCEDURE ReadArray ( infile : File; VAR value : ARRAY OF LONGREAL );
(* Calls Read repeatedly to read the textual representation of a sequence of
 LONGREAL values from stream infile into an array.
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with an ARRAY OF LONGREAL argument.*)


PROCEDURE WriteArray ( outfile : File; CONST value : ARRAY OF LONGREAL );
(* Calls Write repeatedly to write an array  of LONGREALin simple format to stream outfile.
  This procedure is substituted for invocations of WRITE with an ARRAY OF LONGREAL argument.*)

PROCEDURE [WRITEF] WriteArrayF
  ( outfile      : File;
    CONST fmtStr : ARRAY OF CHAR;
    items        : ARGLIST OF CONST ARRAY OF LONGREAL );
(* Writes a formatted textual representation of one or more ARRAY OF LONGREAL values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   ARRAY OF LONGREAL arguments. *)

END LongRealIO.