(* (C) 2016 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE FileDescIO;

(* Driver for File IO on File Descriptors *)

(* This module interprets the contents of files as a stream of octets  without
   any particular structure.  This is a low level API.  For common use,  it is
   recommended to use the channel based API of module FileIO instead. *)

IMPORT IOSIZE, IOStatus, FileMode;

(* File descriptor *)

CONST InvalidFile = -1;

TYPE File = INTEGER;

(* File Size and Postion *)

TYPE Size = ALIAS OF IOSIZE;

TYPE Pos = ALIAS OF Size;

(* Resource Allocation *)

PROCEDURE Open
  ( VAR fd         : File;
    CONST filename : ARRAY OF CHAR;
    mode           : FileMode;
    VAR status     : IOStatus );
(* Opens file <filename> in access mode <mode>.  On success, a file descriptor
   is passed back  in <fd>.  On failure, InvalidFile  is passed back  in <fd>.
   Sets the file position depending on <mode>.  The status of the operation is
   passed back in <status>. *)


(* Introspection *)

PROCEDURE modeOf ( fd : File ) : Mode;
(* Returns the access mode of <fd>. *)

PROCEDURE statusOf ( fd : File ) : IOStatus;
(* Returns the status of the most recent operation on <fd>. *)

PROCEDURE isValidFile ( fd : File ) : BOOLEAN;
(* Returns TRUE if <fd> is a valid file descriptor, otherwise FALSE. *)

PROCEDURE isSpecialFile ( fd : File ) : BOOLEAN;
(* Returns TRUE if <fd> is associated with a special file, otherwise FALSE. *)


(* I/O *)

PROCEDURE Read ( fd : File; VAR data : OCTET );
(* Reads an octet from <fd> and passes it back in <data>. *)

PROCEDURE ReadBlock
  ( fd : File; VAR data : ARRAY OF OCTET; octetsRead : IOSIZE );
(* Reads as many octets from <fd> as are available and fit into buffer <data>.
   Reading starts at the current position. The number of octets read is passed
   back in <octetsRead>.  The current position is advanced by <octetsRead>. *)

PROCEDURE ReadBlockAtOffset
  ( fd             : File;
    VAR data       : ARRAY OF OCTET;
    VAR octetsRead : IOSIZE;
    offset         : Pos );
(* Reads as many octets from <fd> as are available and fit into buffer <data>.
   Reading starts at position <offset>.  The number of  octets read  is passed
   back in <octetsRead>.  The current position is NOT advanced. *)

PROCEDURE Write ( fd : File; data : OCTET );
(* Writes the octet passed in <data> to <fd>. *)

PROCEDURE WriteBlock
  ( fd : File; CONST data : ARRAY OF OCTET; octetsWritten : IOSIZE );
(* Writes buffer <data> to <fd>.  Writing starts at the current position.  The
   number of  octets written  is passed back in <octetsWritten>.  The  current
   position is advanced by <octetsRead>. *)

PROCEDURE WriteBlockAtOffset
  ( fd             : File;
    data           : ARRAY OF OCTET;
    VAR octetsRead : IOSIZE;
    offset         : Pos );
(* Writes buffer <data>  to <fd>.  Writing  starts  at position <offset>.  The
   number of  octets written  is passed back in <octetsWritten>.  The  current
   position is NOT advanced. *)

PROCEDURE eof ( fd : File ) : BOOLEAN;
(* Returns TRUE if <fd> has reached the end of the file, otherwise FALSE. *)


(* Positioning *)

PROCEDURE SetPos ( fd : File; pos : Pos );
(* Sets the current position of <fd> to <pos>. *)

PROCEDURE Advance ( fd : File; offset : Pos );
(* Advances the current position of <fd> by <offset>. *)

PROCEDURE Rewind ( fd : File );
(* Sets the current position of <fd> to zero and resets its eof status. *)


(* Low-Level Positioning *)

TYPE RelPos = ALIAS OF LONGINT;

TYPE FromPosition = ( Start, Current, End );

PROCEDURE SetRelPos
  ( fd : File; from : FromPosition; offset : RelPos; VAR newPos : Pos );
(* Sets the current position of <fd> relative to <from> by <offset> and passes
   the resulting absolute position back in <newPos>. *)


(* Special File Descriptors *)

PROCEDURE defaultInFile : File;
(* Returns the file descriptor associated with the current process' stdin *)

PROCEDURE defaultOutFile : File;
(* Returns the file descriptor associated with the current process' stdout *)

PROCEDURE defaultErrFile : File;
(* Returns the file descriptor associated with the current process' stderr *)


(* Resource Deallocation *)

PROCEDURE Close ( VAR fd : File; VAR status : IOStatus );
(* Closes the file associated with <fd>, passes status back in <status>. *)

PROCEDURE CloseAll ( VAR status : IOStatus );
(* Closes all open file descriptors of the current process, except for those
   associated with stdin, stdout and stderr, passes status in <status>. *)

END FileDescIO.