(* (C) 2009-2016 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE UnicharBaseIO [ProtoIO] FOR UNICHAR;

(* IO Extension Library for Values of Type UNICHAR *)

IMPORT ChanIO;

(* EBNF of the textual representation of UNICHAR values:
    charValue : textFormat | numericFormat ;
    textFormat : letter | digit | nonAlphaChar ;
    numericFormat : "0u" ( base16Digit base16Digit )+ ;
    base16Digit : "0" .. "9" | "A" .. "F" ; *)

PROCEDURE [READ] Read ( inchan : ChanIO.Channel; VAR ch : UNICHAR );
(* Reads a UNICHAR value from channel inchan
   - any leading whitespace is skipped
   - the character being read is removed from inchan
   - the code point of the character value read is assigned to ch
   - the channel status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with a UNICHAR argument. *)

PROCEDURE [WRITE] Write ( outchan : ChanIO.Channel; ch : UNICHAR );
(* Writes the textual representation of UNICHAR ch to chanel outchan. This
   procedure is substituted for invocations of WRITE with a UNICHAR argument.*)

PROCEDURE [WRITEF] WriteF
  ( outchan      : ChanIO.Channel;
    CONST fmtStr : ARRAY OF CHAR;
    items        : ARGLIST >0 OF UNICHAR );
(* Writes a formatted textual representation of one or more UNICHAR values to
   output channel outchan. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   UNICHAR arguments. *)

END UnicharBaseIO.