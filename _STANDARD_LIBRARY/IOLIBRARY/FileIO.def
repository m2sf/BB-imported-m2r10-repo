(* (C) 2016 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE FileIO;

(* File Specific Channel Based IO *)

IMPORT ChanIO, FilePtrIO, IOSIZE, IOStatus, FileMode;


(* File Channel *)

TYPE File = POINTER TO Descriptor;

TYPE Descriptor = RECORD ( ChanIO.Descriptor )
[ ready = dataReady; Get = GetOctet; GetN = GetBlock; Ins = Insert;
  Put = PutOctet; PutN = PutBlock; Sync = SyncData; SetStat = SetStatus ]
* handle : FilePtrIO.File
END;


(* Inspection *)

PROCEDURE isFileChannel ( chan : ChanIO.Channel ) : BOOLEAN;
(* Returns TRUE if <chan> is a valid file channel, else FALSE. *)

PROCEDURE isValidFile ( file : File ) : BOOLEAN;
(* Returns TRUE if the file accessor of <file> is valid, else FALSE. *)

PROCEDURE isSpecialFile ( file : File ) : BOOLEAN;
(* Returns TRUE if <file> is associated with a special file, else FALSE. *)


(* Opening and Closing a File *)

(* Opening or reopening a file in a mode  whose append flag is not set  causes
   the file position  to be set  to the beginning of the file.  Opening or re-
   opening a file in a mode whose append flag is set  causes the file position
   to be set  to the end of the file.  An attempt to open a file that is a di-
   rectory fails with status code MayNotOpenDirectory. *)

CONST DefaultBufferSize = FilePtrIO.DefaultBufferSize;
(* The buffer size used when no buffer size is specified. *)

PROCEDURE Open
  ( NEW file       : File;
    CONST filename : ARRAY OF CHAR;
    mode           : FileMode;
    VAR status     : IOStatus );
(* Opens file <filename> in file mode <mode>.  On success, a  newly allocated
   and initialised file channel is passed back in <file>.  On failure, NIL is
   passed back in <file>.  A status code is passed back in <status>. *)

PROCEDURE OpenWithBuffer
  ( NEW file         : File;
    CONST filename   : ARRAY OF CHAR;
    mode             : FileMode;
    VAR buffer       : BARE ARRAY OF OCTET;
    VAR status       : IOStatus );
(* Opens file <filename>  in file mode <mode>  using <buffer> as a custom file
   buffer.   On success,  a newly allocated  and initialised  file channel  is
   passed back in <file>.  On failure, NIL is passed back in <file>.  A status
   code is passed back in <status>. *)

PROCEDURE ReOpen ( file : File; mode : FileMode );
(* Flushes <file> and changes its access mode to <mode>.
   The file position is set depending on <mode>. *)

PROCEDURE Close ( VAR file : File; VAR status : IOStatus );
(* Performs Flush on <file>,  closes  the associated file,  deallocates <file>
   and passes NIL back in <file>. A status code is passed back in <status>. *)


(* Status operations *)

PROCEDURE statusOf ( file : File ) : IOStatus;
(* Returns the status of the most recent operation for <file>. *)

PROCEDURE SetStatus
  ( chan : ChanIO.Channel; status : IOStatus; VAR valid : BOOLEAN );
(* Sets the status of <file> to <status>  if it meets the following condition:
   Where <status.code> is set to Success <status.failed> must be FALSE, other-
   wise TRUE.  Passes TRUE in <valid> if successful, otherwise FALSE. *)


(* Querying File Parameters *)

PROCEDURE modeOf ( file : File ) : FileMode;
(* Returns the access mode of <file>. *)

PROCEDURE nameLen ( file : File ) : CARDINAL;
(* Returns the length of the filename associated with <file>. *)

PROCEDURE GetName ( file : File; VAR filename : ARRAY OF CHAR );
(* Passes the name  of the file  associated with  file accessor <file> back in
   <filename>. If the name exceeds the capacity of <filename>, an empty string 
   is passed back in <filename>.  Does not alter the status of <file>. *)


(* File Positioning *)

TYPE Size = ALIAS OF FilePtrIO.Size;

TYPE Pos = ALIAS OF FilePtrIO.Pos;

PROCEDURE currentPos ( file : File ) : Pos;
(* Returns the current read/write position of <file>. *)

PROCEDURE isValidPos ( file : File; pos : Pos ) : BOOLEAN;
(* Returns TRUE if <pos> is a valid position for <file>, else FALSE. *)

PROCEDURE lastValidSetPos ( file : File ) : Pos;
(* Returns the most advanced position that may be passed to SetPos for <file>.
   The return value depends on the size and access mode of <file> as follows:
   
   (1) if <file> is in append mode, the function returns zero and sets the
       status of <file> to OperationNotSupported.
   (2) if <file> is empty, then TMIN(FilePos) is returned.
   (3) if <file> is not empty and has its write flag set, then the position
       of the last octet in <file> plus one is returned.
   (4) if <file> is not empty and has its read but not its write flag set,
       then the position of the last octet in <file> is returned. *)

PROCEDURE SetPos ( file : File; pos : Pos );
(* Sets the  read/write position of <chan> to <pos>. For any empty file, <pos>
   must be zero.  For any non-empty file in read mode, <pos> must be less than
   LastValidWritePos. For any non-empty file in write mode, <pos> must be less
   than or equal to LastValidWritePos. *)

PROCEDURE Advance ( file : File; offset : Pos );
(* Advances the read/write position of <file> by <offset>. *)

PROCEDURE Rewind ( file : File );
(* Sets the read/write position of <file> to the beginning of the file and re-
   sets its end-of-file status. *)

(* Any attempt to call  LastValidWritePos, SetPos, Advance or Rewind on a file
   channel whose access mode  has the append flag set  shall fail  with status
   OperationNotSupported.  Any attempt  to set  a file channel's read position
   past  the  end  of the file  shall fail  with  status AccessBeyondEOF.  Any
   attempt to set a file channel's write position past LastValidWritePos shall
   fail with status AccessBeyondEOF. *)


(* I/O operations *)

PROCEDURE eof ( file : File ) : BOOLEAN;
(* Returns TRUE if the end of <file> has been reached, otherwise FALSE. *)

PROCEDURE Read ( file : File; VAR data : OCTET );
(* Reads one octet of data  at the current position of <file>,  passes it back
   in <data> and advances the current read/write position of <file> by one. *)

PROCEDURE ReadBlock
  ( file : File; VAR data : ARRAY OF OCTET );
(* Reads a block of data  at the current position of <file>.  Passes the block
   of data  back in <data>.  The read/write position of <file>  is advanced by
   the number of octets read. *)

(* Any attempt  to read or lookahead read  from a file channel whose read flag
   is not set shall fail with status OperationNotSupported. *)

CONST
  InsertBufferSize = FilePtrIO.InsertBufferSize;

PROCEDURE Insert ( chan : ChanIO.Channel; data : OCTET );
(* Inserts octet <data> into input channel <chan>  to be read by the next read
   operation on <chan>.  Inserted octets are stored in a  FIFO buffer  of size
   InsertBufferSize.  The minimum size of the insert buffer is two octets. *)

(* Any attempt to perform the above I/O operations on any file whose Read flag
   is not set will fail with status NotOpenForReading. *)

PROCEDURE Write ( file : File; data : OCTET );
(* Performs a write or append operation depending on the access mode of <file>
   and advances the current read/write position by one after the data has been
   written. In write mode <data> is written to the current position of <file>.
   In append mode the procedure  atomically  sets the current read/write posi-
   tion to the end of the file and appends <data> to the end of <file>. *)

PROCEDURE WriteBlock
  ( file : File; data : BARE ARRAY OF OCTET; VAR octetsWritten : IOSIZE );
(* Performs a write or append operation depending on the access mode of <file>
   and passes the actual number of octets written in <octetsWritten>. The cur-
   rent read/write position is advanced accordingly. In write mode, the proce-
   dure writes <data> at the current read/write position of <chan>.  In append
   mode,  it atomically sets the current read/write position to the end of the
   file and appends <data> to the end of <file>. *)

PROCEDURE Flush ( file : File );
(* Writes unwritten data in any buffer of <chan> to its associated file. *)

(* Any attempt  to write to  or flush a file whose Write flag is not set shall
   fail with status NotOpenForWriting. *)


(* Channel Method Implementations *)

PROCEDURE dataReady
  ( chan : ChanIO.Channel; octets : IOSIZE; VAR status : IOStatus ) : BOOLEAN;
(* Returns TRUE if <chan> has at least <octets> number of octets available for
   reading, otherwise FALSE. *)

PROCEDURE GetOctet
  ( chan : ChanIO.Channel; VAR data : OCTET; VAR status : IOStatus );
(* Channel method implementation corresponding to Read(). *)

PROCEDURE GetBlock
  ( chan : ChanIO.Channel; VAR data : ARRAY OF OCTET; VAR status : IOStatus );
(* Channel method implementation corresponding to ReadBlock(). *)

PROCEDURE PutOctet
  ( chan : ChanIO.Channel; data : OCTET; VAR status : IOStatus );
(* Channel method implementation corresponding to Write(). *)

PROCEDURE PutBlock
  ( chan              : ChanIO.Channel;
    data              : ARRAY OF OCTET;
    VAR octetsWritten : IOSIZE;
    VAR status        : IOStatus );
(* Channel method implementation corresponding to WriteBlock(). *)

PROCEDURE SyncData ( chan : ChanIO.Channel; VAR status : IOStatus );
(* Channel method implementation corresponding to Flush(). *)

END FileIO.