(* (C) 2009-2016 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE FilePtrIO;

(* Driver for File IO on File Pointers *)

(* This module interprets the contents of files as a stream of octets  without
   any particular structure.  This is a low level API.  For common use,  it is
   recommended to use the channel based API of module FileIO instead. *)

IMPORT IOSIZE, IOStatus, FileMode;

(* File accessor and file status *)

TYPE File = OPAQUE; (* implementation defined file accessor *)
    
(* Any attempt to pass an invalid file accessor to a file operation other
   than opening a file shall raise runtime fault InvalidAccessor. *)


(* File Size and Postion *)

TYPE Size = ALIAS OF IOSIZE;

TYPE Pos = ALIAS OF Size;


(* Introspection *)

CONST DefaultBufferSize = <implementation defined value>;

PROCEDURE isValidAccessor ( file : File ) : BOOLEAN;
(* Returns TRUE if <file> is a valid file accessor, otherwise FALSE. *)

PROCEDURE isSpecialFile ( file : File ) : BOOLEAN;
(* Returns TRUE if file is associated with a special file, otherwise FALSE. *)

PROCEDURE isValidPos ( file : File; pos : Pos ) : BOOLEAN;
(* Returns TRUE if <pos> is a valid file position for <file>,
   otherwise FALSE. *)


(* Opening files *)

PROCEDURE Open
  ( NEW file       : File;
    CONST filename : ARRAY OF CHAR;
    mode           : FileMode;
    VAR status     : IOStatus );
(* Opens the file <filename> in file mode <mode>.  If sucessful passes a file
   accessor back in <file>,  otherwise passes NIL back in <file>.  Sets the
   file position depending on <mode>.  The status of the operation is passed
   back in <status>. *)

PROCEDURE OpenWithBuffer
  ( NEW file         : File;
    CONST filename   : ARRAY OF CHAR;
    mode             : FileMode;
    VAR buffer       : ARRAY OF OCTET;
    VAR status       : IOStatus );
(* Opens the file <filename> in file mode <mode> using <buffer> as a custom
   file buffer.  If successful passes a file accessor back in <file>,  other-
   wise passes NIL back in <file>.  Sets the file position depending on <mode>.
   The status is passed back in <status>. *)

PROCEDURE ReOpen ( file : File; mode : FileMode );
(* Flushes the file associated with file accessor <file> and changes its mode
   to <mode>. Sets the file position depending on <mode>. *)

(* Opening or reopening a file in a mode whose append flag is not set causes
   the file position to be set to the beginning of the file.  Opening or re-
   opening a file in a mode whose append flag is set causes the file position
   to be set to the end of the file.  An attempt to open a file that is a di-
   rectory fails with status code mayNotOpenDirectory. *)


(* Querying File Mode, Status and Filename *)

PROCEDURE modeOf ( file : File ) : FileMode;
(* Returns the file mode of file accessor <file>. *)

PROCEDURE statusOf ( file : File ) : IOStatus;
(* Returns the status of the most recent operation for <file>. *)

PROCEDURE nameLen ( file : File ) : CARDINAL;
(* Returns the length of the filename associated with <file>. *)

PROCEDURE GetName ( file : File; VAR filename : ARRAY OF CHAR );
(* Passes the name  of the file  associated with  file accessor <file> back in
   <filename>.  If the name  exceeds the capacity  of the filename array,  the 
   operation fails  with status NameTooLong,  passing an empty string  back in
   <filename>. *)


(* File position operations *)

PROCEDURE eof ( file : File ) : BOOLEAN;
(* Returns TRUE if the end of the file associated with file accessor <file>
   has been reached, otherwise FALSE. *)

PROCEDURE currentPos ( file : File ) : FilePos;
(* Returns the current read/write position for file accessor <file> where a
   value of TMIN(FilePos) represents the beginning of a file. *)

PROCEDURE lastValidSetPos ( file : File ) : FilePos;
(* Returns the most advanced position that may be passed to SetPos for file
   accessor <file>.  The return value depends on length and mode of <file>
   
   (1) if <file> is in append mode, the function returns zero and sets the
       file's status to OperationNotSupported.
   (2) if <file> is empty, then TMIN(FilePos) is returned.
   (3) if <file> is not empty and has its write flag set, then the position
       of the last octet in <file> plus one is returned.
   (4) if <file> is not empty and has its read but not its write flag set,
       then the position of the last octet in <file> is returned. *) 

PROCEDURE SetPos ( file : File; pos : Pos );
(* Sets the  read/write position  for  file accessor <file>  to <pos>.  For
   any empty file, <pos> must be zero. For any non-empty file in read mode,
   <pos> must be  less than  LastValidWritePos.  For any  non-empty file in
   write mode, <pos> must be  less than or equal  to LastValidWritePos. *)

PROCEDURE Advance ( file : File; offset : Pos );
(* Advances the read/write position for file accessor <file> by <offset>. *)

PROCEDURE Rewind ( file : File );
(* Sets the read/write position for file accessor <file>  to the  beginning
   of the file and resets its end-of-file status. *)

(* Any attempt to call  LastValidWritePos, SetPos, Advance or Rewind  on  a
   file accessor  whose file mode  has the append flag set  shall fail with
   status OperationNotSupported.  Any attempt to set a file's read position
   past the end of the file  shall fail  with status  AccessBeyondEOF.  Any
   attempt to set a file's write position past LastValidWritePos shall fail
   with status AccessBeyondEOF. *)


(* Read and write operations *)

PROCEDURE Read ( file : File; VAR data : OCTET );
(* Reads one octet of data at the current position of <file>, passes it back
   in <data> and advances the read/write position of <file> by one. *)

PROCEDURE Lookahead ( file : File; VAR data : OCTET );
(* Reads the first lookahead octet of <file>, passes it back in <data>, but
   does NOT advance the read/write position of <file>.  If the lookahead
   octet lies beyond the end of the file then no data is passed back and
   the file status is set to AccessBeyondEOF. *)

PROCEDURE LA2 ( file : File; VAR data : OCTET );
(* Reads the second lookahead octet of <file>, passes it back in <data>, but
   does NOT advance the read/write position of <file>.  If the second look-
   ahead octet lies beyond the end of the file then no data is passed back
   and the file status is set to AccessBeyondEOF. *)

PROCEDURE ReadBlock
  ( file           : File;
    VAR data       : ARRAY OF OCTET;
    VAR octetsRead : IOSIZE );
(* Reads a block of data at the current position of <file>. Passes the block
   of data back in <data> and the number of octets read in <octetsRead>.
   The read/write position of <file> is advanced accordingly. *)

(* Any attempt to read or lookahead read from a file whose read flag is not
   set shall fail with status OperationNotSupported. *)


PROCEDURE Write ( file : File; data : OCTET );
(* Performs a write or append operation depending on the mode of <file>.
   In write mode, the procedure writes one octet in <data> to the current
   position of <file>. In append mode, the procedure atomically sets the
   current read/write position of <file> to the end of the file and appends
   one octet in <data> to the end of the file. In either mode, the current
   read/write position of <file> is advanced by one after the data has been
   written. *)

PROCEDURE WriteBlock
  ( file              : File;
    data              : ARRAY OF OCTET;
    VAR octetsWritten : IOSIZE );
(* Performs a write or append operation depending on the mode of <file>.
   In write mode, the procedure writes the block of data passed in <data>
   starting at the current read/write position of <file>. In append mode, the
   procedure atomically sets the current read/write position of <file> to the
   end of the file and appends the block of data passed in <data> to the end
   of the file. In either mode, the current read/write position of <file> is
   advanced by the number of octets written and the number of octets written
   is passed back in <octetsWritten> after the data has been written. *)

PROCEDURE Flush ( file : File );
(* Writes unwritten data in any buffer of <file> to its associated file. *)

(* Any attempt to write to or flush a file whose write flag is not set shall
   fail with status operationNotSupported. *)


(* Closing files *)

PROCEDURE Close ( VAR file : File; VAR status : IOStatus );
(* Performs Flush on <file>, closes the associated file and passes NIL back
   in <file>.  The status of the operation is passed back  in <status>. *)


(* Implementation defined accessors to special files *)

(* Special files  are automatically opened when module FileIO is initialised.
   The file mode of a special file is either read  or write.   EOF always re-
   turns FALSE and CurrentPos always returns TMIN(FilePos) for special files.
   Any attempt to open a special file will fail with status alreadyOpen.  Any
   attempt to call ReOpen, NameLen, GetName, LastValidSetPos, SetPos, Rewind,
   Advance, Lookahead, LA2, ReadBlock, Flush or Close  will fail with  status
   operationNotSupported.  NameLen  and LastValidSetPos will return zero  and
   GetName will pass an empty string. *)

PROCEDURE defaultInFile : File;
(* Returns a file accessor associated with stdin. *)

PROCEDURE defaultOutFile : File;
(* Returns a file accessor associated with stdout. *)

PROCEDURE defaultErrFile : File;
(* Returns a file accessor associated with stderr. *)

PROCEDURE defaultNullFile : File;
(* Returns the file accessor associated with the null device, open in write
   mode.  Write operations on this file have no effect. *)

END FilePtrIO.