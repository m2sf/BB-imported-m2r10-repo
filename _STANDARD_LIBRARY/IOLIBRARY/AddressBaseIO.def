(* (C) 2009-2016 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE AddressBaseIO [ProtoIO] FOR ADDRESS;

(* Channel IO Extension Library for Values of Type ADDRESS *)

IMPORT ChanIO;

(* EBNF of the textual representation of ADDRESS values:
    addressValue :
       digitGroup digitGroup ( groupSeparator? digitGroup digitGroup )* ;
    digitGroup : base16Digit base16Digit ;
    base16Digit : "0" .. "9" | "A" .. "F" ;
    groupSeparator : " " | "." | ":" ;
    
    static semantics:
    
    ADDRESS values are always left padded with zeroes to the length
    required to represent the maximum value of type ADDRESS. *)

PROCEDURE [READ] Read ( inchan : ChanIO.Channel; VAR adr : ADDRESS );
(* Reads the textual representation of an ADDRESS value from channel inchan
   - any leading whitespace is skipped
   - any remaining characters that are part of the value being read are
     removed from inchan
   - the textual representation of the value read is assigned to adr
   - the channel status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with an ADDRESS argument.*)

PROCEDURE [WRITE] Write ( outchan : ChanIO.Channel; adr : ADDRESS );
(* Writes the value of ADDRESS adr in standard format to channel outchan. This
   procedure is substituted for invocations of WRITE with an ADDRESS argument.*)

PROCEDURE [WRITE] WriteF
  ( outchan      : ChanIO.Channel;
    CONST fmtStr : ARRAY OF CHAR;
    items        : ARGLIST >0 OF ADDRESS );
(* Writes a formatted textual representation of one or more ADDRESS values to
   output channel outchan. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   ADDRESS arguments. *)


END AddressBaseIO.