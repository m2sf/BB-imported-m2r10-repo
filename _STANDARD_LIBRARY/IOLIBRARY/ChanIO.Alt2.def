(* (C) 2016 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE ChanIO;

(* Channel Based IO *)

IMPORT IOStatus, IOSIZE;

(* Channel Root Type *)

TYPE Channel = POINTER TO Descriptor;

(* Channel Root Descriptor *)

TYPE Descriptor = RECORD ( NIL )
  op : Operations
END;

(* Channel Operations Vector *)

TYPE Operations = POINTER TO OpDescriptor;

(* Channel Operations Descriptor *)

TYPE OpDescriptor = RECORD ( NIL )
  (* method slots for status handling *)
  statusOf   : PROCEDURE ( Channel ) : IOStatus;
  StatusMsg  : PROCEDURE ( Channel, IOStatus );
  SetStatus  : PROCEDURE ( Channel, IOStatus, BOOLEAN );
  (* method slots for parameter query *)
  modeOf     : PROCEDURE ( Channel ) : FileMode;
  nameLen    : PROCEDURE ( Channel ) : LONGCARD;
  GetName    : PROCEDURE ( Channel, VAR ARRAY OF CHAR );
  (* method slots for generic input *)
  dataReady  : PROCEDURE ( Channel, IOSIZE ) : BOOLEAN;
  ReadOctet  : PROCEDURE ( Channel, VAR OCTET );
  ReadBlock  : PROCEDURE ( Channel, VAR ARRAY OF OCTET );
  Insert     : PROCEDURE ( Channel, OCTET );
  (* method slots for generic output *)
  WriteOctet : PROCEDURE ( Channel, OCTET );
  WriteBlock : PROCEDURE ( Channel, ARRAY OF OCTET, VAR IOSIZE );
  isBuffered : PROCEDURE ( Channel ) : BOOLEAN;
  Flush      : PROCEDURE ( Channel );
END;

(* Generic Channel Operations *)

(* Procedures invoke the respective method slot of their first argument. *)

PROCEDURE statusOf ( chan : Channel ) : IOStatus;
(* Returns the status of the most recent operation on <chan>. *)

PROCEDURE StatusMsg ( chan : Channel; status : IOStatus );
(* Writes a status message for <status> to <chan>. *)

PROCEDURE SetStatus
  ( chan : Channel; status : IOStatus; VAR valid : BOOLEAN );
(* Sets  the status of <chan> to <status> if it meets the following condition:
   Where <status.code> is Success,  <status.failed> must be FALSE,  else TRUE.
   If the condition is met, TRUE is passed back in <valid>, else FALSE. *)

PROCEDURE modeOf ( chan : Channel ) : FileMode;
(* Returns the mode of <chan>. *)

PROCEDURE nameLen ( chan : Channel ) : LONGCARD;
(* Returns the length of the name of <chan>. *)

PROCEDURE GetName ( chan : Channel; VAR name : ARRAY OF CHAR );
(* Passes the name of <chan> back in <name>  or empty string if the length of
   the name exceeds the capacity of <name>.  Does not alter status. *)

PROCEDURE dataReady ( chan : Channel; octets : IOSIZE ) : BOOLEAN;
(* Returns TRUE if <chan> has at least <octets> number of octets available for
   reading, otherwise FALSE. *)

PROCEDURE ReadOctet ( chan : Channel; VAR data : OCTET );
(* Reads one octet from <chan> and passes it back in <data>. *)

PROCEDURE ReadBlock ( chan : Channel; VAR data : ARRAY OF OCTET );
(* Reads a block of data up to the capacity of <data>  from <chan>  and passes
   it back in <data>. *)

PROCEDURE Insert ( chan : Channel; data : OCTET );
(* Inserts <data> into <chan> to be read by the next read operation. *)

PROCEDURE WriteOctet ( chan : Channel; data : OCTET );
(* Writes the octet passed in <data> to <chan>. *)

PROCEDURE WriteBlock
  ( chan : Channel; data : ARRAY OF OCTET; VAR written : IOSIZE );
(* Writes a block of data passed in <data> to <chan> and passes the number of
   octets written back in <written>. *)

PROCEDURE isBuffered ( chan : Channel ) : BOOLEAN;
(* Returns TRUE if <chan> is buffered, otherwise FALSE. *)

PROCEDURE Flush ( chan : Channel );
(* If <chan> is buffered, writes any unwritten buffer data to <chan>. *)

END ChanIO.