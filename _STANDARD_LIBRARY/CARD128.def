(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE CARD128 [ProtoCardinal];

(* 128-bit Unsigned Integer Numbers *) 


FROM FileIO IMPORT File; (* required for IO *)


(* CARD128 type *)

TYPE
    CARD128 = OPAQUE RECORD
        value : ARRAY 16 OF OCTET; (* 128 bits *)
    END; (* CARD128 *)


(* Bindings required by blueprint ProtoCardinal *)

(* Number representation parameters *)

CONST [#^] base = 2;

CONST [.#] precision = 128; (* base-2 digits *)

CONST [-^] eMin = 0;

CONST [+^] eMax = 0;


(* Range *) 

(* TMIN(CARD128) = 0 *)

PROCEDURE [TMIN] minValue : CARD128;
(* returns the smallest possible value of type CARD128.
   This function is bound to pervasive function TMAX for type CARD128. *)

(* TMAX(CARD128) = 340'282'366'920'938'463'463'374'607'431'768'211'455 *)

PROCEDURE [TMAX] maxValue : CARD128;
(* returns the largest possible value of type CARD128.
   This function is bound to pervasive function TMAX for type CARD128. *)


(* Type conversions *)

PROCEDURE [::] toCARD  ( n : CARD128 ) : CARDINAL;
(* Converts CARD128 value n to a CARDINAL value and returns it. This
   function is bound to the :: operator for CARD128 to CARDINAL conversion.*)

PROCEDURE [::] toINT ( n : CARD128 ) : INTEGER; 
(* Converts CARD128 value n to an INTEGER value and returns it. This
   function is bound to the :: operator for CARD128 to INTEGER conversion. *)

PROCEDURE [::] fromCARD  ( n : CARDINAL ) : CARD128;
(* Converts CARDINAL value n to a CARD128 value and returns it. This function
   is bound to the :: operator for CARDINAL to CARD128 conversion. *)

PROCEDURE [::] fromINT  ( n : INTEGER ) : CARD128;
(* Converts INTEGER value n to a CARD128 value and returns it. This function
   is bound to the :: operator for INTEGER to CARD128 conversion. *)


(* Scalar conversion primitives *)

PROCEDURE [SXF] toSXF ( n : CARD128; VAR s : ARRAY OF OCTET );
(* Converts CARD128 value n to a string in scalar exchange format.
   This procedure is bound to pervasive primitive SXF for type CARD128. *)

PROCEDURE [VAL] fromSXF ( CONST s : ARRAY OF OCTET; VAR n : CARD128 );
(* Converts a string in scalar exchange format to a CARD128 value.
   This procedure is bound to pervasive primitive VAL for type CARD128. *)


(* Monadic arithmetic operations *) 

PROCEDURE [ABS] abs ( n : CARD128 ) : CARD128;
(* Returns the absolute value of CARD128 value n.
   This function is bound to pervasive function ABS for type CARD128. *)

PROCEDURE [ODD] odd ( n : CARD128 ) : BOOLEAN;
(* Returns TRUE if CARD128 value n is odd, otherwise FALSE.
   This function is bound to pervasive function ODD for type CARD128. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( n1, n2 : CARD128 ) : CARD128;
(* Adds CARD128 values n1 and n2 and returns the result.
   This function is bound to the + operator for type CARD128. *)

PROCEDURE [-] sub ( n1, n2 : CARD128 ) : CARD128;
(* Subtracts CARD128 value n2 from n1 and returns the result.
   This function is bound to the - operator for type CARD128. *)

PROCEDURE [*] multiply ( n1, n2 : CARD128 ) : CARD128;
(* Multiplies CARD128 values n1 and n2 and returns the result.
   This function it bound to the * operator for type CARD128. *)

PROCEDURE [DIV] divide ( n1, n2 : CARD128 ) : CARD128;
(* Divives CARD128 value n1 by n2 and returns the result.
   This function is bound to the DIV operator for type CARD128. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( n1, n2 : CARD128 ) : BOOLEAN;
(* Returns TRUE if CARD128 values n1 and n2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type CARD128. *)

PROCEDURE [<] isLess ( n1, n2 : CARD128 ) : BOOLEAN;
(* Returns TRUE if CARD128 value n1 is less than n2, otherwise FALSE.
   This function is bound to operators < and >= for type CARD128. *)

PROCEDURE [>] isGreater ( n1, n2 : CARD128 ) : BOOLEAN;
(* Returns TRUE if CARD128 value n1 is greater than n2, otherwise FALSE.
   This function is bound to operators > and <= for type CARD128. *)


(* IO operations *)

PROCEDURE [READ] Read( infile : File; VAR n : CARD128 );
(* Reads the textual representation of a CARD128 value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the numeral being read are
     removed from infile
   - the numeric value of the numeral string read is assigned to the variable
     passed in for n
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with a CARD128 argument. *)

PROCEDURE [WRITE] Write( outfile : File; CONST n : CARD128 );
(* Writes the textual representation of value n to stream outfile. This
   procedure is substituted for invocations of WRITE with a CARD128 argument.*)

PROCEDURE [WRITEF] WriteF
  ( outfile      : File;
    CONST fmtStr : ARRAY OF CHAR;
    items        : VARIADIC OF CARD128 );
(* Writes a formatted textual representation of one or more BYTE values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   CARD128 arguments. *)

END CARD128. (* one-twenty-eight *)