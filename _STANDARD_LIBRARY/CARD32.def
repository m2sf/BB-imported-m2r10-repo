(* (C) 2009-2012 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE CARD32 [UZTYPE];

(* 32-bit Unsigned Integer Numbers *) 


FROM FileIO IMPORT File; (* required for IO *)


(* CARD32 type *)

TYPE
    CARD32 = OPAQUE RECORD
        value : ARRAY 4 OF OCTET; (* 32 bits *)
    END; (* CARD32 *)


(* UZ-Type bindings to operators, pervasives and primitives: *)

(* Precision *)

CONST [MDE] maxDigitsOfExponent = 0;
(* maximum number of decimal digits of the exponent of a CARD32 value *)

CONST [MDS] maxDigitsOfSignificand = 10;
(* maximum number of decimal digits of the significand of a CARD32 value *)


(* Range *) 

(* TMIN(CARD32) = 0 *)

PROCEDURE [TMIN] minValue : CARD32;
(* returns the smallest possible value of type CARD32.
   This function is bound to pervasive function TMAX for type CARD32. *)

(* TMAX(CARD32) = 4,294,967,295 *)

PROCEDURE [TMAX] maxValue : CARD32;
(* returns the largest possible value of type CARD32.
   This function is bound to pervasive function TMAX for type CARD32. *)


(* Type conversions *)

PROCEDURE [::] toCARD  ( n : CARD32 ) : CARDINAL;
(* Converts CARD32 value n to a CARDINAL value and returns it. This
   function is bound to the :: operator for CARD32 to CARDINAL conversion.*)

PROCEDURE [::] toINT ( n : CARD32 ) : INTEGER; 
(* Converts CARD32 value n to an INTEGER value and returns it. This
   function is bound to the :: operator for CARD32 to INTEGER conversion. *)

PROCEDURE [::] fromCARD  ( n : CARDINAL ) : CARD32;
(* Converts CARDINAL value n to a CARD32 value and returns it. This function
   is bound to the :: operator for CARDINAL to CARD32 conversion. *)

PROCEDURE [::] fromINT  ( n : INTEGER ) : CARD32;
(* Converts INTEGER value n to a CARD32 value and returns it. This function
   is bound to the :: operator for INTEGER to CARD32 conversion. *)


(* Indirect conversions via scalar exchange format *)

PROCEDURE [SXF] toSXF ( n : CARD32; VAR s : ARRAY OF OCTET );
(* Converts CARD32 value n to a string in scalar exchange format.
   This procedure is bound to pervasive primitive SXF for type CARD32. *)

PROCEDURE [VAL] fromSXF ( CONST s : ARRAY OF OCTET; VAR n : CARD32 );
(* Converts a string in scalar exchange format to a CARD32 value.
   This procedure is bound to pervasive primitive VAL for type CARD32. *)


(* Monadic arithmetic operations *) 

PROCEDURE [ABS] abs ( n : CARD32 ) : CARD32;
(* Returns the absolute value of CARD32 value n.
   This function is bound to pervasive function ABS for type CARD32. *)

PROCEDURE [ODD] odd ( n : CARD32 ) : BOOLEAN;
(* Returns TRUE if CARD32 value n is odd, otherwise FALSE.
   This function is bound to pervasive function ODD for type CARD32. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( n1, n2 : CARD32 ) : CARD32;
(* Adds CARD32 values n1 and n2 and returns the result.
   This function is bound to the + operator for type CARD32. *)

PROCEDURE [-] sub ( n1, n2 : CARD32 ) : CARD32;
(* Subtracts CARD32 value n2 from n1 and returns the result.
   This function is bound to the - operator for type CARD32. *)

PROCEDURE [*] multiply ( n1, n2 : CARD32 ) : CARD32;
(* Multiplies CARD32 values n1 and n2 and returns the result.
   This function it bound to the * operator for type CARD32. *)

PROCEDURE [DIV] divide ( n1, n2 : CARD32 ) : CARD32;
(* Divives CARD32 value n1 by n2 and returns the result.
   This function is bound to the DIV operator for type CARD32. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( n1, n2 : CARD32 ) : BOOLEAN;
(* Returns TRUE if CARD32 values n1 and n2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type CARD32. *)

PROCEDURE [<] isLess ( n1, n2 : CARD32 ) : BOOLEAN;
(* Returns TRUE if CARD32 value n1 is less than n2, otherwise FALSE.
   This function is bound to operators < and >= for type CARD32. *)

PROCEDURE [>] isGreater ( n1, n2 : CARD32 ) : BOOLEAN;
(* Returns TRUE if CARD32 value n1 is greater than n2, otherwise FALSE.
   This function is bound to operators > and <= for type CARD32. *)


(* IO operations *)

PROCEDURE Read( infile : File; VAR n : CARD32 );
(* Reads the textual representation of a CARD32 value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the numeral being read are
     removed from infile
   - the numeric value of the numeral string read is assigned to the variable
     passed in for n
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with a CARD32 argument. *)

PROCEDURE Write( outfile : File; n : CARD32 );
(* Writes the textual representation of value n to stream outfile. This
   procedure is substituted for invocations of WRITE with a CARD32 argument.*)

PROCEDURE WriteF ( outfile      : File;
                   CONST fmtStr : ARRAY OF CHAR;
                   items        : VARIADIC OF CARD32 );
(* Writes a formatted textual representation of one or more CARD32 values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   CARD32 arguments. *)

END CARD32. (* thirty-two *)