(* (C) 2009-2012 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE INT16 [ZTYPE];

(* 16-bit Integer Numbers *) 


FROM FileIO IMPORT File; (* required for IO *)


(* INT16 type *)

TYPE
    INT16 = OPAQUE RECORD
        value : ARRAY 2 OF OCTET; (* 16 bits *)
    END; (* INT16 *)


(* Z-Type bindings to operators, pervasives and primitives: *)

(* Precision *)

CONST [TEXP] maxExponentDigits = 0;
(* maximum number of decimal digits of the exponent of a INT16 value *)

CONST [TSIG] maxSignificandDigits = 5;
(* maximum number of decimal digits of the significand of a INT16 value *)


(* Range *) 

(* TMIN(INT16) = -32768 *)

PROCEDURE [TMIN] minValue : INT16;
(* returns the smallest possible value of type INT16.
   This function is bound to pervasive function TMAX for type INT16. *)

(* TMAX(INT16) = 32767 *)

PROCEDURE [TMAX] maxValue : INT16;
(* returns the largest possible value of type INT16.
   This function is bound to pervasive function TMAX for type INT16. *)


(* Type conversions *)

PROCEDURE [::] toCARD  ( n : INT16 ) : CARDINAL;
(* Converts INT16 value n to a CARDINAL value and returns it. This
   function is bound to the :: operator for INT16 to CARDINAL conversion. *)

PROCEDURE [::] toINT ( n : INT16 ) : INTEGER; 
(* Converts INT16 value n to an INTEGER value and returns it. This
   function is bound to the :: operator for INT16 to INTEGER conversion. *)

PROCEDURE [::] fromCARD  ( n : CARDINAL ) : INT16;
(* Converts CARDINAL value n to an INT16 value and returns it. This function
   is bound to the :: operator for CARDINAL to INT16 conversion. *)

PROCEDURE [::] fromINT  ( n : INTEGER ) : INT16;
(* Converts INTEGER value n to an INT16 value and returns it. This function
   is bound to the :: operator for INTEGER to INT16 conversion. *)


(* Scalar conversion primitives *)

PROCEDURE [SXF] toSXF ( n : INT16; VAR s : ARRAY OF OCTET );
(* Converts INT16 value n to a string in scalar exchange format.
   This procedure is bound to pervasive primitive SXF for type INT16. *)

PROCEDURE [VAL] fromSXF ( CONST s : ARRAY OF OCTET; VAR n : INT16 );
(* Converts a string in scalar exchange format to an INT16 value.
   This procedure is bound to pervasive primitive VAL for type INT16. *)


(* Monadic arithmetic operations *) 

PROCEDURE [ABS] abs ( n : INT16 ) : INT16;
(* Returns the absolute value of INT16 value n.
   This function is bound to pervasive function ABS for type INT16. *)

PROCEDURE [NEG] neg ( n : INT16 ) : INT16;
(* Returns the sign reversed value of INT16 value n.
   This function is bound to the unary minus operator for type INT16. *)

PROCEDURE [ODD] odd ( n : INT16 ) : BOOLEAN;
(* Returns TRUE if INT16 value n is odd, otherwise FALSE.
   This function is bound to pervasive function ODD for type INT16. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( n1, n2 : INT16 ) : INT16;
(* Adds INT16 values n1 and n2 and returns the result.
   This function is bound to the + operator for type INT16. *)

PROCEDURE [-] sub ( n1, n2 : INT16 ) : INT16;
(* Subtracts INT16 value n2 from n1 and returns the result.
   This function is bound to the - operator for type INT16. *)

PROCEDURE [*] multiply ( n1, n2 : INT16 ) : INT16;
(* Multiplies INT16 values n1 and n2 and returns the result.
   This function it bound to the * operator for type INT16. *)

PROCEDURE [DIV] divide ( n1, n2 : INT16 ) : INT16;
(* Divives INT16 value n1 by n2 and returns the result.
   This function is bound to the DIV operator for type INT16. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( n1, n2 : INT16 ) : BOOLEAN;
(* Returns TRUE if INT16 values n1 and n2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type INT16. *)

PROCEDURE [<] isLess ( n1, n2 : INT16 ) : BOOLEAN;
(* Returns TRUE if INT16 value n1 is less than n2, otherwise FALSE.
   This function is bound to operators < and >= for type INT16. *)

PROCEDURE [>] isGreater ( n1, n2 : INT16 ) : BOOLEAN;
(* Returns TRUE if INT16 value n1 is greater than n2, otherwise FALSE.
   This function is bound to operators > and <= for type INT16. *)


(* IO operations *)

PROCEDURE Read( infile : File; VAR n : INT16 );
(* Reads the textual representation of an INT16 value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the numeral being read are
     removed from infile
   - the numeric value of the numeral string read is assigned to the variable
     passed in for n
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with an INT16 argument. *)

PROCEDURE Write( outfile : File; n : INT16 );
(* Writes the textual representation of value n to stream outfile. This
   procedure is substituted for invocations of WRITE with an INT16 argument.*)

PROCEDURE WriteF ( outfile      : File;
                   CONST fmtStr : ARRAY OF CHAR;
                   items        : VARIADIC OF INT16 );
(* Writes a formatted textual representation of one or more INT16 values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   INT16 arguments. *)

END INT16. (* sixteen *)