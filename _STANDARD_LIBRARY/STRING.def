(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE STRING [ProtoString];

(* Dynamic ASCII Strings *)


FROM FileIO IMPORT File; (* required for IO *)


(* STRING type *)

TYPE STRING = OPAQUE;


(* bindings to operators and pervasives *)


(* capacity limit *)

PROCEDURE [TLIMIT] capacityLimit : LONGCARD;
(* Returns the character capacity limit of type STRING.
   This procedure is bound to pervasive procedure TLIMIT for type STRING. *)


(* allocator *)

PROCEDURE [NEW] new ( VAR s : STRING );
(* Allocates a new object of type STRING and returns a pointer to it in s.
   This procedure is bound to pervasive procedure NEW for type STRING. *)

(* retain reference *)

PROCEDURE [RETAIN] retain ( VAR s : STRING );
(* Retains the reference to STRING s.
   This procedure is bound to pervasive procedure RETAIN for type STRING. *)

(* release reference *)

PROCEDURE [RELEASE] release ( VAR s : STRING );
(* Releases the reference to STRING s.  Passes NIL in s if deallocated.
   This procedure is bound to pervasive procedure RELEASE for type STRING. *)


(* accessor *)

PROCEDURE [RETRIEVE] characterAtIndex ( s : STRING; index : LONGCARD ) : CHAR;
(* Returns the character at the specified index in STRING s. This function
   is bound to the array operator [ ] for rvalues of type STRING. *)


(* mutators *)

PROCEDURE [STORE] replaceCharAtIndex ( s : STRING; index : LONGCARD; ch : CHAR );
(* Replaces the character at the specified index in STRING s with ch. This
   procedure is bound to the array operator [ ] for lvalues of type STRING. *)

PROCEDURE insertCharsAtIndex ( s : STRING; index : LONGCARD;
                               characters : ARRAY OF CHAR );
(* Inserts a character sequence into STRING s at the specified index. *)

PROCEDURE removeCharsAtIndex ( s : STRING; index, n : LONGCARD);
(* Removes n characters from STRING s at the specified index. *)


(* length *)

PROCEDURE [LENGTH] length ( s : STRING ) : LONGCARD;
(* Returns the length of string s.
   This function is bound to pervasive function LENGTH for type STRING. *)


(* literal assignment *)

PROCEDURE [:=] assign ( VAR s : STRING; literal : ARRAY OF CHAR );
(* Converts string literal to a STRING value and assigns it to s.
   This procedure is bound to the := operator for literal assignment. *)


(* concatenation *)

PROCEDURE [CONCAT] concat
  ( args : VARIADIC OF { literal : ARRAY OF CHAR; str : STRING } ) : STRING;
(* Concatenates all strings in the argument list returns the result in a
   newly allocated string. The function is bound to CONCAT for type STRING. *)


(* slicing *)

PROCEDURE [..] copySlice
  ( target : STRING; tgtStartIndex, tgtEndIndex : INTEGER;
    source : STRING; srcStartIndex, srcEndIndex : INTEGER );
(* Copies characters  from source,  starting at srcStartIndex  and  ending at
   srcEndIndex  into target  at tgtStartIndex  but not exceeding tgtEndIndex.
   Positive indices count forward starting with zero indicating the left most
   character.  Negative indices  count backward  starting with -1  indicating
   the right most character.  If the target indices denote the entire target,
   the contents of the target  are replaced  by the source's indicated slice.
   If the target's start index is further right than its end index, the copy-
   ing order into the target slice  is reversed.  If the source's start index
   is further right  than its  end index,  the copying order  from the source
   slice is reversed.  If the source slice  is longer than  the target slice,
   only those characters that will fit into the target slice  are copied.  If
   the source slice  is shorter than  the target slice,  only  the  available
   characters of the source slice are copied. If  any index  is out of bounds
   of the associated string,  runtime fault indexOutOfBounds shall be raised.
   This procedure is bound to slice syntax str[n..m] in lvalues and rvalues. *)


(* relational operations *)

PROCEDURE [=] isEqual ( s1, s2 : STRING ) : BOOLEAN;
(* Returns TRUE if the contents of s1 and s2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type STRING. *)

PROCEDURE [<] isLess ( s1, s2 : STRING ) : BOOLEAN;
(* Returns TRUE if s1 comes lexically before s2, otherwise FALSE.
   This function is bound to operators < and >= for type STRING. *)

PROCEDURE [>] isGreater ( s1, s2 : STRING ) : BOOLEAN;
(* Returns TRUE if s1 comes lexically after s2, otherwise FALSE.
   This function is bound to operators > and <= for type STRING. *)


(* IO procedures *)

PROCEDURE Read ( infile : File; s : STRING );
(* Reads the textual representation of a STRING value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the string being read are
     removed from infile
   - the textual representation of the string read is assigned to the variable
     passed in for s
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with a STRING argument. *)

PROCEDURE Write ( outfile : File; s : STRING );
(* Writes the textual representation of STRING s to stream outfile. This
   procedure is substituted for invocations of WRITE with a STRING argument.*)

PROCEDURE WriteF ( outfile      : File;
                   CONST fmtStr : ARRAY OF CHAR;
                   items        : VARIADIC OF STRING );
(* Writes a formatted textual representation of one or more STRING values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   STRING arguments. *)

END STRING.