(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE STRING [ProtoString];

(* Dynamic ASCII Strings *)


FROM FileIO IMPORT File; (* required for IO *)


(* STRING type *)

TYPE STRING = OPAQUE;


(* Properties *)

CONST isMutable = TRUE;
(* Type STRING supports destructive updates *)
    
CONST isOrdered = TRUE;
(* Type STRING supports both ascending and descending iteration *)


(* Bindings to Built-in Syntax *)

(* Capacity limit *)

PROCEDURE [TLIMIT] capacityLimit : LONGCARD;
(* Returns the character capacity limit of type STRING.
   This procedure is bound to pervasive procedure TLIMIT for type STRING. *)


(* Memory Management *)

PROCEDURE [NEW] new ( VAR s : STRING );
(* Allocates a new object of type STRING and returns a pointer to it in s.
   This procedure is bound to pervasive procedure NEW for type STRING. *)

PROCEDURE [RETAIN] retain ( VAR s : STRING );
(* Retains the reference to STRING s.
   This procedure is bound to pervasive procedure RETAIN for type STRING. *)

PROCEDURE [RELEASE] release ( VAR s : STRING );
(* Releases the reference to STRING s.  Passes NIL in s if deallocated.
   This procedure is bound to pervasive procedure RELEASE for type STRING. *)


(* Assignment and Copying *)

(* Literal assignment of the form s := "literal" is synthesised as
   STORE(s, 0, CHR(0)); STORE(s, 0, "literal") for L-values of type STRING. *)

PROCEDURE [COPY] copy ( source, target : STRING );
(* Copies the contents of string source into target. This procedure
   is bound to predefined function COPY for operands of type STRING. *)


(* Storage, Removal, Retrieval and Inspection of Contents *)

PROCEDURE [STORE] replaceCharsAtIndex
  ( s : STRING; index : LONGCARD; CONST chars : ARRAY OF CHAR );
(* Replaces one or more characters at index in STRING s with chars. This pro-
   cedure is bound to predefined procedure STORE for operands of type STRING. *)

PROCEDURE [REMOVE] removeCharsAtIndex ( s : STRING; index, n : LONGCARD);
(* Removes n characters from STRING s at the specified index. This procedure
   is bound to predefined procedure REMOVE for operands of type STRING. *)

PROCEDURE insertCharsAtIndex
  ( s : STRING; index : LONGCARD; CONST chars : ARRAY OF CHAR );
(* Inserts a character sequence into STRING s at the specified index. *)

PROCEDURE [RETRIEVE] characterAtIndex ( s : STRING; index : LONGCARD ) : CHAR;
(* Returns the character at the specified index in STRING s. This function
   is bound to predefined function RETRIEVE for operands of type STRING. *)

PROCEDURE [LENGTH] length ( s : STRING ) : LONGCARD;
(* Returns the length of string s. This function is bound to predefined
   function LENGTH for operands of type STRING. *)


(* Concatenation and Slicing *)

PROCEDURE [CONCAT] concat
  ( args : ARGLIST OF { literal : ARRAY OF CHAR; str : STRING } ) : STRING;
(* Concatenates all strings in the argument list returns the result in a
   newly allocated string. The function is bound to CONCAT for type STRING. *)

PROCEDURE [..] copySlice
  ( target : STRING; tgtStartIndex, tgtEndIndex : INTEGER;
    source : STRING; srcStartIndex, srcEndIndex : INTEGER );
(* Copies characters  from source,  starting at srcStartIndex  and  ending at
   srcEndIndex  into target  at tgtStartIndex  but not exceeding tgtEndIndex.
   Positive indices count forward starting with zero indicating the left most
   character.  Negative indices  count backward  starting with -1  indicating
   the right most character.  If the target indices denote the entire target,
   the contents of the target  are replaced  by the source's indicated slice.
   If the target's start index is further right than its end index, the copy-
   ing order into the target slice  is reversed.  If the source's start index
   is further right  than its  end index,  the copying order  from the source
   slice is reversed.  If the source slice  is longer than  the target slice,
   only those characters that will fit into the target slice  are copied.  If
   the source slice  is shorter than  the target slice,  only  the  available
   characters of the source slice are copied. If  any index  is out of bounds
   of the associated string,  runtime fault indexOutOfBounds shall be raised.
   This procedure is bound to slice syntax str[n..m] in lvalues and rvalues. *)


(* Iteration *)

TYPE ForLoopBodyProc = PROCEDURE ( (* index : *) CONST LONGCARD );

PROCEDURE [FOR] forIterator
  ( s : STRING; forLoopBody : ForLoopBodyProc; ascending : BOOLEAN );
(* Iterates by index over all characters in string s, executing a procedure
   passed in for forLoopBody for each index. Parameter ascending determines
   the order of iteration, TRUE for ascending, FALSE for descending order.
   This procedure is bound to built-in syntax FOR IN for designators of
   type STRING. ForLoopBodyProc is synthesised from the loop body. *)


(* Relational Operations *)

PROCEDURE [=] isEqual ( s1, s2 : STRING ) : BOOLEAN;
(* Returns TRUE if the contents of s1 and s2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type STRING. *)

PROCEDURE [<] isLess ( s1, s2 : STRING ) : BOOLEAN;
(* Returns TRUE if s1 comes lexically before s2, otherwise FALSE.
   This function is bound to operators < and >= for type STRING. *)

PROCEDURE [>] isGreater ( s1, s2 : STRING ) : BOOLEAN;
(* Returns TRUE if s1 comes lexically after s2, otherwise FALSE.
   This function is bound to operators > and <= for type STRING. *)

END STRING.