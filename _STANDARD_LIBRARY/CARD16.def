(* (C) 2009-2012 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE CARD16 [UZTYPE];

(* 16-bit Unsigned Integer Numbers *) 


FROM FileIO IMPORT File; (* required for IO *)


(* CARD16 type *)

TYPE
    CARD16 = OPAQUE RECORD
        value : ARRAY 2 OF OCTET; (* 16 bits *)
    END; (* CARD16 *)


(* UZ-Type bindings to operators, pervasives and primitives: *)

(* Precision *)

CONST [TEXP] maxExponentDigits = 0;
(* maximum number of decimal digits of the exponent of a CARD16 value *)

CONST [TSIG] maxSignificandDigits = 5;
(* maximum number of decimal digits of the significand of a CARD16 value *)


(* Range *)

(* TMIN(CARD16) = 0 *)

PROCEDURE [TMIN] minValue : CARD16;
(* returns the smallest possible value of type CARD16.
   This function is bound to pervasive function TMAX for type CARD16. *)

(* TMAX(CARD16) = 65535 *)

PROCEDURE [TMAX] maxValue : CARD16;
(* returns the largest possible value of type CARD16.
   This function is bound to pervasive function TMAX for type CARD16. *)


(* Direct conversions to common types *)

PROCEDURE [::] toCARD  ( n : CARD16 ) : CARDINAL;
(* Converts CARD16 value n to a CARDINAL value and returns it. This
   function is bound to the :: operator for CARD16 to CARDINAL conversion. *)

PROCEDURE [::] toINT ( n : CARD16 ) : INTEGER; 
(* Converts CARD16 value n to an INTEGER value and returns it. This
   function is bound to the :: operator for CARD16 to INTEGER conversion. *)

PROCEDURE [::] fromCARD  ( n : CARDINAL ) : CARD16;
(* Converts CARDINAL value n to a CARD16 value and returns it. This function
   is bound to the :: operator for CARDINAL to CARD16 conversion. *)

PROCEDURE [::] fromINT  ( n : INTEGER ) : CARD16;
(* Converts INTEGER value n to a CARD16 value and returns it. This function
   is bound to the :: operator for INTEGER to CARD16 conversion. *)


(* Indirect conversions via scalar exchange format *)

PROCEDURE [SXF] toSXF ( n : CARD16; VAR s : ARRAY OF OCTET );
(* Converts CARD16 value n to a string in scalar exchange format.
   This procedure is bound to pervasive primitive SXF for type CARD16. *)

PROCEDURE [VAL] fromSXF ( CONST s : ARRAY OF OCTET; VAR n : CARD16 );
(* Converts a string in scalar exchange format to a CARD16 value.
   This procedure is bound to pervasive primitive VAL for type CARD16. *)


(* Monadic arithmetic operations *) 

PROCEDURE [ABS] abs ( n : CARD16 ) : CARD16;
(* Returns the absolute value of CARD16 value n.
   This function is bound to pervasive function ABS for type CARD16. *)

PROCEDURE [ODD] odd ( n : CARD16 ) : BOOLEAN;
(* Returns TRUE if CARD16 value n is odd, otherwise FALSE.
   This function is bound to pervasive function ODD for type CARD16. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( n1, n2 : CARD16 ) : CARD16;
(* Adds CARD16 values n1 and n2 and returns the result.
   This function is bound to the + operator for type CARD16. *)

PROCEDURE [-] sub ( n1, n2 : CARD16 ) : CARD16;
(* Subtracts CARD16 value n2 from n1 and returns the result.
   This function is bound to the - operator for type CARD16. *)

PROCEDURE [*] multiply ( n1, n2 : CARD16 ) : CARD16;
(* Multiplies CARD16 values n1 and n2 and returns the result.
   This function it bound to the * operator for type CARD16. *)

PROCEDURE [DIV] divide ( n1, n2 : CARD16 ) : CARD16;
(* Divives CARD16 value n1 by n2 and returns the result.
   This function is bound to the DIV operator for type CARD16. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( n1, n2 : CARD16 ) : BOOLEAN;
(* Returns TRUE if CARD16 values n1 and n2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type CARD16. *)

PROCEDURE [<] isLess ( n1, n2 : CARD16 ) : BOOLEAN;
(* Returns TRUE if CARD16 value n1 is less than n2, otherwise FALSE.
   This function is bound to operators < and >= for type CARD16. *)

PROCEDURE [>] isGreater ( n1, n2 : CARD16 ) : BOOLEAN;
(* Returns TRUE if CARD16 value n1 is greater than n2, otherwise FALSE.
   This function is bound to operators > and <= for type CARD16. *)


(* IO operations *)

PROCEDURE Read( infile : File; VAR n : CARD16 );
(* Reads the textual representation of a CARD16 value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the numeral being read are
     removed from infile
   - the numeric value of the numeral string read is assigned to the variable
     passed in for n
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with a CARD16 argument. *)

PROCEDURE Write( outfile : File; n : CARD16 );
(* Writes the textual representation of value n to stream outfile. This
   procedure is substituted for invocations of WRITE with a CARD16 argument.*)

PROCEDURE WriteF ( outfile      : File;
                   CONST fmtStr : ARRAY OF CHAR;
                   items        : VARIADIC OF CARD16 );
(* Writes a formatted textual representation of one or more CARD16 values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   CARD16 arguments. *)

END CARD16. (* sixteen *)