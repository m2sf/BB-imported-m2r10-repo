(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE CARD64 [ProtoCardinal];

(* 64-bit Unsigned Integer Numbers *) 


FROM FileIO IMPORT File; (* required for IO *)


(* CARD64 type *)

TYPE
    CARD64 = OPAQUE RECORD
        value : ARRAY 8 OF OCTET; (* 64 bits *)
    END; (* CARD64 *)


(* Bindings required by blueprint ProtoCardinal *)

CONST
    isSigned = FALSE;
    base = 2; (* binary *)
    precision = 64; (* base-2 digits *)
    eMin = 0; (* smallest exponent *)
    eMax = 0; (* largest exponent *)


(* Range *) 

(* TMIN(CARD64) = 0 *)

PROCEDURE [TMIN] minValue : CARD64;
(* returns the smallest possible value of type CARD64.
   This function is bound to pervasive function TMAX for type CARD64. *)

(* TMAX(CARD64) = 18'446'744'073'709'551'615 *)

PROCEDURE [TMAX] maxValue : CARD64;
(* returns the largest possible value of type CARD64.
   This function is bound to pervasive function TMAX for type CARD64. *)


(* Type conversions *)

PROCEDURE [::] toCARD  ( n : CARD64 ) : CARDINAL;
(* Converts CARD64 value n to a CARDINAL value and returns it. This
   function is bound to the :: operator for CARD64 to CARDINAL conversion.*)

PROCEDURE [::] toINT ( n : CARD64 ) : INTEGER; 
(* Converts CARD64 value n to an INTEGER value and returns it. This
   function is bound to the :: operator for CARD64 to INTEGER conversion. *)

PROCEDURE [::] fromCARD  ( n : CARDINAL ) : CARD64;
(* Converts CARDINAL value n to a CARD64 value and returns it. This function
   is bound to the :: operator for CARDINAL to CARD64 conversion. *)

PROCEDURE [::] fromINT  ( n : INTEGER ) : CARD64;
(* Converts INTEGER value n to a CARD64 value and returns it. This function
   is bound to the :: operator for INTEGER to CARD64 conversion. *)


(* Scalar conversion primitives *)

PROCEDURE [SXF] toSXF ( n : CARD64; VAR s : ARRAY OF OCTET );
(* Converts CARD64 value n to a string in scalar exchange format.
   This procedure is bound to pervasive primitive SXF for type CARD64. *)

PROCEDURE [VAL] fromSXF ( CONST s : ARRAY OF OCTET; VAR n : CARD64 );
(* Converts a string in scalar exchange format to a CARD64 value.
   This procedure is bound to pervasive primitive VAL for type CARD64. *)


(* Monadic arithmetic operations *) 

PROCEDURE [ABS] abs ( n : CARD64 ) : CARD64;
(* Returns the absolute value of CARD64 value n.
   This function is bound to pervasive function ABS for type CARD64. *)

PROCEDURE [ODD] odd ( n : CARD64 ) : BOOLEAN;
(* Returns TRUE if CARD64 value n is odd, otherwise FALSE.
   This function is bound to pervasive function ODD for type CARD64. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( n1, n2 : CARD64 ) : CARD64;
(* Adds CARD64 values n1 and n2 and returns the result.
   This function is bound to the + operator for type CARD64. *)

PROCEDURE [-] sub ( n1, n2 : CARD64 ) : CARD64;
(* Subtracts CARD64 value n2 from n1 and returns the result.
   This function is bound to the - operator for type CARD64. *)

PROCEDURE [*] multiply ( n1, n2 : CARD64 ) : CARD64;
(* Multiplies CARD64 values n1 and n2 and returns the result.
   This function it bound to the * operator for type CARD64. *)

PROCEDURE [DIV] divide ( n1, n2 : CARD64 ) : CARD64;
(* Divives CARD64 value n1 by n2 and returns the result.
   This function is bound to the DIV operator for type CARD64. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( n1, n2 : CARD64 ) : BOOLEAN;
(* Returns TRUE if CARD64 values n1 and n2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type CARD64. *)

PROCEDURE [<] isLess ( n1, n2 : CARD64 ) : BOOLEAN;
(* Returns TRUE if CARD64 value n1 is less than n2, otherwise FALSE.
   This function is bound to operators < and >= for type CARD64. *)

PROCEDURE [>] isGreater ( n1, n2 : CARD64 ) : BOOLEAN;
(* Returns TRUE if CARD64 value n1 is greater than n2, otherwise FALSE.
   This function is bound to operators > and <= for type CARD64. *)

END CARD64. (* sixty-four *)