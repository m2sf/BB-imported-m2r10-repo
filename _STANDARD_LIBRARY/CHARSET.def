(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE CHARSET [ProtoStaticSet];

(* CHAR based statically allocatable sets *)


(* Imports *)

FROM FileIO IMPORT File; (* required for IO *)

FROM COMPILER IMPORT ReqBits, ReqOctets;

IMPORT BITSET128; (* for conversion *)


(* Constants *)

CONST MaxCapacity = ReqBits(CHAR);

CONST RequiredOctets = ReqOctets(CHAR);

CONST [DESCENDING] supportsDescendingFor = TRUE;


(* CHARSET Type *)

TYPE CHARSET = OPAQUE RECORD
    elements : ARRAY ReqOctets OF OCTET;
END; (* CHARSET *)


PROCEDURE [TLIMIT] capacityLimit : LONGCARD;
(* Returns the value of constant MaxCapacity. This function is bound to
   pervasive function TLIMIT for type operand CHARSET. *)


PROCEDURE [TSIZE] storageSize : LONGCARD;
(* Returns the value of constant RequiredOctets. This function is bound
   to pervasive function TSIZE for type operand CHARSET. *)


(* Conversion *)

PROCEDURE [::] toBITSET128 ( charSet : CHARSET ) : BITSET128;
(* Converts the value of charSet to type BITSET128 and returns it. *)


(* Storage, Removal, Retrieval and Inspection of Contents *)

PROCEDURE [STORE] storeElements
  ( VAR charSet : CHARSET; valueList : VARIADIC OF CHAR );
(* Stores the elements given by valueList in CHARSET variable charSet.
   This procedure is bound to pervasive procedure STORE for first
   operands of type CHARSET. *)


PROCEDURE [REMOVE] removeElements
  ( VAR charSet : CHARSET; valueList : VARIADIC OF CHAR );
(* Removes the elements given by valueList from CHARSET variable charSet. Re-
   moves all elements if no values are passed in valueList. This procedure is
   bound to pervasive procedure REMOVE for first operands of type CHARSET. *)


PROCEDURE [RETRIEVE] membershipForElement
  ( CONST charSet : CHARSET; value : CHAR ) : BOOLEAN;
(* Calls function isElement and returns its result. This function is bound to
   pervasive function RETRIEVE for first operands of type CHARSET. *)


PROCEDURE [IN] isElement ( CONST charSet : CHARSET; value : CHAR ) : BOOLEAN;
(* Returns TRUE if value is an element of charSet, returns FALSE otherwise.
   This function is bound to operator IN for left operands of type CHAR
   and right operands of type CHARSET. *)


PROCEDURE [COUNT] elementCount ( CONST charSet : CHARSET ) : LONGCARD;
(* Returns the number of elements in CHARSET set. This function is bound
   to pervasive function COUNT for type CHARSET. *)


(* Iteration *)

TYPE ForLoopBodyProc = PROCEDURE ( (* value : *) CHAR );

PROCEDURE [FOR] forIterator
  ( CONST charSet : CHARSET;
    forLoopBody : ForLoopBodyProc; ascending : BOOLEAN );
(* Iterates over all elements in charSet, executing procedure forLoopBody
   for each element stored in charSet. If TRUE is passed in for ascending,
   the iteration order is ascending, otherwise descending. This procedure
   is bound to built-in syntax FOR IN for type CHARSET. *)


(* Set Operations *) 

PROCEDURE [+] union ( CONST charSet1, charSet2 : CHARSET ) : CHARSET;
(* Returns the union of CHARSET values charSet1 and charSet2. This function
   is bound to the + operator for operands of type CHARSET. *)

PROCEDURE [-] diff ( CONST charSet1, charSet2 : CHARSET ) : CHARSET;
(* Returns the set difference of CHARSET values charSet1 and charSet2. This
   function is bound to the - operator for operands of type CHARSET. *)

PROCEDURE [*] intersection ( CONST charSet1, charSet2 : CHARSET ) : CHARSET;
(* Returns the intersection of CHARSET values charSet1 and charSet2.  This
   function it bound to the * operator for operands of type CHARSET. *)

PROCEDURE [/] symdiff ( CONST charSet1, charSet2 : CHARSET ) : CHARSET;
(* Returns the symmetric set difference of CHARSET values charSet1 and charSet2.
   This function is bound to the / operator for operands of type CHARSET. *)


(* Relational operations *)

PROCEDURE [=] isEqual ( CONST charSet1, charSet2 : CHARSET ) : BOOLEAN;
(* Returns TRUE if CHARSET values charSet1 and charSet2 are equal, otherwise
   FALSE. This function is used to synthesise bindings to the operators =
   and # for operands of type CHARSET. *)


PROCEDURE [SUBSET] isSubset ( CONST charSet1, charSet2 : CHARSET ) : BOOLEAN;
(* Returns TRUE if CHARSET charSet1 is a subset of charSet2, otherwise FALSE.
   This function is used to synthesise bindings to the operators >, >=, < and
   <= for operands of type CHARSET. *)


(* IO operations *)

(* EBNF of the textual representation of CHARSET values:
    charsetValue : simpleFormat | quotedCharFormat | mixedFormat ;
    simpleFormat : "{" ( codePoint  ( "," codePoint )* )? "}" ; 
    mnemonicFormat : "{" ( quotedChar ( "," quotedChar )* )? "}" ;
    mixedFormat : "{" ( codeOrChar ( "," codeOrChar )* )? "}" ;
    codePoint : "0u" base16Digit base16Digit ;
    quotedChar : mnemonic | '"' character '"' ;
    codeOrChar : codePoint | '"' character '"' ;
    mnemonic : "NUL" | "SOH" | "STX" | "ETX" | "EOT" | "ENQ" | "ACK" |
        "BEL" | "BS" | "HT" | "LF" | "VT" | "FF" | "CR" | "SO" | "SI" |
        "DLE" | "DC1" | "DC2" | "DC3" | "DC4" | "NAK" | "SYN" | "ETB" |
        "CAN" | "EM" | "SUB" | "ESC" | "FS" | "GS" | "RS" | "US" | "DEL" ;
    character : digit | letter |
        " " | "!" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" |
        "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" | "?" |
        "@" | "[" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~" ;
    digit : "0" .. "9" ;
    letter : "A" .. "Z" | "a" .. "z" ;
    base16Digit : "0" .. "9" | "A" .. "F" ; *)

PROCEDURE Read ( infile : File; VAR charSet : CHARSET );
(* Reads the textual representation of CHARSET value charSet from infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the value being read are
     removed from infile
   - the textual representation of the value read is assigned to set
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with a CHARSET argument.*)

PROCEDURE Write ( outfile : File; CONST charSet : CHARSET );
(* Writes the value of CHARSET charSet in simple format to stream outfile. This
   procedure is substituted for invocations of WRITE with a CHARSET argument.*)

PROCEDURE WriteF ( outfile      : File;
                   CONST fmtStr : ARRAY OF CHAR;
                   items        : VARIADIC OF CHARSET );
(* Writes a formatted textual representation of one or more CHARSET values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   CHARSET arguments. *)


(* Introspection *)

PROCEDURE capacity ( CONST charSet : CHARSET ) : LONGCARD;
(* Always returns the value of TLIMIT(CHARSET). *)


PROCEDURE entryLimit ( CONST charSet : CHARSET ) : LONGCARD;
(* Always returns the value of TLIMIT(CHARSET). *)


PROCEDURE isOrdered ( CONST charSet : CHARSET ) : BOOLEAN;
(* Always returns TRUE because type CHARSET is ordered. *)


PROCEDURE isResizable ( CONST charSet : CHARSET ) : BOOLEAN;
(* Always returns FALSE because type CHARSET is static *)


END CHARSET.