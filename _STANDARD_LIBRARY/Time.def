(* (C) 2009-2014 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE Time [ProtoTime];

(* Compound Time ADT *)


FROM TimeUnits IMPORT
    Days,         (*    0 .. 4'294'967'295  days *)
    Hours,        (*    0 .. 23            hours *)
    Minutes,      (*    0 .. 59          minutes *)
    Milliseconds; (*    0 .. 59'999 milliseconds *)


TYPE Time = RECORD
  days  : Days;
  hours : Hours;
  mins  : Minutes;
  msecs : Milliseconds
END; (* Time *)
    
(* Example: 100 days, 23 hours, 45 mins, 38 secs => { 100, 23, 45, 38'000 }; *)


CONST zero = { 0, 0, 0, 0 };


(* Range *)

PROCEDURE [TMIN] minTime : Time;

PROCEDURE [TMAX] maxTime : Time;


(* Monadic arithmetic operations *)

PROCEDURE inMilliseconds ( t : Time ) : REAL;
(* Returns the value of t in milliseconds. *)

PROCEDURE inSeconds ( t : Time ) : REAL;
(* Returns the value of t in fractional seconds. *)

PROCEDURE inMinutes ( t : Time ) : REAL;
(* Returns the value of t in fractional minutes. *)

PROCEDURE inHours ( t : Time ) : REAL;
(* Returns the value of t in fractional hours. *)

PROCEDURE inDays ( t : Time ) : REAL;
(* Returns the value of t in fractional days. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( t1, t2 : Time ) : Time;
(* Adds Time values t1 and t2 and returns the result.
   This function is bound to the + operator for type Time. *)

PROCEDURE [-] sub ( t1, t2 : Time ) : Time;
(* Subtracts Time value t2 from t1 and returns the result.
   This function is bound to the - operator for type Time. *)

PROCEDURE multiply ( t : Time; n : CARDINAL ) : Time;
(* Multiplies Time value t by scalar n and returns the result. *)

PROCEDURE divide ( t : Time; n : CARDINAL ) : Time;
(* Divides Time value t by scalar n and returns the result. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( t1, t2 : Time ) : BOOLEAN;
(* Returns TRUE if Time values t1 and t2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type Time. *)

PROCEDURE [<] isLess ( t1, t2 : Time ) : BOOLEAN;
(* Returns TRUE if Time value t1 is less than t2, otherwise FASLE.
   This function is bound to operators < and >= for type Time. *)

PROCEDURE [>] isGreater ( t1, t2 : Time ) : BOOLEAN;
(* Returns TRUE if Time value t1 is greater than t2, otherwise FALSE.
   This function is bound to operators > and <= for type Time. *)


END Time.