(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE INT32 [ProtoInteger];

(* 32-bit Integer Numbers *) 


FROM FileIO IMPORT File; (* required for IO *)


(* INT32 type *)

TYPE
    INT32 = OPAQUE RECORD
        value : ARRAY 4 OF OCTET; (* 32 bits *)
    END; (* INT32 *)


(* Bindings required by blueprint ProtoInteger *)

(* Constants *)

CONST
    isSigned = TRUE;
    base = 2; (* binary *)
    precision = 31; (* base-2 digits *)
    eMin = 0; (* smallest exponent *)
    eMax = 0; (* largest exponent *)


(* Range *) 

(* TMIN(INT32) = -2'147'483'648 *)

PROCEDURE [TMIN] minValue : INT32;
(* returns the smallest possible value of type INT32.
   This function is bound to pervasive function TMAX for type INT32. *)

(* TMAX(INT32) = 2'147'483'647 *)

PROCEDURE [TMAX] maxValue : INT32;
(* returns the largest possible value of type INT32.
   This function is bound to pervasive function TMAX for type INT32. *)


(* Type conversions *)

PROCEDURE [::] toCARD  ( n : INT32 ) : CARDINAL;
(* Converts INT32 value n to a CARDINAL value and returns it. This
   function is bound to the :: operator for INT32 to CARDINAL conversion. *)

PROCEDURE [::] toINT ( n : INT32 ) : INTEGER; 
(* Converts INT32 value n to an INTEGER value and returns it. This
   function is bound to the :: operator for INT32 to INTEGER conversion. *)

PROCEDURE [::] fromCARD  ( n : CARDINAL ) : INT32;
(* Converts CARDINAL value n to an INT32 value and returns it. This function
   is bound to the :: operator for CARDINAL to INT32 conversion. *)

PROCEDURE [::] fromINT  ( n : INTEGER ) : INT32;
(* Converts INTEGER value n to an INT32 value and returns it. This function
   is bound to the :: operator for INTEGER to INT32 conversion. *)


(* Scalar conversion primitives *)

PROCEDURE [SXF] toSXF ( n : INT32; VAR s : ARRAY OF OCTET );
(* Converts INT32 value n to a string in scalar exchange format.
   This procedure is bound to pervasive primitive SXF for type INT32. *)

PROCEDURE [VAL] fromSXF ( CONST s : ARRAY OF OCTET; VAR n : INT32 );
(* Converts a string in scalar exchange format to an INT32 value.
   This procedure is bound to pervasive primitive VAL for type INT32. *)


(* Monadic arithmetic operations *) 

PROCEDURE [ABS] abs ( n : INT32 ) : INT32;
(* Returns the absolute value of INT32 value n.
   This function is bound to pervasive function ABS for type INT32. *)

PROCEDURE [NEG] neg ( n : INT32 ) : INT32;
(* Returns the sign reversed value of INT32 value n.
   This function is bound to the unary minus operator for type INT32. *)

PROCEDURE [ODD] odd ( n : INT32 ) : BOOLEAN;
(* Returns TRUE if INT32 value n is odd, otherwise FALSE.
   This function is bound to pervasive function ODD for type INT32. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( n1, n2 : INT32 ) : INT32;
(* Adds INT32 values n1 and n2 and returns the result.
   This function is bound to the + operator for type INT32. *)

PROCEDURE [-] sub ( n1, n2 : INT32 ) : INT32;
(* Subtracts INT32 value n2 from n1 and returns the result.
   This function is bound to the - operator for type INT32. *)

PROCEDURE [*] multiply ( n1, n2 : INT32 ) : INT32;
(* Multiplies INT32 values n1 and n2 and returns the result.
   This function it bound to the * operator for type INT32. *)

PROCEDURE [DIV] divide ( n1, n2 : INT32 ) : INT32;
(* Divives INT32 value n1 by n2 and returns the result.
   This function is bound to the DIV operator for type INT32. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( n1, n2 : INT32 ) : BOOLEAN;
(* Returns TRUE if INT32 values n1 and n2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type INT32. *)

PROCEDURE [<] isLess ( n1, n2 : INT32 ) : BOOLEAN;
(* Returns TRUE if INT32 value n1 is less than n2, otherwise FALSE.
   This function is bound to operators < and >= for type INT32. *)

PROCEDURE [>] isGreater ( n1, n2 : INT32 ) : BOOLEAN;
(* Returns TRUE if INT32 value n1 is greater than n2, otherwise FALSE.
   This function is bound to operators > and <= for type INT32. *)

END INT32. (* thirty-two *)