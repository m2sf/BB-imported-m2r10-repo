(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE UnsignedReal60 [ProtoReal];

(* Unsigned Real Number Type With Values from 0.0 to 59.999 *) 


FROM FileIO IMPORT File; (* required for IO *)


(* UnsignedReal60 type *)

TYPE
    UnsignedReal60 = OPAQUE RECORD
        value : ARRAY 2 OF OCTET; (* 16 bits *)
    END; (* UnsignedReal60 *)

    (* no sign, 16-bit significand, fixed decimal point *)


(* Bindings required by blueprint ProtoReal *)

(* Precision *)

CONST [TEXP] maxExponentDigits = 1;
(* maximum number of decimal digits of the exponent of an
   UnsignedReal60 value *)

CONST [TSIG] maxSignificandDigits = 5;
(* maximum number of decimal digits of the significand of an
   UnsignedReal60 value *)


(* Range *) 

(* TMIN(UnsignedReal60) = 0.000 *)

PROCEDURE [TMIN] minValue : UnsignedReal60;
(* returns the smallest possible value of type UnsignedReal60.
   This function is bound to pervasive function TMAX for type
   UnsignedReal60. *)

(* TMAX(UnsignedReal60) = +59.999 *)

PROCEDURE [TMAX] maxValue : UnsignedReal60;
(* returns the largest possible value of type UnsignedReal60.
   This function is bound to pervasive function TMAX for type
   UnsignedReal60. *)


(* Direct conversions to common types *)

PROCEDURE [::] toCARD  ( a : UnsignedReal60 ) : CARDINAL;
(* Converts an UnsignedReal60 value to a CARDINAL value and returns it.
   This function is bound to the :: operator for UnsignedReal60 to
   CARDINAL conversion. *)

PROCEDURE [::] toINT ( a : UnsignedReal60 ) : INTEGER; 
(* Converts an UnsignedReal60 value to an INTEGER value and returns it.
   This function is bound to the :: operator for UnsignedReal60 to
   INTEGER conversion. *)

PROCEDURE [::] toREAL ( a : UnsignedReal60 ) : REAL;
(* Converts an UnsignedReal60 value to a REAL value and returns it.
   This function is bound to the :: operator for UnsignedReal60 to
   REAL conversion. *)


(* Indirect conversions via scalar exchange format *)

PROCEDURE [SXF] toSXF ( a : UnsignedReal60; VAR s : ARRAY OF OCTET );
(* Converts an UnsignedReal60 value to a string in scalar exchange
   format.  This procedure is bound to built-in primitive SXF for
   type UnsignedReal60. *)

PROCEDURE [VAL] fromSXF ( CONST s : ARRAY OF OCTET; VAR a : UnsignedReal60 );
(* Converts a string in scalar exchange format to an UnsignedReal60
   value.  This procedure is bound to built-in primitive VAL for
   type UnsignedReal60. *)


(* Monadic arithmetic operations *) 

PROCEDURE floor ( r : UnsignedReal60 ) : UnsignedReal60;
(* Returns the floor value of r. *)

PROCEDURE ceil ( r : UnsignedReal60 ) : UnsignedReal60;
(* Returns the ceiling value of r. *)

PROCEDURE frac ( r : UnsignedReal60 ) : UnsignedReal60;
(* Returns the fractional part of r. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( r1, r2 : UnsignedReal60 ) : UnsignedReal60;
(* Adds UnsignedReal60 values r1 and r2 and returns the result.
   This function is bound to the + operator for type UnsignedReal60. *)

PROCEDURE [-] sub ( r1, r2 : UnsignedReal60 ) : UnsignedReal60;
(* Subtracts UnsignedReal60 value r2 from r1 and returns the result.
   This function is bound to the - operator for type UnsignedReal60. *)

PROCEDURE multiply ( r : UnsignedReal60; n : CARDINAL ) : UnsignedReal60;
(* Multiplies UnsignedReal60 value r by scalar n and returns the result. *)

PROCEDURE divide ( r : UnsignedReal60; n : CARDINAL ) : UnsignedReal60;
(* Divives UnsignedReal60 value r by scalar n and returns the result. *)

PROCEDURE trunc ( r : UnsignedReal60; n : CARDINAL ) : UnsignedReal60;
(* Returns the value of r truncated to n decimal places. *)

PROCEDURE round ( r : UnsignedReal60; n : CARDINAL ) : UnsignedReal60;
(* Returns the value of r rounded to n decimal places. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( r1, r2 : UnsignedReal60 ) : BOOLEAN;
(* Returns TRUE if UnsignedReal60 values r1 and r2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type UnsignedReal60. *)

PROCEDURE [<] isLess ( r1, r2 : UnsignedReal60 ) : BOOLEAN;
(* Returns TRUE if UnsignedReal60 value r1 is less than r2, otherwise FALSE.
   This function is bound to operators < and >= for type UnsignedReal60. *)

PROCEDURE [>] isGreater ( r1, r2 : UnsignedReal60 ) : BOOLEAN;
(* Returns TRUE if UnsignedReal60 value r1 is greater than r2, otherwise FALSE.
   This function is bound to operators > and <= for type UnsignedReal60. *)


(* IO operations *)

PROCEDURE [READ] Read ( infile : File; VAR r : UnsignedReal60 );
(* Reads the textual representation of a UnsignedReal60 value from input
   stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the numeral being read are
     removed from infile
   - the numeric value of the numeral string read is assigned to the variable
     passed in for r
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput.
     This procedure is substituted for invocations of READ with an
     UnsignedReal60 argument.*)

PROCEDURE [WRITE] Write ( outfile : File; r : UnsignedReal60 );
(* Writes the textual representation of value r to output stream outfile.
   This procedure is substituted for invocations of WRITE with an
   UnsignedReal60 argument.*)

PROCEDURE [WRITEF] WriteF
  ( outfile      : File;
    CONST fmtStr : ARRAY OF CHAR;
    items        : VARIADIC OF UnsignedReal60 );
(* Writes a formatted textual representation of one or more UnsignedReal60
   values to output stream outfile. The output format is determined by fmtStr.
   This procedure is substituted for invocations of WRITEF with one or more
   UnsignedReal60 arguments. *)

END UnsignedReal60.