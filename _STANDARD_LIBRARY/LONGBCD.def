(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE LONGBCD [ProtoReal];

(* Double Precision Binary Coded Decimals *) 


(* LONGBCD type *)

TYPE
    LONGBCD = OPAQUE RECORD
      * value : ARRAY 16 OF OCTET; (* 128 bits *)
    END; (* LONGBCD *)

    (* 1-bit sign, 116-bit significand, signed 11-bit exponent *)


(* Bindings required by blueprint ProtoReal *)


(* Constants *)

CONST [TSIGNED] isSigned = TRUE;

CONST [TBASE] base = 10; (* decimal *)

CONST [TPRECISION] precision = 29; (* base-10 digits *)

CONST [TMINEXP] eMin = -1024; (* smallest exponent *)

CONST [TMAXEXP] eMax = +1023; (* largest exponent *)


(* Range *) 

(* TMIN(LONGBCD) = -9.999'999'999'999'999'999'999'999'999'9E+1023 *)

PROCEDURE [TMIN] minValue : LONGBCD;
(* returns the smallest possible value of type LONGBCD.
   This function is bound to predefined function TMIN for type LONGBCD. *)

(* TMAX(LONGBCD) = +9.999'999'999'999'999'999'999'999'999'9E+1023 *)

PROCEDURE [TMAX] maxValue : LONGBCD;
(* returns the largest possible value of type LONGBCD.
   This function is bound to predefined function TMAX for type LONGBCD. *)


(* Direct conversions to common types *)

PROCEDURE [::] toLONGCARD  ( a : LONGBCD ) : LONGCARD;
(* Converts LONGBCD value a to a LONGCARD value and returns it.  This func-
   tion is bound to the :: operator for LONGBCD to LONGCARD conversion. *)

PROCEDURE [::] toLONGINT ( a : LONGBCD ) : LONGINT; 
(* Converts LONGBCD value a to an LONGINT value and returns it.  This func-
   tion is bound to the :: operator for LONGBCD to LONGINT conversion. *)

PROCEDURE [::] toLONGREAL ( a : LONGBCD ) : LONGREAL;
(* Converts LONGBCD value a to a REAL value and returns it.  This func-
   tion is bound to the :: operator for LONGBCD to LONGREAL conversion. *)


(* Indirect conversions via scalar exchange format *)

PROCEDURE [SXF] toSXF ( a : LONGBCD; VAR s : ARRAY OF OCTET );
(* Converts LONGBCD value a to a string in scalar exchange format.
   This procedure is bound to built-in primitive SXF for type LONGBCD. *)

PROCEDURE [VAL] fromSXF ( CONST s : ARRAY OF OCTET; VAR a : LONGBCD );
(* Converts a string in scalar exchange format to a LONGBCD value.
   This procedure is bound to built-in primitive VAL for type LONGBCD. *)


(* Monadic arithmetic operations *) 

PROCEDURE [ABS] abs ( a : BCD ) : BCD;
(* Returns the sign removed value of BCD value a.
   This function is bound to pervasive function ABS for type LONGBCD. *)

PROCEDURE [+/-] neg ( a : LONGBCD ) : LONGBCD;
(* Returns the sign reversed value of LONGBCD value a.
   This function is bound to the unary minus operator for type LONGBCD. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( a, b : LONGBCD ) : LONGBCD;
(* Adds LONGBCD values a and b and returns the result.
   This function is bound to the + operator for type LONGBCD. *)

PROCEDURE [-] sub ( a, b : LONGBCD ) : LONGBCD;
(* Subtracts LONGBCD value b from a and returns the result.
   This function is bound to the - operator for type LONGBCD. *)

PROCEDURE [*] multiply ( a, b : LONGBCD ) : LONGBCD;
(* Multiplies LONGBCD values a and b and returns the result.
   This function it bound to the * operator for type LONGBCD. *)

PROCEDURE [/] divide ( a, b : LONGBCD ) : LONGBCD;
(* Divives LONGBCD value a by b and returns the result.
   This function is bound to the / operator for type LONGBCD. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( a, b : LONGBCD ) : BOOLEAN;
(* Returns TRUE if LONGBCD values a and b are equal, otherwise FALSE.
   This function is bound to operators = and # for type LONGBCD. *)

PROCEDURE [<] isLess ( a, b : LONGBCD ) : BOOLEAN;
(* Returns TRUE if LONGBCD value a is less than b, otherwise FALSE.
   This function is bound to operators < and >= for type LONGBCD. *)

PROCEDURE [>] isGreater ( a, b : LONGBCD ) : BOOLEAN;
(* Returns TRUE if LONGBCD value a is greater than b, otherwise FALSE.
   This function is bound to operators > and <= for type LONGBCD. *)


END LONGBCD.