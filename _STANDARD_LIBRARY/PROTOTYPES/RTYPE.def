(* (C) 2012 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Specialised Prototype Definition for Real Number ADTs *)

PROTOTYPE RTYPE [SCALAR]; (* conforms to SCALAR *)

(* RTYPE ADTs must be opaque records to be statically allocatable,
   real number literals are used *)

TYPE = OPAQUE RECORD := REAL;


(* Bindings required for RTYPE ADTs *)

(* Bindings to built-in functions TEXP and TSIG *)

CONST [TEXP] : [0 .. 63] OF CARDINAL;
(* constant denoting the maximum digit count of the exponent of the ADT *)

CONST [TSIG] : [1 .. 4000] OF CARDINAL;
(* constant denoting the maximum digit count of the significand of the ADT *)


(* Bindings to pervasive functions TMIN and TMAX *)

PROCEDURE [TMIN] minValue : RTYPE;
(* procedure to return minimal value of a real number ADT *)

PROCEDURE [TMAX] maxValue : RTYPE;
(* procedure to return maximal value of a real number ADT *)


(* Bindings to scalar conversion primitives *)

PROCEDURE [SXF] toSXF ( lexeme : ARRAY OF CHAR; VAR sxf : ARRAY OF OCTET );
(* procedure to convert a literal to a value in scalar exchange format *)

PROCEDURE [VAL] fromSXF ( sxf : ARRAY OF OCTET; VAR value : RTYPE );
(* procedure to convert value in scalar exchange format to the ADT *)


(* Binding to assignment operator for non-literal values *)

PROCEDURE [:=] assign ( VAR left : RTYPE; right : RTYPE );

(* The assignment of literal values is synthesised from SXF and VAL *)


PROCEDURE [ABS] abs ( r : RTYPE ) : RTYPE;
(* procedure to bind to the ABS operator for operands of the RTYPE ADT *)

PROCEDURE [NEG] neg ( r : RTYPE ) : RTYPE;
(* procedure to bind to the NEG operator for operands of the RTYPE ADT *)

PROCEDURE [ODD] odd ( r : RTYPE ) : BOOLEAN;
(* procedure to bind to the ODD operator for operands of the RTYPE ADT *)


(* Bindings to dyadic operations *)

PROCEDURE [+] add ( r1, r2 : RTYPE ) : RTYPE;
(* procedure to bind to the + operator for operands of the RTYPE ADT *)

(* The operation for the ++ statement is synthesized as r := r + VAL(1.0) *)

PROCEDURE [-] subtract ( r1, r2 : RTYPE ) : RTYPE;
(* procedure to bind to the - operator for operands of the RTYPE ADT *)

(* The operation for the -- statement is synthesized as r := r - VAL(1.0) *)

PROCEDURE [*] multiply ( r1, r2 : RTYPE ) : RTYPE;
(* procedure to bind to the * operator for operands of the RTYPE ADT *)

PROCEDURE [/] divide ( r1, r2 : RTYPE ) : RTYPE;
(* procedure to bind to the / operator for operands of the RTYPE ADT *)


(* Bindings to relational operations *)

PROCEDURE [=] isEqual ( r1, r2 : RTYPE ) : BOOLEAN;
(* procedure to bind to the = operator for operands of the RTYPE ADT *)

(* The operation for the # operator is synthesized as NOT (r1 = r2) *)

PROCEDURE [>] isGreater ( r1, r2 : RTYPE ) : BOOLEAN;
(* procedure to bind to the > operator for operands of the RTYPE ADT *)

(* The operation for the <= operator is synthesized as NOT (r1 > r2) *)

PROCEDURE [<] isLess ( r1, r2 : RTYPE ) : BOOLEAN;
(* procedure to bind to the < operator for operands of the RTYPE ADT *)

(* The operation for the >= operator is synthesized as NOT (r1 < r2) *)


END RTYPE.