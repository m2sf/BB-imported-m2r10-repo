(* (C) 2009-2012 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

PROTOTYPE RTYPE; (* R-Type *)

(* Prototype Definition for Real Number ADTs *)


(* RTYPE ADTs must be opaque records, real number literals may be used *)

TYPE = OPAQUE RECORD := REAL;


(* Bindings required for R-Type ADTs *)


(* Bindings for pervasive functions TMIN and TMAX *)

PROCEDURE [TMIN] minValue : RTYPE;
(* return the value that pervasive function TMIN shall return for the ADT *)

PROCEDURE [TMAX] maxValue : RTYPE;
(* return the value that pervasive function TMAX shall return for the ADT *)


(* Binding to assignment operator *)

PROCEDURE [:=] assign ( VAR left : RTYPE; CONST right : RTYPE );


(* Bindings to scalar conversion primitives *)

PROCEDURE [SXF] toSXF ( r : RTYPE; VAR sxf : ARRAY OF CHAR );
(* conversion of an RTYPE ADT value to scalar exchange format *)

PROCEDURE [VAL] fromSXF ( CONST sxf : ARRAY OF CHAR; VAR r : RTYPE );
(* conversion of scalar exchange format to an RTYPE ADT value *)


(* Bindings to monadic operations *)

PROCEDURE [ABS] abs ( r : RTYPE ) : RTYPE;
(* procedure to bind to pervasive function ABS for arguments of the ADT *)

PROCEDURE [NEG] neg ( r : RTYPE ) : RTYPE;
(* procedure to bind to pervasive function NEG for arguments of the ADT *)


(* Bindings to dyadic operations *)

PROCEDURE [+] plus ( r1, r2 : RTYPE ) : RTYPE;
(* procedure to bind to the + operator for operands of the ADT *)

(* The operation for the ++ statement is synthesized as r := r + 1.0 *)

PROCEDURE [-] minus ( r1, r2 : RTYPE ) : RTYPE;
(* procedure to bind to the - operator for operands of the ADT *)

(* The operation for the -- statement is synthesized as r := r - 1.0 *)

PROCEDURE [*] multiply ( r1, r2 : RTYPE ) : RTYPE;
(* procedure to bind to the * operator for operands of the ADT *)

PROCEDURE [/] divide ( r1, r2 : RTYPE ) : RTYPE;
(* procedure to bind to the / operator for operands of the ADT *)


(* Bindings to relational operations *)

PROCEDURE [=] isEqual ( r1, r2 : RTYPE ) : BOOLEAN;
(* procedure to bind to the = operator for operands of the ADT *)

(* The operation for the # operator is synthesized as NOT (r1 = r2) *)

PROCEDURE [<] isLess ( r1, r2 : RTYPE ) : BOOLEAN;
(* procedure to bind to the < operator for operands of the ADT *)

(* The operation for the <= operator is synthesized as NOT (r1 > r2) *)

PROCEDURE [>] isGreater ( r1, r2 : RTYPE ) : BOOLEAN;
(* procedure to bind to the > operator for operands of the ADT *)

(* The operation for the >= operator is synthesized as NOT (r1 < r2) *)


END RTYPE.