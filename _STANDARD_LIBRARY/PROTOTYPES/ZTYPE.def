(* (C) 2009-2012 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

PROTOTYPE ZTYPE; (* Z-Type *)

(* Semantic Properties for Whole Number Types *)


(* ADTs must be opaque records,
   integer number literals may be used *)

TYPE = OPAQUE RECORD := INTEGER;


(* Bindings required for Z-Type ADTs *)


(* Bindings for pervasive functions TMIN and TMAX *)

CONST [TMIN]; (* value to be returned by pervasive function TMIN *)

CONST [TMAX]; (* value to be returned by pervasive function TMAX *)


(* Binding to assignment operator *)

PROCEDURE [:=] assign ( VAR left : ZTYPE; CONST right : ZTYPE );


(* Bindings to scalar conversion primitives *)

PROCEDURE [SXF] toSXF ( x : ZTYPE; VAR sxf : ARRAY OF CHAR );
(* conversion of a ZTYPE ADT value to scalar conversion format *)

PROCEDURE [VAL] fromSXF ( CONST sxf : ARRAY OF CHAR; VAR x : ZTYPE );
(* conversion of scalar conversion format to a ZTYPE ADT value *)


(* Bindings to monadic operations *)

PROCEDURE [ABS] abs ( x : ZTYPE ) : ZTYPE;
(* procedure to bind to pervasive function ABS for arguments of the ADT *)

PROCEDURE [NEG] neg ( x : ZTYPE ) : ZTYPE;
(* procedure to bind to pervasive function NEG for arguments of the ADT *)

PROCEDURE [ODD] odd ( x : ZTYPE ) : BOOLEAN;
(* procedure to bind to pervasive function ODD for arguments of the ADT *)



(* Bindings to dyadic operations *)

PROCEDURE [+] plus ( x1, x2 : ZTYPE ) : ZTYPE;
(* procedure to bind to the + operator for operands of the ADT *)

PROCEDURE [-] minus ( x1, x2 : ZTYPE ) : ZTYPE;
(* procedure to bind to the - operator for operands of the ADT *)

PROCEDURE [*] asterisk ( x1, x2 : ZTYPE ) : ZTYPE;
(* procedure to bind to the * operator for operands of the ADT *)

PROCEDURE [DIV] div ( x1, x2 : ZTYPE ) : ZTYPE;
(* procedure to bind to the DIV operator for operands of the ADT *)

(* The operation for the ++ statement is synthesized as follows:
   the statement x++  is replaced by statement  x := x + 1 *)

(* The operation for the -- statement is synthesized as follows:
   the statement x--  is replaced by statement  x := x - 1 *)


(* Bindings to relational operations *)

PROCEDURE [=] isEqual ( x1, x2 : ZTYPE ) : BOOLEAN;
(* procedure to bind to the = operator for operands of the ADT *)

(* The operation for the # operator is synthesized as NOT (x1 = x2) *)

PROCEDURE [<] isLess ( x1, x2 : ZTYPE ) : BOOLEAN;
(* procedure to bind to the < operator for operands of the ADT *)

(* The operation for the <= operator is synthesized as NOT (x1 > x2) *)

PROCEDURE [>] isGreater ( x1, x2 : ZTYPE ) : BOOLEAN;
(* procedure to bind to the > operator for operands of the ADT *)

(* The operation for the >= operator is synthesized as NOT (x1 < x2) *)


END ZTYPE.