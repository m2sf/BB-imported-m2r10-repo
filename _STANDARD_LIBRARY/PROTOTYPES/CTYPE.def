(* (C) 2009-2012 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

PROTOTYPE CTYPE; (* C-Type *)

(* Prototype Definition for Complex Number ADTs *)


(* CTYPE ADTs must be opaque records,
   structured literals of two real number components may be used *)

TYPE = OPAQUE RECORD := { REAL, REAL };


(* Bindings required for C-Type ADTs *)


(* Binding to assignment operator *)

PROCEDURE [:=] assign ( VAR left : CTYPE; CONST right : CTYPE );


(* Bindings to monadic operations *)

PROCEDURE [ABS] abs ( z : CTYPE ) : CTYPE;
(* procedure to bind to pervasive function ABS for arguments of the ADT *)

PROCEDURE [NEG] neg ( z : CTYPE ) : CTYPE;
(* procedure to bind to pervasive function NEG for arguments of the ADT *)


(* Bindings to dyadic operations *)

PROCEDURE [+] plus ( z1, z2 : CTYPE ) : CTYPE;
(* procedure to bind to the + operator for operands of the ADT *)

PROCEDURE [-] minus ( z1, z2 : CTYPE ) : CTYPE;
(* procedure to bind to the - operator for operands of the ADT *)

PROCEDURE [*] multiply ( z1, z2 : CTYPE ) : CTYPE;
(* procedure to bind to the * operator for operands of the ADT *)

PROCEDURE [/] divide ( z1, z2 : CTYPE ) : CTYPE;
(* procedure to bind to the / operator for operands of the ADT *)


(* Bindings to relational operations *)

PROCEDURE [=] isEqual ( z1, z2 : CTYPE ) : BOOLEAN;
(* procedure to bind to the = operator for operands of the ADT *)

(* The operation for the # operator is synthesized as NOT (r1 = r2) *)


END CTYPE.