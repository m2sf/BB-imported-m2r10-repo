(* (C) 2009-2012 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

(* Contract Definition for Complex Number ADTs *)

CONTRACT ProtoComplex [ProtoNonScalar]; (* conforms to ProtoNonScalar *)

(* Complex Number ADTs must be transparent records,
   have two fields compatible with real number literals,
   structurally equivalent literals are compatible by default *)

TYPE = RECORD := { REAL, REAL };


(* Bindings required for ProtoComplex ADTs *)

(* Via-SXF conversion between structurally equivalent non-scalar numeric types
   is synthesised using SXF and VAL conversions on their scalar components *)


(* Bindings to monadic operations *)

PROCEDURE [ABS] abs ( z : ProtoComplex ) : ProtoComplex;
(* procedure to bind to pervasive function ABS for arguments of the ADT *)

PROCEDURE [NEG] neg ( z : ProtoComplex ) : ProtoComplex;
(* procedure to bind to pervasive function NEG for arguments of the ADT *)


(* Bindings to dyadic operations *)

PROCEDURE [+] plus ( z1, z2 : ProtoComplex ) : ProtoComplex;
(* procedure to bind to the + operator for operands of the ADT *)

PROCEDURE [-] minus ( z1, z2 : ProtoComplex ) : ProtoComplex;
(* procedure to bind to the - operator for operands of the ADT *)

PROCEDURE [*] multiply ( z1, z2 : ProtoComplex ) : ProtoComplex;
(* procedure to bind to the * operator for operands of the ADT *)

PROCEDURE [/] divide ( z1, z2 : ProtoComplex ) : ProtoComplex;
(* procedure to bind to the / operator for operands of the ADT *)


(* Bindings to relational operations *)

PROCEDURE [=] isEqual ( z1, z2 : ProtoComplex ) : BOOLEAN;
(* procedure to bind to the = operator for operands of the ADT *)

(* The operation for the # operator is synthesized as NOT (z1 = z2) *)


END ProtoComplex.