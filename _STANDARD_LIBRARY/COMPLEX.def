(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE COMPLEX [ProtoComplex];

(* Single Precision Complex Numbers *) 


FROM FileIO IMPORT File; (* required for IO *)


(* COMPLEX type *)

TYPE
    COMPLEX = RECORD
        re, im : REAL;
    END; (* COMPLEX *)


(* Bindings required by blueprint ProtoComplex *)

(* Monadic arithmetic operations *) 

PROCEDURE [NEG] neg ( z : COMPLEX ) : COMPLEX;
(* Returns the sign reversed value of COMPLEX value z.
   This function is bound to the unary minus operator for type COMPLEX. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( z1, z2 : COMPLEX ) : COMPLEX;
(* Adds COMPLEX values z1 and z2 and returns the result.
   This function is bound to the + operator for type COMPLEX. *)

PROCEDURE [-] sub ( z1, z2 : COMPLEX ) : COMPLEX;
(* Subtracts COMPLEX value z2 from z1 and returns the result.
   This function is bound to the - operator for type COMPLEX. *)

PROCEDURE [*] multiply ( z1, z2 : COMPLEX ) : COMPLEX;
(* Multiplies COMPLEX values z1 and z2 and returns the result.
   This function it bound to the * operator for type COMPLEX. *)

PROCEDURE [/] divide ( z1, z2 : COMPLEX ) : COMPLEX;
(* Divives COMPLEX value z1 by z2 and returns the result.
   This function is bound to the / operator for type COMPLEX. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( z1, z2 : COMPLEX ) : BOOLEAN;
(* Returns TRUE if COMPLEX values z1 and z2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type COMPLEX. *)

END COMPLEX.