(* (C) 2009, 2010 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE INT64 [ZType];

(* 64-bit Integer Numbers *) 


FROM FileIO IMPORT File; (* required for IO *)


(* INT64 type *)

TYPE
    INT64 = OPAQUE RECORD
        value : ARRAY 8 OF OCTET; (* 64 bits *)
    END; (* INT64 *)


(* Z-Type bindings to operators, pervasives and primitives: *)


(* Range *) 

CONST [TMIN] minValue =
    { 0FFH, 0FFH, 0FFH, 0FFH, 0FFH, 0FFH, 0FFH, 0FFH };
(* Smallest value of type INT64.
   This value is bound to TMIN for type INT64. *) 

CONST [TMAX] maxValue =
    {    0,    0,    0,    0, 0FFH, 0FFH, 0FFH, 0FFH };
(* Largest value of type INT64.
   This value is bound to TMAX for type INT64. *)


(* Literal assignment *)

PROCEDURE [:=] assign ( VAR assignTo : INT64; literal : ARRAY OF CHAR );
(* Converts string literal to an INT64 value and assigns it to assignTo.
   This procedure is bound to the := operator for literal assignment. *)


(* Type conversions *)

PROCEDURE [::] toCARD  ( n : INT64 ) : CARDINAL;
(* Converts INT64 value n to a CARDINAL value and returns it. This
   function is bound to the :: operator for INT64 to CARDINAL conversion. *)

PROCEDURE [::] toINT ( n : INT64 ) : INTEGER; 
(* Converts INT64 value n to an INTEGER value and returns it. This
   function is bound to the :: operator for INT64 to INTEGER conversion. *)

PROCEDURE [::] fromCARD  ( n : CARDINAL ) : INT64;
(* Converts CARDINAL value n to an INT64 value and returns it. This function
   is bound to the :: operator for CARDINAL to INT64 conversion. *)

PROCEDURE [::] fromINT  ( n : INTEGER ) : INT64;
(* Converts INTEGER value n to an INT64 value and returns it. This function
   is bound to the :: operator for INTEGER to INT64 conversion. *)


(* Scalar conversion primitives *)

CONST maxSXFDigits = 16;
    (* maximum digits when converted to scalar exchange format *)

PROCEDURE [SXF] toSXF ( n : INT64; VAR s : ARRAY OF CHAR );
(* Converts INT64 value n to a string in scalar exchange format.
   This procedure is bound to pervasive primitive SXF for type INT64. *)

PROCEDURE [VAL] fromSXF ( CONST s : ARRAY OF CHAR; VAR n : INT64 );
(* Converts a string in scalar exchange format to an INT64 value.
   This procedure is bound to pervasive primitive VAL for type INT64. *)


(* Monadic arithmetic operations *) 

PROCEDURE [ABS] abs ( n : INT64 ) : INT64;
(* Returns the absolute value of INT64 value n.
   This function is bound to pervasive function ABS for type INT64. *)

PROCEDURE [NEG] neg ( n : INT64 ) : INT64;
(* Returns the sign reversed value of INT64 value n.
   This function is bound to the unary minus operator for type INT64. *)

PROCEDURE [ODD] odd ( n : INT64 ) : BOOLEAN;
(* Returns TRUE if INT64 value n is odd, otherwise FALSE.
   This function is bound to pervasive function ODD for type INT64. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( n1, n2 : INT64 ) : INT64;
(* Adds INT64 values n1 and n2 and returns the result.
   This function is bound to the + operator for type INT64. *)

PROCEDURE [-] sub ( n1, n2 : INT64 ) : INT64;
(* Subtracts INT64 value n2 from n1 and returns the result.
   This function is bound to the - operator for type INT64. *)

PROCEDURE [*] multiply ( n1, n2 : INT64 ) : INT64;
(* Multiplies INT64 values n1 and n2 and returns the result.
   This function it bound to the * operator for type INT64. *)

PROCEDURE [/] divide ( n1, n2 : INT64 ) : INT64;
(* Divives INT64 value n1 by n2 and returns the result.
   This function is bound to the / operator for type INT64. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( n1, n2 : INT64 ) : BOOLEAN;
(* Returns TRUE if INT64 values n1 and n2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type INT64. *)

PROCEDURE [<] isLess ( n1, n2 : INT64 ) : BOOLEAN;
(* Returns TRUE if INT64 value n1 is less than n2, otherwise FASLE.
   This function is bound to operators < and >= for type INT64. *)

PROCEDURE [>] isGreater ( n1, n2 : INT64 ) : BOOLEAN;
(* Returns TRUE if INT64 value n1 is greater than n2, otherwise FALSE.
   This function is bound to operators > and <= for type INT64. *)


(* IO operations *)

PROCEDURE Read( infile : File; VAR n : INT64 );
(* Reads the textual representation of an INT64 value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the numeral being read are
     removed from infile
   - the numeric value of the numeral string read is assigned to the variable
     passed in for n
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with an INT64 argument. *)

PROCEDURE Write( outfile : File; CONST n : INT64 );
(* Writes the textual representation of value n to stream outfile. This
   procedure is substituted for invocations of WRITE with an INT64 argument.*)

PROCEDURE WriteF ( outfile      : File;
                   CONST fmtStr : ARRAY OF CHAR;
                   items        : VARIADIC OF CONST INT64 );
(* Writes a formatted textual representation of one or more INT64 values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   INT64 arguments. *)

END INT64. (* sixty-four *)