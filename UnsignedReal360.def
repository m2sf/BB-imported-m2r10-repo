(* (C) 2009, 2010 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE UnsignedReal360 [RTYPE];

(* Unsigned Real Number Type With Values from 0.0 to 359.9999999 *) 


FROM FileIO IMPORT File; (* required for IO *)


(* UnsignedReal360 type *)

TYPE
    UnsignedReal360 = OPAQUE RECORD
        value : ARRAY 4 OF OCTET; (* 32 bits *)
    END; (* UnsignedReal360 *)

    (* no sign, 32-bit significand, fixed decimal point *)


(* R-Type bindings to operators, pervasives and primitives: *)


(* Range *) 

CONST [TMIN] minValue = 0.0000000;
(* Smallest value of type UnsignedReal360.
   This value is bound to TMIN for type UnsignedReal360. *) 

CONST [TMAX] maxValue = +359.9999999;
(* Largest value of type UnsignedReal360.
   This value is bound to TMAX for type UnsignedReal360. *)


(* Literal assignment *)

PROCEDURE [:=] assign ( VAR assignTo : UnsignedReal360; literal : ARRAY OF CHAR );
(* Converts string literal to a UnsignedReal360 value and assigns it to assignTo.
   This procedure is bound to the := operator for literal assignment. *)


(* Type conversions *)

PROCEDURE [::] toCARD  ( r : UnsignedReal360 ) : CARDINAL;
(* Converts UnsignedReal360 value r to a CARDINAL value and returns it.
   This function is bound to the :: operator for UnsignedReal360 to CARDINAL
   conversion. *)

PROCEDURE [::] toINT ( r : UnsignedReal360 ) : INTEGER; 
(* Converts UnsignedReal360 value r to an INTEGER value and returns it.
   This function is bound to the :: operator for UnsignedReal360 to INTEGER
   conversion. *)

PROCEDURE [::] toREAL ( r : UnsignedReal360 ) : REAL;
(* Converts UnsignedReal360 value r to a REAL value and returns it.
   This function is bound to the :: operator for UnsignedReal360 to REAL
   conversion. *)


(* Scalar conversion primitives *)

CONST maxSXFDigits = 8;
    (* maximum digits when converted to scalar exchange format *)

PROCEDURE [SXF] toSXF ( r : UnsignedReal360; VAR s : ARRAY OF CHAR );
(* Converts UnsignedReal360 value r to a string in scalar exchange format.
   This procedure is bound to pervasive primitive SXF for type
   UnsignedReal360. *)

PROCEDURE [VAL] fromSXF ( CONST s : ARRAY OF CHAR; VAR r : UnsignedReal360 );
(* Converts a string in scalar exchange format to an UnsignedReal360 value.
   This procedure is bound to pervasive primitive VAL for type
   UnsignedReal360. *)


(* Monadic arithmetic operations *) 

PROCEDURE floor ( r : UnsignedReal360 ) : UnsignedReal360;
(* Returns the floor value of r. *)

PROCEDURE ceil ( r : UnsignedReal360 ) : UnsignedReal360;
(* Returns the ceiling value of r. *)

PROCEDURE frac ( r : UnsignedReal360 ) : UnsignedReal360;
(* Returns the fractional part of r. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( r1, r2 : UnsignedReal360 ) : UnsignedReal360;
(* Adds UnsignedReal360 values r1 and r2 and returns the result.
   This function is bound to the + operator for type UnsignedReal360. *)

PROCEDURE [-] sub ( r1, r2 : UnsignedReal360 ) : UnsignedReal360;
(* Subtracts UnsignedReal360 value r2 from r1 and returns the result.
   This function is bound to the - operator for type UnsignedReal360. *)

PROCEDURE multiply ( r : UnsignedReal360; n : CARDINAL ) : UnsignedReal360;
(* Multiplies UnsignedReal360 value r by scalar n and returns the result. *)

PROCEDURE divide ( r : UnsignedReal360; n : CARDINAL ) : UnsignedReal360;
(* Divives UnsignedReal360 value r by scalar n and returns the result. *)

PROCEDURE trunc ( r : UnsignedReal360; n : CARDINAL ) : UnsignedReal360;
(* Returns the value of r truncated to n decimal places. *)

PROCEDURE round ( r : UnsignedReal360; n : CARDINAL ) : UnsignedReal360;
(* Returns the value of r rounded to n decimal places. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( r1, r2 : UnsignedReal360 ) : BOOLEAN;
(* Returns TRUE if UnsignedReal360 values r1 and r2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type UnsignedReal360. *)

PROCEDURE [<] isLess ( r1, r2 : UnsignedReal360 ) : BOOLEAN;
(* Returns TRUE if UnsignedReal360 value r1 is less than r2, otherwise FALSE.
   This function is bound to operators < and >= for type UnsignedReal360. *)

PROCEDURE [>] isGreater ( r1, r2 : UnsignedReal360 ) : BOOLEAN;
(* Returns TRUE if UnsignedReal360 value r1 is greater than r2, otherwise FALSE.
   This function is bound to operators > and <= for type UnsignedReal360. *)


(* IO operations *)

PROCEDURE Read( infile : File; VAR r : UnsignedReal360 );
(* Reads the textual representation of a UnsignedReal360 value from input
   stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the numeral being read are
     removed from infile
   - the numeric value of the numeral string read is assigned to the variable
     passed in for r
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput.
     This procedure is substituted for invocations of READ with an
     UnsignedReal360 argument.*)

PROCEDURE Write( outfile : File; r : UnsignedReal360 );
(* Writes the textual representation of value r to output stream outfile.
   This procedure is substituted for invocations of WRITE with an
   UnsignedReal360 argument.*)

PROCEDURE WriteF ( outfile      : File;
                   CONST fmtStr : ARRAY OF CHAR;
                   items        : VARIADIC OF UnsignedReal360 );
(* Writes a formatted textual representation of one or more UnsignedReal360
   values to output stream outfile. The output format is determined by fmtStr.
   This procedure is substituted for invocations of WRITEF with one or more
   UnsignedReal360 arguments. *)

END UnsignedReal360.