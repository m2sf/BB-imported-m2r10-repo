Contents of the Modula-2 R10 Repository [status: July 6, 2010]

* GRAMMAR *

Modula2.g             complete grammar in ANTLRv3 EBNF
ScalarExchangeFormat  grammar of the internal scalar exchange format
modula2_syntax_diagrams.tcl
                      script to generate syntax diagrams for Modula-2 R10
SyntaxDiagrams        generated syntax diagram files in postscript format


* LANGUAGE *

Language.txt          language specification in plain text format


* PSEUDO_MODULES *

ATOMIC.def            provides atomic intrinsics
SYSTEM.def            access to system dependent resources
RUNTIME.def           interface to the Modula-2 runtime system
COMPILER.def          interface to the Modula-2 compile-time system
ASSEMBLER.def         access to target dependent inline assember (optional)
PERVASIVES.def        documents pervasive constants, types and macros 
BINDINGS.def          documents procedure headers required for bindings 


* REFERENCE_COMPILER *

General utilities:

check_build_env.h     macros for host OS and compiler, enforcing use of C99
common.h              macros for commonly used types and primitives
alloc.h               macro based interface to C storage allocator

Embedded libraries:

ASCII.h               macro library for ASCII character set codes and tests
hash.h                macro library for incremental 32-bit hash calculation
KVS.h                 key/value storage library interface
KVS.c                 key/value storage library implementation

Compiler parameters:

m2_build_params.h     user adjustable build parameters
m2_table_of_tokens.h  table of tokens and their numeric values
m2_table_of_reserved_words.h  table of reserved word identifiers and hashes
m2_table_of_builtin_identifiers.h  table of pervasive identifiers and hashes
m2_table_of_pragma_names.h  table of pragma name identifiers and hashes
m2_table_of_productions.h  table of productions and their FIRST and FOLLOW sets
m2_first_and_follow.h  FIRST and FOLLOW set element lists

Compiler modules:

m2_tokens.h          token enumeration and token name interface
m2_tokens.c          convert tokens to human readable names
m2_reserved_words.h  reserved word enumeration and reserved word name interface
m2_reserved_words.c  convert reserved words to human readable names
m2_productions.h     production enumeration and production name interface
m2_productions.c     convert productions to human readable names
m2_tokenset.h        token set interface
m2_tokenset.c        token set implementation
m2_lexer.h           lexer interface
m2_lexer.c           lexer implementation
m2_parser.h          parser interface
m2_parser.c          parser implementation
m2_pragma_parser.h   pragma parser interface
m2_pragma_parser.c   pragma parser implementation
m2_symbol_table.h    symbol table interface
m2_symbol_table.c    symbol table implementation
m2_ast.h             abstract syntax tree builder/walker interface
m2_ast.c             abstract syntax tree builder/walker implementation
m2_code_generator.h  code generator interface
m2_code_generator.c  code generator implementation
m2_notifications.h   errors and warnings notification handler interface
m2_notifications.c   errors and warnings notification handler implementation
m2_filenames.h       filesystem independent filename handling interface
m2_filenames.c       filesystem independent filename handling implementation
m2_fileio.h          compiler input and output files abstraction interface
m2_fileio.h          compiler input and output files abstraction implementation
m2_errmsg.h          human readable error message generator interface
m2_errmsg.c          human readable error message generator implementation
m2r10c.c             compiler driver (main program)
Makefile             make file for building the compiler


* STANDARD_LIBRARY *

Templates:

Stack.def             generic stack template
Queue.def             generic queue template
DEQ.def               generic double ended queue template
PriorityQueue.def     generic priority queue template
AATree.def            generic AA tree template
SplayTree.def         generic Splay tree template
PatriciaTrie.def      generic Patricia trie template
DynamicArray.def      generic dynamic array template
KeyValueStore.def     generic key value storage template
NonZeroIndexArray.def generic non-zero index array type template

Prototypes:

ZTYPE.def             defines semantic properties for whole number ADTs
RTYPE.def             defines semantic properties for real number ADTs
CTYPE.def             defines semantic properties for complex number ADTs
VTYPE.def             defines semantic properties for numeric vector ADTs
ArrayType.def         defines semantic properties for static array ADTs
SetType.def           defines semantic properties for static set ADTs
DateType.def          defines semantic properties for date-time ADTs
StringType.def        defines semantic properties for dynamic string ADTs
CollectionType.def    defines semantic properties for dynamic collection ADTs

Memory Management:

Storage.def           dynamic memory allocator

Exceptions and termination:

Exceptions.def        exception handling
Termination.def       termination handling

Filesystem:

Filesystem.def        file system operations using absolute paths
DefaultDir.def        file system operations relative to a working directory
Pathnames.def         operating system independent pathname operations

File IO:

FileIO.def            file oriented input and output
TextIO.def            text file based input and output
RegexIO.def           regular expression based input and output
Scanner.def           primitives for scanning text files
Terminal.def          terminal based input and output

System Type IO:

BYTE.def              IO module for type BYTE
WORD.def              IO module for type WORD
ADDRESS.def           IO module for type ADDRESS

Pervasive Type IO:

PervasiveIO.def       aggregator module to import all pervasive IO modules
BOOLEAN.def           IO module for type BOOLEAN
BITSET.def            IO module for type BITSET
LONGBITSET.def        IO module for type LONGBITSET
CHAR.def              IO module for type CHAR
ARRAYOFCHAR.def       IO module for ARRAY OF CHAR types
UNICHAR.def           IO module for type UNICHAR
ARRAYOFUNICHAR.def    IO module for ARRAY OF CHAR types
OCTET.def             IO module for type OCTET
CARDINAL.def          IO module for type CARDINAL
LONGCARD.def          IO module for type LONGCARD
INTEGER.def           IO module for type INTEGER
LONGINT.def           IO module for type LONGINT
REAL.def              IO module for type REAL
LONGREAL.def          IO module for type LONGREAL

Library defined types:

BS16.def              16-bit bitset type
BS32.def              32-bit bitset type
BS64.def              64-bit bitset type
BS128.def             128-bit bitset type
CARD16.def            16-bit unsigned integer type
CARD32.def            32-bit unsigned integer type
CARD64.def            64-bit unsigned integer type
CARD128.def           128-bit unsigned integer type
INT16.def             16-bit signed integer type
INT32.def             32-bit signed integer type
INT64.def             64-bit signed integer type
INT128.def            128-bit signed integer type
BCD.def               single precision binary coded decimals
LONGBCD.def           double precision binary coded decimals
COMPLEX.def           single precision complex number type
LONGCOMPLEX.def       double precision complex number type
CHARSET.def           character set type
STRING.def            dynamic ASCII strings
UNISTRING.def         dynamic unicode strings
UnsignedReal1.def     real number type with values from 0.0 to 1.0
UnsignedReal60.def    real number type with values from 0.0 to 59.999
UnsignedReal360.def   real number type with values from 0.0 to 359.9999999

Alias types:

Bitsets.def           alias types for bitsets with guaranteed widths
Cardinals.def         alias types for unsigned integers with guaranteed widths
Integers.def          alias types for signed integers with guaranteed widths
SHORTBITSET.def       alias type for bitset with smallest width
LONGLONGBITSET.def    alias type for bitset with largest width
SHORTCARD.def         alias type for unsigned integers with smallest width
LONGLONGCARD.def      alias type for unsigned integers with largest width
SHORTINT.def          alias type for signed integers with smallest width
LONGLONGINT.def       alias type for signed integers with largest width

Math:

RealMath.def          mathematic constants and functions for type REAL
LongRealMath.def      mathematic constants and functions for type LONGREAL
BCDMath.def           mathematic constants and functions for type BCD
LongBCDMath.def       mathematic constants and functions for type LONGBCD
ComplexMath.def       mathematic constants and functions for type COMPLEX
LongComplexMath.def   mathematic constants and functions for type LONGCOMPLEX

Text:

ASCII.def             mnemonics and macro-functions for ASCII characters
Regex.def             Modula-2 regular expression library
RegexConv.def         conversion library for regular expression syntax

Date & Time:

TZ.def                time zone offsets and abbreviations
Time.def              compound time with day, hour, minute, sec/msec components
DateTime.def          compound calendar date and time
TimeUnits.def         date and time base units
SysClock.def          interface to the system clock

Legacy:

LegacyPIM.def         selected legacy PIM functions and procedures
LegacyISO.def         selected legacy ISO functions and procedures


* Examples *

Dictionary.def        example of a library defined associative array of strings
ExampleVector.def     example of a vector ADT
