(* (C) 2009-2016 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE UNSAFE;

(* Pseudo-module for Access to Unsafe or Non-Portable Features *)


(* Implementation defined types *)

CONST
  OctetsPerByte = <implementation defined value>;
  (* size of an abstract byte, measured in octets *)

  BytesPerWord = <implementation defined value>;
  (* size of an abstract word, measured in bytes *)


TYPE BYTE = RECORD (* abstract byte *)
* BARE ARRAY OctetsPerByte OF OCTET;
END; (* BYTE *)

TYPE WORD = OPAQUE RECORD (* abstract word *)
* BARE ARRAY BytesPerWord OF BYTE;
END; (* WORD *)

TYPE ADDRESS = POINTER TO OCTET;

TYPE WORDADDR = POINTER TO WORD;


(* Information about the target architecture *)

CONST
  TargetName =  <target dependent string value>;
  (* name of the target architecture *)

  BigEndian = 03210H;
  (* constant for 3-2-1-0 byte order *)

  LittleEndian = 0123H;
  (* constant for 0-1-2-3 byte order *)

  BigLittleEndian = 02301H;
  (* constant for 2-3-0-1 byte order *)

  LittleBigEndian = 02103H;
  (* constant for 2-1-0-3 byte order *)

  TargetByteOrder = <target dependent value>;
  (* byte order of the target architecture *)

  TargetIsBigEndian = <target dependent boolean value>;
  (* TRUE if the target is big-endian, otherwise FALSE *)


(* General low-level facilities *)

PROCEDURE ADR ( var : <AnyType> ) : ADDRESS;
(* Returns the address of variable var. *)

PROCEDURE CAST ( <TargetTypeIdentifier>; val : <AnyType> ) : <TargetType>;
(* Returns the value of val, cast to the target type,
   val may be a variable, a constant or a literal. *)


(* Machine level operations *)

TYPE INTRINSIC = ( ADD, SUB, ADDC, SUBC, FETCHADD, FETCHSUB,
                   SHL, SHR, ASHR, ROTL, ROTR, ROTLC, ROTRC,
                   BWNOT, BWAND, BWOR, BWXOR, BWNAND, BWNOR,
                   SETBIT, TESTBIT, LSBIT, MSBIT, CSBITS);

PROCEDURE AVAIL ( intrinsic : INTRINSIC; bitwidth : CARDINAL ) : BOOLEAN;
(* Returns TRUE if the given intrinsic is available for the given bitwidth,
   otherwise FALSE. The value of bitwidth must be a compile time expression.*)


(* Machine level arithmetic *)

PROCEDURE ADD ( VAR x : <AnyType>; y : <AnyType> );
(* Adds operand y to operand x,  ignoring overflow.
   The bit widths of the operand types must match.
   The bit pattern of y is interpreted as an unsigned number. *)

PROCEDURE SUB ( VAR x : <AnyType>; y : <AnyType> );
(* Subtracts operand y from operand x, ignoring overflow.
   The bit widths of the operand types must match.
   The bit pattern of y is interpreted as an unsigned number. *)

PROCEDURE ADDC ( VAR x : <AnyType>; y : <AnyType>; VAR c : BOOLEAN );
(* Adds operand y to operand x,  adds 1 if TRUE is passed in for c,
   then passes the result back in x and the resulting carry bit back in c.
   The bit widths of the operand types of x and y must match.
   The bit pattern of y is interpreted as an unsigned number. *)

PROCEDURE SUBC ( VAR x : <AnyType>; y : <AnyType>; VAR c : BOOLEAN );
(* Subtracts operand y from operand x,  adds 1 if TRUE is passed in for c,
   then passes the result back in x and the resulting carry bit back in c.
   The bit widths of the operand types of x and y must match.
   The bit pattern of y is interpreted as an unsigned number. *)

PROCEDURE FETCHADD ( VAR x : <AnyType>; y : <AnyType> ) : TypeOf(x);
(* Atomically adds operand y to operand x and returns the prior value of x,
   ignoring overflow.  The bitwidths of the operand types must match.
   The bit pattern of y is interpreted as an unsigned number. *)

PROCEDURE FETCHSUB ( VAR x : <AnyType>; y : <AnyType> ) : TypeOf(x);
(* Atomically subtracts operand y from operand x and returns the prior value
   of x,  ignoring overflow.  The bitwidths of the operand types must match.
   The bit pattern of y is interpreted as an unsigned number. *)


(* Shift operations *)

PROCEDURE SHL ( x : <AnyType>; n : OCTET ) : <TypeOf(x)>;
(* Returns the value of operand x shifted left by n bits. *)

PROCEDURE SHR ( x : <AnyType>; n : OCTET ) : <TypeOf(x)>;
(* Returns the value of operand x logically shifted right by n bits. *)

PROCEDURE ASHR ( x : <AnyType>; n : OCTET ) : <TypeOf(x)>;
(* Returns the value of operand x arithmetically shifted right by n bits. *)

PROCEDURE ROTL ( x : <AnyType>; n : OCTET ) : <TypeOf(x)>;
(* Returns the value of operand x rotated left by n bits. *)

PROCEDURE ROTR ( x : <AnyType>; n : OCTET ) : <TypeOf(x)>;
(* Returns the value of operand x rotated right by n bits. *)

PROCEDURE ROTLC ( x : <AnyType>; VAR c : <TypeOf(x)>; n : OCTET ) : <TypeOf(x)>;
(* Returns the value of operand x rotated left by n bits,
   rotating through n bits of c, passing the rotated out bits back in c. *)

PROCEDURE ROTRC ( x : <AnyType>; VAR c : <TypeOf(x)>; n : OCTET ) : <TypeOf(x)>;
(* Returns the value of operand x rotated right by n bits,
   rotating through n bits of c, passing the rotated out bits back in c. *)


(* Bitwise operations *)

PROCEDURE BWNOT ( x : <AnyType> ) : <TypeOf(x)>;
(* Returns the bitwise logical NOT of operand x. *)

PROCEDURE BWAND ( x, y : <AnyType> ) : <TypeOf(x)>;
(* Returns the bitwise logical AND of operands x and y. *)

PROCEDURE BWOR ( x, y : <AnyType> ) : <TypeOf(x)>;
(* Returns the bitwise logical OR of operands x and y. *)

PROCEDURE BWXOR ( x, y : <AnyType> ) : <TypeOf(x)>;
(* Returns the bitwise logical exclusive OR of operands x and y. *)

PROCEDURE BWNAND ( x, y : <AnyType> ) : <TypeOf(x)>;
(* Returns the inverted bitwise logical AND of operands x and y. *)

PROCEDURE BWNOR ( x, y : <AnyType> ) : <TypeOf(x)>;
(* Returns the inverted bitwise logical OR of operands x and y. *)


(* Single bit operations *)

PROCEDURE SETBIT ( VAR x : <AnyType>; n : OCTET; bitval : BOOLEAN );
(* Sets bit n of x if bitval is TRUE, otherwise clears it. *)

PROCEDURE TESTBIT ( x : <AnyType>; n : OCTET ) : BOOLEAN;
(* Returns TRUE if bit n of x is set, otherwise FALSE. *)


(* Bit tests *)

PROCEDURE LSBIT ( x : <AnyType> ) : CARDINAL;
(* Returns the position of the least significant set bit of x. *)

PROCEDURE MSBIT ( x : <AnyType> ) : CARDINAL;
(* Returns the position of the most significant set bit of x. *)

PROCEDURE CSBITS ( x : <AnyType> ) : CARDINAL;
(* Counts and returns the number of set bits in x. *)


(* Miscellaneous *)

PROCEDURE UNWRET ( (* OPT *) x : <AnyType> );
(* Returns program control to the caller of the calling procedure and
   passes x as the return value, x must match the caller's return type. *)

PROCEDURE HALT ( status : <OrdinalType> );
(* Immediately aborts the running program and passes a status code to the
   operating environment, status codes are target platform dependent. *)


(* Optional facilities *)


(* Enabling unsafe pragmas *)

PRAGMA FFI;
(* If optional pragma FFI is supported, an import of module UNSAFE
   will enable the use of pragma FFI within the importing module. *)

PRAGMA ADDR;
(* If optional pragma ADDR is supported, an import of module UNSAFE
   will enable the use of pragma ADDR within the importing module. *)


(* Formal type for interfacing to untyped foreign variadic functions *)

TYPE VARGLIST;
(* VARGLIST denotes  the  formal type  of a  formal parameter  of an  untyped
   variadic parameter in a foreign function interface definition.  There  may
   be at most one untyped variadic parameter and it must be last. The type is
   only available in combination with pragma FFI and it may only be used as a
   formal type.  No aliases, derivatives, variables, casts or conversions. *)


(* Macro to count arguments passed to a formal parameter of type VARGLIST *)

(* MACRO *) PROCEDURE VARGC : <AnyWholeNumberType> ;
(* An invocation  of macro VARGC  within the actual parameter list  of a call
   to a foreign variadic function  is replaced by the  argument count  of the
   arguments passed  to a parameter of formal type VARGLIST.  Its replacement
   value is compatible with any predefined whole number type. Any use outside
   the actual parameter list of a foreign variadic function call will cause a
   compile time error. *)


(* Types for architectures not based on multiples of eight *)

CONST
  BitsPerMachineByte = <target dependent value>;
  (* size of smallest addressable unit, measured in bits *)

  MachineBytesPerMachineWord = <target dependent value>;
  (* size of of a machine word, measured in machine bytes *)

TYPE MACHINEBYTE;  (* target dependent byte *)

TYPE MACHINEWORD = RECORD (* target dependent word *)
* BARE ARRAY MachineBytesPerMachineWord OF MACHINEBYTE;
END; (* MACHINEWORD *)

END UNSAFE.