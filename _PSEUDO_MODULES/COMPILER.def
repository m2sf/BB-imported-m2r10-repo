(* (C) 2009-2012 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE COMPILER;

(* Compile-Time System Interface *)

(* All provided facilities are compile time expressions *)


(* Identity of the compiler *)

CONST
    Name = "<short name of compiler>";
    FullName = "<full name of compiler>";
    EditionName = "<name of compiler edition>";

    MajorVersion = <major version number>;
    MinorVersion = <minor version number>;
    SubMinorVersion = <sub-minor version number>;

    ReleaseYear = <four digit year of release>;
    ReleaseMonth = <two digit month of release>;
    ReleaseDay = <two digit day of release>;
    
    IsBootstrapSubset = <implementation defined boolean value>;


(* Optional compiler capabilities *)

CONST SupportsInlineAssembler = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pseudo-module ASSEMBLER *)

CONST SupportsUTF8EncodedSource = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma ENCODING *)

CONST SupportsCFFI = <implementation defined boolean value>;
(* Denotes whether the compiler provides an FFI to C *)

CONST SupportsFortranFFI = <implementation defined boolean value>;
(* Denotes whether the compiler provides an FFI to Fortran *)

CONST SupportsAlignmentControl = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma ALIGN *)

CONST SupportsBitPadding = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma PADBITS *)

CONST SupportsAddressMapping = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma ADDR *)

CONST SupportsRegisterMapping = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma REG *)

CONST SupportsVolatileAttribute = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma VOLATILE *)

CONST SupportsCVarArgFormatCheck = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma CVARGFMTCHK *)


(* Information about the implementation model of REAL and LONGREAL *)

TYPE IEEE754Support = ( None, Binary16, Binary32, Binary64, Binary128 );

CONST ImplModelOfTypeReal = <implementation defined value>;
(* Denotes the compiler's implementation model of type REAL *)

CONST ImplModelOfTypeLongReal = <implementation defined value>;
(* Denotes the compiler's implementation model of type LONGREAL *)


(* Compile Time Macros *)


(* Information about the compiling source *)

(* MACRO *) PROCEDURE MODNAME : ARRAY OF CHAR;
(* Expands to a string literal with the name of the enclosing module. *)

(* MACRO *) PROCEDURE PROCNAME : ARRAY OF CHAR;
(* Expands to a string literal with the name of the enclosing procedure. *)

(* MACRO *) PROCEDURE LINENO : CARDINAL;
(* Expands to a numeric value with the value of the current line number. *)


(* Introspection *)

(* MACRO *) PROCEDURE IsCompatibleWithType( <T>; var : <AnyType> ) : BOOLEAN;
(* Expands to TRUE if the type of variable <var> is compatible with type <T>,
   expands to FALSE otherwise. *)

(* MACRO *) PROCEDURE IsConvertibleToType( <T>; var : <AnyType> ) : BOOLEAN;
(* Expands to TRUE if the type of variable <var> is convertible to type <T>,
   expands to FALSE otherwise. *)

(* MACRO *) PROCEDURE IsExtensionOfType( <T>; var : <AnyType> ) : BOOLEAN;
(* Expands to TRUE if the type of variable <var> is an extension of type <T>,
   expands to FALSE otherwise. *)

(* MACRO *) PROCEDURE IsRefCountedType( <T> ) : BOOLEAN;
(* Expands to TRUE if type <T> has bindings to pervasives RETAIN and RELEASE,
   expands to FALSE otherwise. *)

(* MACRO *) PROCEDURE ConformsToPrototype( <P>; <T> ) : BOOLEAN;
(* Expands to TRUE if type <T> conforms to prototype <P>,
   expands to FALSE otherwise. *)


(* Compile Time Arithmetic *)

(* minimum of a list of constant expressions *)

(* MACRO *) PROCEDURE MIN ( constant : VARIADIC OF <T> ) : <T>;
(* Replaced by the smallest value of its variadic argument list,
   all arguments must be of the same ordinal or scalar type. *)


(* maximum of a list of constant expressions *)

(* MACRO *) PROCEDURE MAX ( constant : VARIADIC OF <T> ) : <T>;
(* Replaced by the largest value of its variadic argument list,
   all arguments must be of the same ordinal or scalar type. *)


(* power of two of a non-negative constant expression *)

(* MACRO *) PROCEDURE EXP2 ( constant : <T> ) : <T>;
(* Expands to the value of two raised to the power of its argument,
   the argument must be a non-negative whole number constant. *)


(* hash value of a string literal *)

(* MACRO *) PROCEDURE HASH ( literal : ARRAY OF CHAR ) : LONGCARD;
(* Expands to the hash value of a string literal, excluding the enclosing
   quotation marks, calculated by the compiler's internal hash function. *)


END COMPILER.