(* (C) 2009-2014 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE COMPILER;

(* Compile-Time System Interface *)

(* All provided facilities are compile time expressions *)


(* Identity of the compiler *)

CONST Name = <implementation defined, 7-bit character string;
(* Denotes the short name of the compiler *)

CONST FullName = <implementation defined, 7-bit character string>;
(* Denotes the full name of the compiler *)

CONST EditionName = <implementation defined, 7-bit character string>;
(* Denotes the name of the compiler edition *)

CONST MajorVersion = <implementation defined, whole number value>;
(* Denotes the major version number of the compiler *)

CONST MinorVersion = <implementation defined, whole number value>;
(* Denotes the minor version number of the compiler *)

CONST SubMinorVersion = <implementation defined, whole number value>;
(* Denotes the sub-minor version number of the compiler *)

CONST ReleaseYear = <implementation defined, whole number value>;
(* Denotes the four-digit year of release of the compiler *)

CONST ReleaseMonth = <implementation defined, whole number value>;
(* Denotes the month of release of the compiler, range 1 to 12 *)

CONST ReleaseDay = <implementation defined, whole number value>;
(* Denotes the day of release of the compiler, range 1 to 31 *)


(* Availability of optional compiler capabilities *)

CONST IsBootstrapSubset = <implementation defined, boolean value>;
(* Denotes whether the compiler provides a language subset for bootstrap. *)

CONST SupportsInlineCode = <implementation defined, boolean value>;
(* Denotes whether the compiler provides the optional CODE facility in
   pseudo-module ASSEMBLER. *)

CONST SupportsInlineAssembly = <implementation defined, boolean value>;
(* Denotes whether the compiler provides the optional ASM facility in
   pseudo-module ASSEMBLER. *)

CONST SupportsUTF8EncodedSource = <implementation defined, boolean value>;
(* Denotes whether the compiler provides optional pragma ENCODING. *)

CONST SupportsCFFI = <implementation defined, boolean value>;
(* Denotes whether the compiler provides an FFI to C. *)

CONST SupportsFortranFFI = <implementation defined, boolean value>;
(* Denotes whether the compiler provides an FFI to Fortran. *)

CONST SupportsAlignmentControl = <implementation defined, boolean value>;
(* Denotes whether the compiler provides optional pragma ALIGN. *)

CONST SupportsBitPadding = <implementation defined, boolean value>;
(* Denotes whether the compiler provides optional pragma PADBITS. *)

CONST SupportsAddressMapping = <implementation defined, boolean value>;
(* Denotes whether the compiler provides optional pragma ADDR. *)

CONST SupportsRegisterMapping = <implementation defined, boolean value>;
(* Denotes whether the compiler provides optional pragma REG. *)

CONST SupportsPurityAttribute = <implementation defined, boolean value>;
(* Denotes whether the compiler provides optional pragma, PURITY. *)

CONST SupportsVolatileAttribute = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma, VOLATILE. *)

CONST SupportsSingleAssignAttribute = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma, SINGLEASSIGN. *)


(* Information about the implementation model of REAL and LONGREAL *)

TYPE IEEE754Support = ( None, Binary16, Binary32, Binary64, Binary128 );

CONST ImplModelOfTypeReal = <implementation defined, IEEE754Support value>;
(* Denotes the compiler's implementation model of type REAL. *)

CONST ImplModelOfTypeLongReal = <implementation defined, IEEE754Support value>;
(* Denotes the compiler's implementation model of type LONGREAL. *)


(* Compile Time Macros *)


(* Information about the compiling source *)

(* MACRO *) PROCEDURE MODNAME : ARRAY OF CHAR;
(* Expands to a string literal with the name of the enclosing module. *)

(* MACRO *) PROCEDURE PROCNAME : ARRAY OF CHAR;
(* Expands to a string literal with the name of the enclosing procedure. *)

(* MACRO *) PROCEDURE LINENUM : CARDINAL;
(* Expands to a numeric value with the value of the current line number. *)


(* User Definable Compile Time Defaults *)

(* MACRO *) PROCEDURE DEFAULT ( key : ARRAY OF CHAR;
    fallback : <PredefinedOrdinalType>) : <PredefinedOrdinalType>;
(* If a value is stored for key in the compiler's user preferences, the
   macro expands to the stored value, otherwise to the fallback value. *)


(* Introspection *)

(* MACRO *) PROCEDURE IsCompatibleWithType( <T>; var : <AnyType> ) : BOOLEAN;
(* Expands to TRUE if the type of variable var is compatible with type T,
   expands to FALSE otherwise. *)

(* MACRO *) PROCEDURE IsConvertibleToType( <T>; var : <AnyType> ) : BOOLEAN;
(* Expands to TRUE if the type of variable var is convertible to type T,
   expands to FALSE otherwise. *)

(* MACRO *) PROCEDURE IsExtensionOfType( <T>; var : <AnyType> ) : BOOLEAN;
(* Expands to TRUE if the type of variable var is an extension of type T,
   expands to FALSE otherwise. *)

(* MACRO *) PROCEDURE IsMutableType( <T> ) : BOOLEAN;
(* Expands to TRUE if type T is a mutable type, otherwise FALSE.  By default
   all types are mutable.  An ADT that binds a constant of value FALSE to the
   assignment symbol is immutable. *)

(* MACRO *) PROCEDURE IsScalarType( <T> ) : BOOLEAN;
(* Expands to TRUE if type T is a scalar type, otherwise FALSE.  By default
   predefined numeric types are scalar, other types are not.  An ADT is scalar
   if it binds to any of TBASE, TPRECISION, TMINEXPONENT or TMAXEXPONENT. *)

(* MACRO *) PROCEDURE IsOrdinalType( <T> ) : BOOLEAN;
(* Expands to TRUE if type T is an ordinal type, otherwise FALSE.  By default
   predefined types BOOLEAN, CHAR, OCTET, CARDINAL, LONGCARD, INTEGER, LONGINT
   and all enumeration types are ordinal, other types are not.  A scalar ADT
   whose TMINEXPONENT and TMAXEXPONENT values are both zero is ordinal. *)

(* MACRO *) PROCEDURE IsDynamicType( <T> ) : BOOLEAN;
(* Expands to TRUE if type T is dynamically allocatable, otherwise FALSE. *)

(* MACRO *) PROCEDURE IsRefCountedType( <T> ) : BOOLEAN;
(* Expands to TRUE if type T is reference counted, otherwise FALSE.  No type
   is reference counted by default.  Only ADTs that bind to both RETAIN and
   RELEASE are reference counted. *)

(* MACRO *) PROCEDURE ConformsToBlueprint( <B>; <T> ) : BOOLEAN;
(* Expands to TRUE if type T conforms to blueprint B, otherwise FALSE. *)

(* Type Capability Tests *)

(* MACRO *) PROCEDURE TNIL ( <T> ) : BOOLEAN;
(* Expands to TRUE if type T supports NIL storage, otherwise FALSE. Type T
   must be an opaque collection type whose components are pointer values.
   A compile time error occurs if any other type is passed to TNIL. *)

(* MACRO *) PROCEDURE TBIDI ( <T> ) : BOOLEAN;
(* Expands to TRUE if type T supports bidirectional FOR loop iteration,
   otherwise FALSE. A compile time error occurs if T is not iterable. *)


(* Compile Time Arithmetic *)

(* Ordinal storage capacity of a given number of bits *)

(* MACRO *) PROCEDURE MaxOrd ( bits : <T> ) : <T>;
(* Expands to the largest ordinal number that can be represented in the num-
   ber of bits given by its argument.  T is a predefined whole number type. *)


(* Binary storage requirement for an ordinal value *)

(* MACRO *) PROCEDURE ReqBits ( ord : <T> ) : <T>;
(* Expands to the minimum number of bits required to represent the ordinal
   number given by its argument.   T is a predefined whole number type. *)

(* MACRO *) PROCEDURE ReqOctets ( ord : <T> ) : <T>;
(* Expands to the minimum number of octets required to represent the ordinal
   number given by its argument.  T is a predefined whole number type. *)


(* Unique ID of a type *)

TYPE UniqueTypeID = <implementation defined>;

(* MACRO *) PROCEDURE TypeID ( <T> ) : UniqueTypeID;
(* Expands to the implementation defined unique ID value of type T.
   NB: The unique ID of an alias type is that of its base type. *)


(* Hash value of a string literal *)

(* MACRO *) PROCEDURE HASH ( literal : ARRAY OF CHAR ) : LONGCARD;
(* Expands to the hash value of a string literal, excluding the enclosing
   quotation marks, calculated by the compiler's internal hash function. *)


(* Indicating Unimplemented Code *)

(* MACRO *) PROCEDURE TODO;
(* Empty statement to indicate unimplemented code.  When compiling in debug
   mode, the macro is automatically imported into every scope, otherwise not. *)


END COMPILER.