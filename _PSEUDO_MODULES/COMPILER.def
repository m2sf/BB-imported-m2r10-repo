(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE COMPILER;

(* Compile-Time System Interface *)

(* All provided facilities are compile time expressions *)


(* Identity of the compiler *)

CONST Name = <implementation defined 7-bit character string;
(* Denotes the short name of the compiler *)

CONST FullName = <implementation defined 7-bit character string>;
(* Denotes the full name of the compiler *)

CONST EditionName = <implementation defined 7-bit character string>;
(* Denotes the name of the compiler edition *)

CONST MajorVersion = <implementation defined whole number value>;
(* Denotes the major version number of the compiler *)

CONST MinorVersion = <implementation defined whole number value>;
(* Denotes the minor version number of the compiler *)

CONST SubMinorVersion = <implementation defined whole number value>;
(* Denotes the sub-minor version number of the compiler *)

CONST ReleaseYear = <implementation defined whole number value>;
(* Denotes the four-digit year of release of the compiler *)

CONST ReleaseMonth = <implementation defined whole number value>;
(* Denotes the month of release of the compiler, range 1 to 12 *)

CONST ReleaseDay = <implementation defined whole number value>;
(* Denotes the day of release of the compiler, range 1 to 31 *)


(* Availability of optional compiler capabilities *)

CONST IsBootstrapSubset = <implementation defined boolean value>;
(* Denotes whether the compiler provides a language subset for bootstrap. *)

CONST SupportsInlineCode = <implementation defined boolean value>;
(* Denotes whether the compiler provides the optional CODE facility in
   pseudo-module ASSEMBLER. *)

CONST SupportsInlineAssembly = <implementation defined boolean value>;
(* Denotes whether the compiler provides the optional ASM facility in
   pseudo-module ASSEMBLER. *)

CONST SupportsUTF8EncodedSource = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma ENCODING. *)

CONST SupportsCFFI = <implementation defined boolean value>;
(* Denotes whether the compiler provides an FFI to C. *)

CONST SupportsFortranFFI = <implementation defined boolean value>;
(* Denotes whether the compiler provides an FFI to Fortran. *)

CONST SupportsAlignmentControl = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma ALIGN. *)

CONST SupportsBitPadding = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma PADBITS. *)

CONST SupportsAddressMapping = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma ADDR. *)

CONST SupportsRegisterMapping = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma REG. *)

CONST SupportsPurityAttribute = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma PURITY. *)

CONST SupportsVolatileAttribute = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma VOLATILE. *)

CONST SupportsSingleAssignAttribute = <implementation defined boolean value>;
(* Denotes whether the compiler provides optional pragma SINGLEASSIGN. *)


(* Information about the implementation model of REAL and LONGREAL *)

TYPE IEEE754Support = ( None, Binary16, Binary32, Binary64, Binary128 );

CONST ImplModelOfTypeReal = <implementation defined value>;
(* Denotes the compiler's implementation model of type REAL. *)

CONST ImplModelOfTypeLongReal = <implementation defined value>;
(* Denotes the compiler's implementation model of type LONGREAL. *)


(* Compile Time Macros *)


(* Information about the compiling source *)

(* MACRO *) PROCEDURE MODNAME : ARRAY OF CHAR;
(* Expands to a string literal with the name of the enclosing module. *)

(* MACRO *) PROCEDURE PROCNAME : ARRAY OF CHAR;
(* Expands to a string literal with the name of the enclosing procedure. *)

(* MACRO *) PROCEDURE LINENUM : CARDINAL;
(* Expands to a numeric value with the value of the current line number. *)


(* Introspection *)

(* MACRO *) PROCEDURE IsCompatibleWithType( <T>; var : <AnyType> ) : BOOLEAN;
(* Expands to TRUE if the type of variable var is compatible with type T,
   expands to FALSE otherwise. *)

(* MACRO *) PROCEDURE IsConvertibleToType( <T>; var : <AnyType> ) : BOOLEAN;
(* Expands to TRUE if the type of variable var is convertible to type T,
   expands to FALSE otherwise. *)

(* MACRO *) PROCEDURE IsExtensionOfType( <T>; var : <AnyType> ) : BOOLEAN;
(* Expands to TRUE if the type of variable var is an extension of type T,
   expands to FALSE otherwise. *)

(* MACRO *) PROCEDURE IsRefCountedType( <T> ) : BOOLEAN;
(* Expands to TRUE if type T has bindings to pervasives RETAIN and RELEASE,
   expands to FALSE otherwise. *)

(* MACRO *) PROCEDURE ConformsToBlueprint( <B>; <T> ) : BOOLEAN;
(* Expands to TRUE if type T conforms to blueprint B,
   expands to FALSE otherwise. *)


(* Compile Time Arithmetic *)

(* Minimum of a list of constant expressions *)

(* MACRO *) PROCEDURE MIN ( constant : VARIADIC OF <T> ) : <T>;
(* Replaced by the smallest value of its variadic argument list,
   all arguments must be of the same ordinal or scalar type. *)


(* Maximum of a list of constant expressions *)

(* MACRO *) PROCEDURE MAX ( constant : VARIADIC OF <T> ) : <T>;
(* Replaced by the largest value of its variadic argument list,
   all arguments must be of the same ordinal or scalar type. *)


(* Ordinal storage capacity of a given number of bits *)

(* MACRO *) PROCEDURE MaxOrd ( bits : <T> ) : <T>;
(* Expands to the largest ordinal number that can be represented in the num-
   ber of bits given by its argument.  T is a pervasive whole number type. *)


(* Binary storage requirement for an ordinal value *)

(* MACRO *) PROCEDURE ReqBits ( ord : <T> ) : <T>;
(* Expands to the minimum number of bits required to represent the ordinal
   number given by its argument.   T is a pervasive whole number type. *)

(* MACRO *) PROCEDURE ReqOctets ( ord : <T> ) : <T>;
(* Expands to the minimum number of octets required to represent the ordinal
   number given by its argument.  T is a pervasive whole number type. *)


(* Unique ID of a type *)

TYPE UniqueTypeID = <implementation defined>;

(* MACRO *) PROCEDURE TypeID ( <T> ) : UniqueTypeID;
(* Expands to the implementation defined unique ID value of type T. *)


(* Hash value of a string literal *)

(* MACRO *) PROCEDURE HASH ( literal : ARRAY OF CHAR ) : LONGCARD;
(* Expands to the hash value of a string literal, excluding the enclosing
   quotation marks, calculated by the compiler's internal hash function. *)


(* Indicating Unimplemented Code *)

(* MACRO *) PROCEDURE TODO;
(* Empty statement to indicate unimplemented code. *)


END COMPILER.