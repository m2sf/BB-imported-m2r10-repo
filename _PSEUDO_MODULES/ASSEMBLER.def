(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE ASSEMBLER; (* OPTIONAL *)

(* Optional target dependent inline-assembler facility *)

(* This module provides  access to CPU registers,  a raw machine code inline
   facility and  a symbolic assembly inline facility with implementation de-
   fined assembly syntax.  Use of this module is  unsafe  and  non-portable.
   
   All facilities are optional, subject to the following constraints:
   
   o  module ASSEMBLER may not be provided void of any facilities
   o  type REGISTER is required for SETREG, GETREG and pragma REG
   o  SETREG and GETREG are required if macro CODE is provided
   o  SETREG and GETREG may only be provided as a pair *)


TYPE REGISTER = <target architecture dependent enumeration type>;

(* Type REGISTER is a target architecture dependent enumeration
   with mnemonics for the target architecture's registers.
   
   If the target architecture is Intel x86, it is defined as:
   
   REGISTER = ( ah, al, bh, bl, ch, cl, ax, bx, cx, dx, si, di, sp, bp,
    flags, cs, ds, ss, es, fs, gs, eax, ebx, ecx, edx, esi, edi, esp,
    ebp, eflags, rax, rbx, rcx, rdx, rsi, rdi, rsp, rbp, rflags, r8, r9,
    r10, r11, r12, r13, r14, r15, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5,
    xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,
    ymm0, ymm1, ymm2, ymm3, ymm4, ymm5, ymm6, ymm7, ymm8, ymm9, ymm10,
    ymm11, ymm12, ymm13, ymm14, ymm15 );
    
   If the target architecture is PowerPC, it is defined as:
   
   REGISTER = ( r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
    r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26,
    r27, r28, r29, r30, r31 );
   
   If the target architecture is ARM or TI MSP430, it is defined as:
   
   REGISTER = ( r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
    r13, r14, r15 );
   
   If the target architecture is SPARC, it is defined as:
   
   REGISTER = ( g0, g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12,
    g13, g14, g15, g16, g17, g18, g19, g20, g21, g22, g23, g24, g25, g26,
    g27, g28, g29, g30, g31 );
   
   Implementors of other target architectures are required to consult
   with the authors of the Modula-2 R10 language report to coordinate
   the definition of the enumeration of mnemonics of their respective
   architecture. The outcome will be published online from time to time. *)


(* Access to CPU registers *)

CONST REG; (* only available if pragma REG is supported *)
(* Import of constant REG  enables pragma REG  within the importing module.
   Constant has no value, cannot be used for any purpose other than import. *)

<*INLINE*> PROCEDURE SETREG( r : REGISTER; value : <ValueType> );
 (* Copies <value> to register <r> where <value> may be of any type
    as long as TSIZE(ValueType) does not exceed the bitwidth of <r>. *)

<*INLINE*> PROCEDURE GETREG( r : REGISTER; VAR value : <ValueType> );
 (* Copies the contents of <r> to <value> where <value> may be of any
    type as long as TSIZE(ValueType) does not exceed the bitwidth of <r>. *)


(* Raw machine code inline facilty *)

<*INLINE*> PROCEDURE CODE( <arglist> );
 (* Inserts the raw machine code represented by <arglist>.
    The EBNF for <arglist> is:
      arglist : code ( ',' code )* ;
      code : <any constant expression of type [0..255] OF CARDINAL> ;
    A compile time error occurs if any argument value is out of range. *)


(* Symbolic assembly code inline facility *)

CONST ASM; (* only available if symbolic assembly is supported *)
(* Import of constant ASM enables the optional symbolic assembler language
   extension within the importing module.  The constant has  no value  and
   cannot be used for any purpose other than import. *)

(* The EBNF for the symbolic assembly language extension is:
     assemblyBlock : ASM assemblySourceCode END ;
     assemblySourceCode : <implementation defined syntax> ;
   An assembly block is treated within Modula-2 source as a statement. *)

 
END ASSEMBLER.