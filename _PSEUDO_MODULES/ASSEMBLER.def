(* (C) 2009-2013 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE ASSEMBLER; (* OPTIONAL *)

(* Optional target dependent inline-assembler facility *)

(* This module provides  access to CPU registers,  a raw machine code inline
   facility and  a symbolic assembly inline facility with implementation de-
   fined assembly syntax.  Use of this module is  unsafe  and  non-portable.
   
   All facilities are optional, subject to the following constraints:
   
   o  module ASSEMBLER may not be provided void of any facilities
   o  type REGISTER is required for SETREG, GETREG and pragma REG
   o  SETREG and GETREG are required if macro CODE is provided
   o  SETREG and GETREG may only be provided as a pair *)


TYPE REGISTER = <target architecture dependent enumeration type>;

(* Type REGISTER is a target architecture dependent enumeration
   with mnemonics for the target architecture's registers.
   
   For target architecture ARM, it is defined as:
   
   REGISTER = ( r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
    r13, r14, r15 );
   
   For target architecture Atmel AVR, it is defined as:
   
   REGISTER = ( r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
    r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26,
    r27, r28, r29, r30, r31, x, y, z, rampx, rampy, rampz, rampd, eind ); 
         
   For target architecture Intel MCS-51 (aka 8051), it is defined as:
   
   REGISTER = ( a, b, r0, r1, r2, r3, r4, r6, r7, dp, sp, psw );
   
   For target architecture Intel x86, it is defined as:
   
   REGISTER = ( ah, al, bh, bl, ch, cl, ax, bx, cx, dx, si, di, sp, bp,
    flags, cs, ds, ss, es, fs, gs, eax, ebx, ecx, edx, esi, edi, esp,
    ebp, eflags, rax, rbx, rcx, rdx, rsi, rdi, rsp, rbp, rflags, r8, r9,
    r10, r11, r12, r13, r14, r15, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5,
    xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,
    ymm0, ymm1, ymm2, ymm3, ymm4, ymm5, ymm6, ymm7, ymm8, ymm9, ymm10,
    ymm11, ymm12, ymm13, ymm14, ymm15 );
   
   For target architecture MicroBlaze, it is defined as:
   
   REGISTER = ( r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
    r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26,
    r27, r28, r29, r30, r31, pc, msr, ear, esr, btr, fsr, edr, pid, zpr,
    tlblo, tlbhi, tlbx, tlbsx, pvr0, pvr1, pvr2, pvr3, pvr4, pvr5, pvr6,
    pvr7, pvr8, pvr9, pvr10, pvr11 );
   
   For target architecture MIPS, it is defined as:
   
   REGISTER = ( r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
    r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26,
    r27, r28, r29, r30, r31, zero, at, v0, v1, a0, a1, a2, a3, t0, t1,
    t2, t3, t4, t5, t6, t7, s0, s1, s2, s3, s4, s5, s6, s7, t8, t9, k0,
    k1, gp, sp, fp, ra, s8 );
   
   For target architecture M68K and ColdFire, it is defined as:
   
   REGISTER = ( d0, d1, d2, d3, d4, d5, d6, d7, a0, a1, a2, a3, a4, a5,
    a6, a7, a7tick, sp, usp, ssp, pc, ccr );
 
   For target architecture TI MSP430, it is defined as:
   
   REGISTER = ( r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
    r13, r14, r15 );
   
   For target architecture NIOS II, it is defined as:
   
   REGISTER = ( r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
    r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26,
    r27, r28, r29, r30, r31, zero, at, et, bt, gp, sp, fp, ea, ba, ra );
   
   For target architecture PowerPC, it is defined as:
   
   REGISTER = ( r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
    r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26,
    r27, r28, r29, r30, r31 );
   
   For target architecture SPARC, it is defined as:
   
   REGISTER = ( g0, g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12,
    g13, g14, g15, g16, g17, g18, g19, g20, g21, g22, g23, g24, g25, g26,
    g27, g28, g29, g30, g31 );
   
   For target architecture Z80/eZ80, it is defined as:
   
   REGISTER = ( A, F, B, C, D, E, H, L, Atick, Ftick, Btick, Ctick,
    Dtick, Etick, Htick, Ltick, BC, DE, HL, BCtick, DEtick, HLtick,
    PC, SPS, SPL, I, MBASE, ADL, MADL, IEF1, IEF2, R, IXH, IXL, IXL,
    IYL, IX, IY );
   
   Last and also very least, for target architecture Intel Itanium,
   the anti-thesis of Wirthian design, and in clear and undeniable
   violation of Einsteinian simplicity, it is defined as:
   
   REGISTER = ( r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
    r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26,
    r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40,
    r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54,
    r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68,
    r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82,
    r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96,
    r97, r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108,
    r109, r110, r111, r112, r113, r114, r115, r116, r117, r118, r119,
    r120, r121, r122, r123, r124, r125, r126, r127, f0, f1, f2, f3, f4,
    f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19,
    f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33,
    f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45, f46, f47,
    f48, f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61,
    f62, f63, f64, f65, f66, f67, f68, f69, f70, f71, f72, f73, f74, f75,
    f76, f77, f78, f79, f80, f81, f82, f83, f84, f85, f86, f87, f88, f89,
    f90, f91, f92, f93, f94, f95, f96, f97, f98, f99, f100, f101, f102,
    f103, f104, f105, f106, f107, f108, f109, f110, f111, f112, f113,
    f114, f115, f116, f117, f118, f119, f120, f121, f122, f123, f124,
    f125, f126, f127, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11,
    b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25,
    b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39,
    b40, b41, b42, b43, b44, b45, b46, b47, b48, b49, b50, b51, b52, b53,
    b54, b55, b56, b57, b58, b59, b60, b61, b62, b63 );
      
   Implementors of other target architectures are required to consult
   with the authors of the Modula-2 R10 language report to coordinate
   the definition of the enumeration of mnemonics of their respective
   architecture. The outcome will be published online from time to time. *)


(* Access to CPU registers *)

CONST REG; (* only available if pragma REG is supported *)
(* Import of constant REG  enables pragma REG  within the importing module.
   Constant has no value, cannot be used for any purpose other than import. *)

<*INLINE*> PROCEDURE SETREG( r : REGISTER; value : <ValueType> );
 (* Copies <value> to register <r> where <value> may be of any type
    as long as TSIZE(ValueType) does not exceed the bitwidth of <r>. *)

<*INLINE*> PROCEDURE GETREG( r : REGISTER; VAR value : <ValueType> );
 (* Copies the contents of <r> to <value> where <value> may be of any
    type as long as TSIZE(ValueType) does not exceed the bitwidth of <r>. *)


(* Raw machine code inline facility *)

<*INLINE*> PROCEDURE CODE( <arglist> );
 (* Inserts the raw machine code represented by <arglist>.
    The EBNF for <arglist> is:
      arglist : code ( ',' code )* ;
      code : <any constant expression of type [0..255] OF CARDINAL> ;
    A compile time error occurs if any argument value is out of range. *)


(* Symbolic assembly code inline facility *)

CONST ASM; (* only available if symbolic assembly is supported *)
(* Import of constant ASM enables the optional symbolic assembler language
   extension within the importing module.  The constant has  no value  and
   cannot be used for any purpose other than import. *)

(* The EBNF for the symbolic assembly language extension is:
     assemblyBlock : ASM assemblySourceCode END ;
     assemblySourceCode : <implementation defined syntax> ;
   An assembly block is treated within Modula-2 source as a statement. *)

 
END ASSEMBLER.