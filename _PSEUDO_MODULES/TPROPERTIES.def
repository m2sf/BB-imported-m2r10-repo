(* (C) 2015 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE TPROPERTIES;

(* Classification *)

TYPE PROPERTY =
  ( isComputational, isNumber, isScalar, isCountable, isSigned,
    isCollection, isIndexed, isRigid, isSet, isMultiSet, isDict, isMultiDict );

(* Literal Compatibility *)

TYPE LITERAL =
  ( charLiteral, unicharLiteral, stringLiteral, unistringLiteral,
    wholeNumberLiteral, realNumberLiteral );


(* Querying Classification Properties *)

(* MACRO *) PROCEDURE TPROPERTY ( T : <TypeIdent>; p : PROPERTY ) : BOOLEAN;
(* Replaced by TRUE if type T has property p, otherwise FALSE. *)


(* Querying Literal Compatibility *)

(* MACRO *) PROCEDURE TLITERAL ( T : <TypeIdent>; L : LITERAL ) : BOOLEAN;
(* Replaced by TRUE if literal L is compatible with type T, otherwise FALSE. *)


(* Querying Built-in Status *)

(* MACRO *) PROCEDURE TBUILTIN ( T : <TypeIdent> ) : BOOLEAN;
(* Replaced by TRUE if type T is a built-in type
   or an alias or a subrange of a built-in type, otherwise FALSE. *)


(* Querying Memory Management Properties *)

(* MACRO *) PROCEDURE TDYN ( T : <TypeIdent> ) : BOOLEAN;
(* Replaced by TRUE if type T uses dynamic allocation, otherwise FALSE. *)

(* MACRO *) PROCEDURE TREFC ( T : <TypeIdent> ) : BOOLEAN;
(* Replaced by TRUE if type T is reference counted, otherwise FALSE. *)


(* Querying Collection Properties *)

(* MACRO *) PROCEDURE TNIL ( T : <CollectionTypeIdent> ) : BOOLEAN;
(* Replaced by TRUE if type T supports storage of NIL as a value,
   otherwise FALSE. *)

(* For macro TLIMIT, see documentation module PREDEFINED.def *)

(* Any invocation of the above macro with an argument that is not an
   identifier of a collection type will cause a compile time error. *)


(* Querying Scalar Properties *)

(* MACRO *) PROCEDURE TBASE ( T : <ScalarTypeIdent> ) : CARDINAL;
(* Replaced by the radix of type T. *)

(* MACRO *) PROCEDURE TPRECISION ( T : <ScalarTypeIdent> ) : CARDINAL;
(* Replaced by the precision of type T.*)

(* The precision of a scalar is the number of digits of the longest
   significand that can be encoded by the type.  The replacement
   value always indicates the digits for the radix of the type. *)

(* MACRO *) PROCEDURE TMINEXP ( T : <ScalarTypeIdent> ) : INTEGER;
(* Replaced by the smallest exponent that can be encoded by type T.
   The value is zero for countable types. *)

(* MACRO *) PROCEDURE TMAXEXP ( T : <ScalarTypeIdent> ) : CARDINAL;
(* Replaced by the largest exponent that can be encoded by type T.
   The value is zero for countable types. *)

(* For macros TMIN and TMAX, see documentation module PREDEFINED.def *)

(* Any invocation of scalar property macros with an argument that is
   not an identifier of a scalar type will cause a compile time error. *)


END TPROPERTIES.