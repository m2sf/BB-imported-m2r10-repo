(* (C) 2009, 2010 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE RUNTIME;

(* Runtime System Interface *)

FROM SYSTEM IMPORT ADDRESS;


(* Runtime System Facilities *)

TYPE Facility = ( StackTrace, PostMortem, SystemReset );


(* Runtime System Faults *)

TYPE RTSFault = ( DivByZero, DerefNIL, TypeOverflow, IndexOutOfBounds,
                  StringCapacityExceeded, StackOverflow, OutOfMemory,
                  UserAbort );

(* Notification Handler For Runtime System Faults *)

TYPE NotificationHandler = PROCEDURE ( ADDRESS, ADDRESS );
(* This is a type definition for a callback function.
   Notification handler procedures must accept two parameters:
     - the address of the PC at which the offending event occured
     - the address of the SP at which the offending event occured *)


(* Raising Runtime System Faults *)

(* MACRO *) PROCEDURE RaiseRTSFault( f : RTSFault );
(* Raises runtime system fault f. Causes program abort. Never returns. *)


(* Runtime System Notification Services *)

PROCEDURE InstallNotificationHandler( f : RTSFault; p : NotificationHandler );
(* Installs handler p as notification handler for runtime system fault f. *)

PROCEDURE InstallInitHasFinishedHandler( p : PROCEDURE );
(* Installs p as the program's post-initialisation handler. The installed
   handler is called immediately after module initialisation has finished. *)

PROCEDURE InstallWillTerminateHandler( p : PROCEDURE );
(* Installs p as the program's pre-termination handler. The installed
   handler is called immdediately before the program's termination handler. *)

PROCEDURE InstallTerminationHandler( p : PROCEDURE );
(* Installs p as the program's termination handler. The installed handler
   is called immediately before the program terminates. *)


(* Runtime System Facilities *)

PROCEDURE IsAvailable( f : Facility ) : BOOLEAN;
(* Returns TRUE if the runtime system provides facility f, FALSE otherwise *)

PROCEDURE InitiateStackTrace;
(* Aborts the currently running program and writes a stack trace dump *)

PROCEDURE SetStackTrace( enabled : BOOLEAN );
(* Enables stack trace dumps on abort if enabled is TRUE, disables otherwise. *)

PROCEDURE StackTraceEnabled : BOOLEAN;
(* Returns the current stack trace mode, TRUE if enabled, FALSE otherwise. *)

PROCEDURE InitiatePostMortem;
(* Aborts the currently running program and writes a post mortem dump
   The format of this is implementation dependent. *)

PROCEDURE SetPostMortem( enabled : BOOLEAN );
(* Enables post mortem dumps on abort if enabled is TRUE, disables otherwise. *)

PROCEDURE PostMortemEnabled : BOOLEAN;
(* Returns the current post mortem mode, TRUE if enabled, FALSE otherwise. *)


(* Runtime System Facilities for embedded and self-hosting platforms *)

PROCEDURE InitiateSystemReset;
(* Aborts the currently running system image and restarts, i.e. reboots *)

PROCEDURE SetSystemReset( enabled : BOOLEAN );
(* Enables system reset on abort if enabled is TRUE, disables otherwise. *)

PROCEDURE SystemResetEnabled : BOOLEAN;
(* Returns the current system reset mode, TRUE if enabled, FALSE otherwise. *)

END RUNTIME.