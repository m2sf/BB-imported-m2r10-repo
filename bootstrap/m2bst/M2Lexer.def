(*!m2pim*) (* Copyright (c) 2015 B.Kowarsch. All rights reserved. *)

DEFINITION MODULE M2Lexer;

(* Lexer for Modula-2 R10 Bootstrap Compiler *)

FROM M2Symbol IMPORT Symbol;

FROM M2Filename IMPORT Filename;


(* Lexer Handle *)

TYPE Lexer (* = OPAQUE *);


(* Return Status *)

TYPE Status =
  ( success,
    alreadyInitialised,
    unableToAllocate,
    illegalSymbolFound,
    unescapedBackslash,
    illegalCharInCharOrString,
    endOfLineInCharOrString,
    lexemeCapacityExceded,
    commentNestingLimitExceded,
    prematureEndOfFile );


(* Operations *)

PROCEDURE new ( VAR lexer : Lexer; filename : Filename; VAR s : Status );
 (* Create newly allocated and initialised lexer instance associated with
    source file filename.  Passes back the status of the operation in s. *)

PROCEDURE getSym ( lexer : Lexer; VAR sym, next : Symbol );
(* Passes back the current lookahead symbol in current and consumes it.
   Passes back the new lookahead symbol in next without consuming it. *)

PROCEDURE consumeSym ( lexer : Lexer );
(* Consumes the current lookahead symbol. *)

PROCEDURE lookaheadSym ( lexer : Lexer ) : Symbol;
(* Returns the current lookahead symbol without consuming it. *)

PROCEDURE errorCount ( lexer : Lexer ) : CARDINAL;
 (* Returns the lexer's accumulated error count. *)

PROCEDURE getStatus ( lexer : Lexer; VAR s : Status );
(* Passes the status of the last operation back in s. *)

PROCEDURE release ( VAR lexer : Lexer );
 (* Release lexer instance. Passes back NIL in lexer if successful. *)


END M2Lexer.