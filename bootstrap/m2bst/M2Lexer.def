(*!m2pim*) (* Copyright (c) 2015 B.Kowarsch. All rights reserved. *)

DEFINITION MODULE M2Lexer;

(* Lexer for Modula-2 R10 Bootstrap Compiler *)

FROM M2Tokens IMPORT Token;

FROM M2TokenSets IMPORT TokenSet;

FROM M2Symbol IMPORT Symbol;


(* Lexer Handle *)

TYPE Lexer (* = OPAQUE *);


(* Return Status *)

TYPE Status =
  ( success,
    unableToAllocate,
    illegalSymbolFound,
    unescapedBackslash,
    illegalCharInCharOrString,
    endOfLineInCharOrString,
    lexemeCapacityExceded,
    commentNestingLimitExceded,
    prematureEndOfFile );


(* Operations *)

PROCEDURE new ( VAR lexer : Lexer );
(* Creates a new lexer instance. Passes NIL back if unsuccessful. *)

PROCEDURE getSym ( lexer : Lexer; VAR current, next : Symbol );
(* Passes back the current lookahead symbol in current and consumes it.
   Passes the new lookahead symbol in next without consuming it. *)

PROCEDURE consumeSym ( lexer : Lexer );
(* Consumes the current lookahead symbol. *)

PROCEDURE lookaheadSym ( lexer : Lexer ) : Symbol;
(* Returns the current lookahead symbol without consuming it. *)

PROCEDURE getStatus ( lexer : Lexer; VAR s : Status );
(* Passes the status of the last operation back in s. *)

PROCEDURE release ( VAR lexer : Lexer );
(* Releases a lexer instance. Passes NIL back if successful. *)


END M2Lexer.