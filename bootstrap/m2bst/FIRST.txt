FIRST Sets for Modula-2 R10 Grammar, status: Aug 31, 2015

compilationUnit =
  { DEFINITION,
    IMPLEMENTATION,
    MODULE,
    BLUEPRINT };
  
definitionModule =
  { DEFINITION };
  
importList =
  { GENLIB,
    FROM,
    IMPORT };

libGenDirective =
  { GENLIB };
  
importDirective =
  { FROM,
    IMPORT };

qualident =
  { Identifier };

definition =
  { CONST,
    TYPE,
    VAR,
    PROCEDURE };

constDefinition =
  { lbracket,
    asterisk,
    Identifier };

typeDefinition =
  { asterisk,
    Ident };

variableDeclaration =
  { Identifier };

identList =
  { Identifier };

range =
  { lbracket };

type =
  { Identifier,
    ALIAS,
    lbracket,
    CONST,
    lparen,
    SET,
    ARRAY,
    RECORD,
    POINTER,
    COROUTINE,
    PROCEDURE };

enumType =
  { lparen };

setType =
  { SET };

arrayType =
  { ARRAY };

recordType =
  { RECORD };

fieldList =
  { asterisk,
    Identifier };

indeterminateField =
  { tilde };

pointerType =
  { POINTER };

coroutineType =
  { COROUTINE };

procedureType =
  { PROCEDURE };

simpleFormalType =
  { ARRAY,
    Identifier,
    CAST };

attributedFormalType =
  { CONST,
    VAR,
    NEW };

simpleVariadicFormalType =
  { ARGLIST };

variadicFormalType =
  { CONST,
    VAR,
    NEW,
    ARRAY,
    Identifier,
    CAST };

procedureHeader =
  { PROCEDURE };

formalParameters =
  { Identifier,
    CONST,
    VAR,
    NEW };  

attributedFormalParams =
  { CONST,
    VAR,
    NEW };

variadicFormalParams =
  { ARGLIST };

nonVariadicFormalParams =
  { CONST,
    VAR,
    NEW,
    Identifier };

implOrPrgmModule =
  { IMPLEMENTATION,
    MODULE };

block =
  { CONST,
    TYPE,
    VAR,
    PROCEDURE,
    BEGIN,
    END };

statementSequence =
  { NEW,
    RETAIN,
    RELEASE,
    Identifier,
    COPY,
    IF,
    CASE,
    LOOP,
    WHILE,
    REPEAT,
    FOR,
    RETURN,
    YIELD,
    EXIT };

statement =
  { NEW,
    RETAIN,
    RELEASE,
    Identifier,
    COPY,
    IF,
    CASE,
    LOOP,
    WHILE,
    REPEAT,
    FOR,
    RETURN,
    YIELD,
    EXIT };

memMgtOperation =
  { NEW,
    RETAIN,
    RELEASE };

updateOrProcCall =
  { Identifier,
    COPY };

ifStatement =
  { IF };

caseStatement =
  { CASE };

loopStatement =
  { LOOP };

whileStatement =
  { WHILE };

repeatStatement =
  { REPEAT };

forStatement =
  { FOR };

designator =
  { Identifier };

expression =
  { plus,
    minus,
    NOT,
    Number,
    String,
    lbrace,
    lparen,
    Identifier };

simpleExpression =
  { plus,
    minus,
    NOT,
    Number,
    String,
    lbrace,
    lparen,
    Identifier };

term =
  { NOT,
    Number,
    String,
    lbrace,
    lparen,
    Identifier };

factorOrNegation =
  { NOT,
    Number,
    String,
    lbrace,
    lparen,
    Identifier };

factorOrTypeConv =
  { Number,
    String,
    lbrace,
    lparen,
    Identifier };

factor =
  { Number,
    String,
    lbrace,
    lparen,
    Identifier };

actualParameters =
  { lparen };

expressionList =
  { plus,
    minus,
    NOT,
    Number,
    String,
    lbrace,
    lparen,
    Identifier };

structuredValue =
  { lbrace };

blueprint =
  { BLUEPRINT };

typeClassification =
  { lbrace,
    asterisk };

literalCompatibility =
  { TLITERAL };

structuredProtoLiteral =
  { lbrace };

constraint =
  { lparen,
    lbracket };

requirement =
  { NOT,
    Identifier };

constRequirement =
  { CONST };

propertyToBindTo =
  { TDYN,
    TREFC,
    TORDERED,
    TSORTED,
    TLIMIT,
    TSCALAR,
    TMAX,
    TMIN,
    TFLAGS };

procRequirement =
  { PROCEDURE };

entityToBindTo =
  { NEW,
    RETAIN,
    RELEASE,
    COPY,
    FOR,
    plus,
    minus,
    asterisk,
    realDiv,
    backslash,
    equal,
    less,
    greater,
    asterDot,
    typeConv,
    IN,
    DIV,
    MOD,
    plusMinus,
    ABS,
    LENGTH,
    EXISTS,
    SEEK,
    SUBSET,
    READ,
    READNEW,
    WRITE,
    WRITEF,
    SXF,
    VAL,
    COUNT,
    VALUE,
    STORE,
    INSERT,
    REMOVE,
    APPEND };
  
END OF FILE