(*!m2pim*) (* Copyright (c) 2015 B.Kowarsch. All rights reserved. *)

DEFINITION MODULE LowLevelFileIO;

(* Simple File IO library *)

TYPE File (* = OPAQUE *);

TYPE Mode = ( read, write, append );

TYPE Status = ( success, failure ); (* TO DO: refine *)


(* Operations *)

(* Support for an operation depends on the mode in which the file has
 * been opened. Any attempt to carry out an unsupported operation will
 * fail with status failure.
 *
 * operation     supported in file mode
 *               read    write   append
 * ------------------------------------
 * open          yes     yes     yes
 * close         yes     yes     yes
 * getMode       yes     yes     yes
 * getStatus     yes     yes     yes
 * getPos        yes     yes     no
 * setPos        yes     no      no
 * eof           yes     no      no
 * readBytes     yes     no      no
 * readChars     yes     no      no
 * writeBytes    no      yes     yes
 * writeChars    no      yes     yes
 * ------------------------------------
 *)


(* Open and close *)

PROCEDURE open
  ( VAR f : File; filename : ARRAY OF CHAR; mode : Mode; VAR s : Status );
(* Opens file filename in mode. Passes file handle in f and status in s.
   If the file does not exist, it will be created when opened in write mode,
   otherwise status failure is passed back in s.  When opening an already
   existing file in write mode, all of its current contents are replaced. *)

PROCEDURE close ( VAR f : File; s : Status );
(* Closes file associated with file handle f. Passes status in s. *)


(* Introspection *)

PROCEDURE getMode ( f : File; VAR m : Mode );
(* Passes the mode of file f in m. *)

PROCEDURE getStatus ( f : File; VAR s : Status );
(* Passes the status of the last operation on file f in s. *)


(* Positioning *)

PROCEDURE getPos ( f : File; VAR pos : LONGCARD );
(* Passes the current reading or writing position of file f in pos. *)

PROCEDURE setPos ( f : File; pos : LONGCARD );
(* Sets the reading position of file f to pos. *)

PROCEDURE eof ( f : File ) : BOOLEAN;
(* Returns TRUE if the end of file f has been reached, otherwise FALSE. *)


(* IO operations *)

PROCEDURE readBytes
  ( f : File; VAR buffer : ARRAY OF BYTE; VAR bytesRead : LONGCARD );
(* Reads contents starting at the current reading position of file f into
   buffer until either buffer is full or eof is reached. The number of bytes
   actually read is passed in bytesRead. *)

PROCEDURE readChars
  ( f : File; VAR buffer : ARRAY OF CHAR; VAR charsRead : LONGCARD );
(* Reads contents starting at the current reading position of file f into
   buffer until either the pen-ultimate index of buffer is written or eof
   is reached. The buffer is then terminated with ASCII NUL. The number of
   characters actually read is passed in charsRead. *)

PROCEDURE writeBytes
  ( f : File; buffer : ARRAY OF BYTE; VAR bytesWritten : LONGCARD );
(* Writes the contents of buffer at the current writing position to file f.
   The number of bytes actually written is passed in bytesWritten. *)

PROCEDURE writeChars
  ( f : File; buffer : ARRAY OF CHAR; VAR charsWritten : LONGCARD );
(* Writes the contents of buffer up to and excluding the first ASCII NUL
   character code at the current writing position to file f.
   The number of characters actually written is passed in charsWritten. *)


END LowLevelFileIO.