(* (C) 2009, 2010 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE CARD64 [ZTYPE];

(* 64-bit Unsigned Integer Numbers *) 


FROM FileIO IMPORT File; (* required for IO *)


(* CARD64 type *)

TYPE
    CARD64 = OPAQUE RECORD
        value : ARRAY 8 OF OCTET; (* 64 bits *)
    END; (* CARD64 *)


(* Z-Type bindings to operators, pervasives and primitives: *)


(* Range *) 

CONST [TMIN] minValue = 0;
(* Smallest value of type CARD64.
   This value is bound to TMIN for type CARD64. *) 

CONST [TMAX] maxValue =
    { 0FFH, 0FFH, 0FFH, 0FFH, 0FFH, 0FFH, 0FFH, 0FFH };
(* Largest value of type CARD64.
   This value is bound to TMAX for type CARD64. *)


(* Literal assignment *)

PROCEDURE [:=] assign ( VAR assignTo : CARD64; literal : ARRAY OF CHAR );
(* Converts string literal to a CARD64 value and assigns it to assignTo.
   This procedure is bound to the := operator for literal assignment. *)


(* Type conversions *)

PROCEDURE [::] toCARD  ( n : CARD64 ) : CARDINAL;
(* Converts CARD64 value n to a CARDINAL value and returns it. This
   function is bound to the :: operator for CARD64 to CARDINAL conversion.*)

PROCEDURE [::] toINT ( n : CARD64 ) : INTEGER; 
(* Converts CARD64 value n to an INTEGER value and returns it. This
   function is bound to the :: operator for CARD64 to INTEGER conversion. *)

PROCEDURE [::] fromCARD  ( n : CARDINAL ) : CARD64;
(* Converts CARDINAL value n to a CARD64 value and returns it. This function
   is bound to the :: operator for CARDINAL to CARD64 conversion. *)

PROCEDURE [::] fromINT  ( n : INTEGER ) : CARD64;
(* Converts INTEGER value n to a CARD64 value and returns it. This function
   is bound to the :: operator for INTEGER to CARD64 conversion. *)


(* Scalar conversion primitives *)

CONST maxSXFDigits = 16;
    (* maximum digits when converted to scalar exchange format *)

PROCEDURE [SXF] toSXF ( n : CARD64; VAR s : ARRAY OF CHAR );
(* Converts CARD64 value n to a string in scalar exchange format.
   This procedure is bound to pervasive primitive SXF for type CARD64. *)

PROCEDURE [VAL] fromSXF ( CONST s : ARRAY OF CHAR; VAR n : CARD64 );
(* Converts a string in scalar exchange format to a CARD64 value.
   This procedure is bound to pervasive primitive VAL for type CARD64. *)


(* Monadic arithmetic operations *) 

PROCEDURE [ABS] abs ( n : CARD64 ) : CARD64;
(* Returns the absolute value of CARD64 value n.
   This function is bound to pervasive function ABS for type CARD64. *)

PROCEDURE [ODD] odd ( n : CARD64 ) : BOOLEAN;
(* Returns TRUE if CARD64 value n is odd, otherwise FALSE.
   This function is bound to pervasive function ODD for type CARD64. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( n1, n2 : CARD64 ) : CARD64;
(* Adds CARD64 values n1 and n2 and returns the result.
   This function is bound to the + operator for type CARD64. *)

PROCEDURE [-] sub ( n1, n2 : CARD64 ) : CARD64;
(* Subtracts CARD64 value n2 from n1 and returns the result.
   This function is bound to the - operator for type CARD64. *)

PROCEDURE [*] multiply ( n1, n2 : CARD64 ) : CARD64;
(* Multiplies CARD64 values n1 and n2 and returns the result.
   This function it bound to the * operator for type CARD64. *)

PROCEDURE [/] divide ( n1, n2 : CARD64 ) : CARD64;
(* Divives CARD64 value n1 by n2 and returns the result.
   This function is bound to the / operator for type CARD64. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( n1, n2 : CARD64 ) : BOOLEAN;
(* Returns TRUE if CARD64 values n1 and n2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type CARD64. *)

PROCEDURE [<] isLess ( n1, n2 : CARD64 ) : BOOLEAN;
(* Returns TRUE if CARD64 value n1 is less than n2, otherwise FASLE.
   This function is bound to operators < and >= for type CARD64. *)

PROCEDURE [>] isGreater ( n1, n2 : CARD64 ) : BOOLEAN;
(* Returns TRUE if CARD64 value n1 is greater than n2, otherwise FALSE.
   This function is bound to operators > and <= for type CARD64. *)


(* IO operations *)

PROCEDURE Read( infile : File; VAR n : CARD64 );
(* Reads the textual representation of a CARD64 value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the numeral being read are
     removed from infile
   - the numeric value of the numeral string read is assigned to the variable
     passed in for n
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   procedure is substituted for invocations of READ with a CARD64 argument. *)

PROCEDURE Write( outfile : File; CONST n : CARD64 );
(* Writes the textual representation of value n to stream outfile. This
   procedure is substituted for invocations of WRITE with a CARD64 argument.*)

PROCEDURE WriteF ( outfile      : File;
                   CONST fmtStr : ARRAY OF CHAR;
                   items        : VARIADIC OF CONST CARD64 );
(* Writes a formatted textual representation of one or more BYTE values to
   output stream outfile. The output format is determined by fmtStr. This
   procedure is substituted for invocations of WRITEF with one or more
   CARD64 arguments. *)

END CARD64. (* sixty-four *)