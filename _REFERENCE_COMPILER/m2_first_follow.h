/*! Modula-2 R10 Compiler (m2r10c)
 *
 *  @file  m2_first_follow.h
 *  @brief Lists of elements of FIRST and FOLLOW sets
 *
 *  @attention
 *  The data in this file is generated by gen_first_and_follow_sets.c
 *
 *  @b Copyright: (C) 2010 B.Kowarsch. All rights reserved.
 *
 *  @b License:
 *
 *  Permission is hereby granted to review and test this software for the sole
 *  purpose of supporting the effort by the licensor  to implement a reference
 *  compiler for  Modula-2 R10.  It is not permissible under any circumstances
 *  to  use the software  for the purpose  of creating derivative languages or 
 *  dialects.  This permission is valid until 31 December 2010, 24:00h GMT.
 *
 *  Future licensing:
 *
 *  The licensor undertakes  to release  this software  under a BSD-style open
 *  source license  AFTER  the M2R10 language definition has been finalised.
 *  
 */


#ifndef M2_FIRST_FOLLOW_H
#define M2_FIRST_FOLLOW_H


// FIRST set lists

#define FIRST_LIST_for_compilation_unit \
    4, \
    TOKEN_DEFINITION, \
    TOKEN_IMPLEMENTATION, \
    TOKEN_MODULE, \
    TOKEN_PROTOTYPE

#define FIRST_LIST_for_prototype \
    1, \
    TOKEN_PROTOTYPE

#define FIRST_LIST_for_program_module \
    1, \
    TOKEN_MODULE

#define FIRST_LIST_for_definition_of_module \
    1, \
    TOKEN_DEFINITION

#define FIRST_LIST_for_implementation_of_module \
    1, \
    TOKEN_IMPLEMENTATION

#define FIRST_LIST_for_required_binding \
    1, \
    TOKEN_PROCEDURE

#define FIRST_LIST_for_bindable_operator \
    15, \
    TOKEN_DIV, \
    TOKEN_FOR, \
    TOKEN_IN, \
    TOKEN_MOD, \
    TOKEN_ASTERISK_OP, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_SLASH_OP, \
    TOKEN_ASSIGN_OP, \
    TOKEN_LESS_OP, \
    TOKEN_EQUAL_OP, \
    TOKEN_GREATER_OP, \
    TOKEN_STORAGE_PSEUDO_OP, \
    TOKEN_REMOVAL_PSEUDO_OP, \
    TOKEN_RETRIEVAL_PSEUDO_OP

#define FIRST_LIST_for_import_list \
    2, \
    TOKEN_FROM, \
    TOKEN_IMPORT

#define FIRST_LIST_for_block \
    5, \
    TOKEN_BEGIN, \
    TOKEN_CONST, \
    TOKEN_PROCEDURE, \
    TOKEN_TYPE, \
    TOKEN_VAR

#define FIRST_LIST_for_declaration \
    4, \
    TOKEN_CONST, \
    TOKEN_PROCEDURE, \
    TOKEN_TYPE, \
    TOKEN_VAR

#define FIRST_LIST_for_definition \
    4, \
    TOKEN_CONST, \
    TOKEN_PROCEDURE, \
    TOKEN_TYPE, \
    TOKEN_VAR

#define FIRST_LIST_for_const_declaration \
    1, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_type \
    10, \
    TOKEN_ALIAS, \
    TOKEN_ARRAY, \
    TOKEN_ASSOCIATIVE, \
    TOKEN_POINTER, \
    TOKEN_PROCEDURE, \
    TOKEN_RECORD, \
    TOKEN_SET, \
    TOKEN_IDENTIFIER, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACKET

#define FIRST_LIST_for_range \
    1, \
    TOKEN_OPENING_BRACKET

#define FIRST_LIST_for_enumeration_type \
    1, \
    TOKEN_OPENING_PARENTHESIS

#define FIRST_LIST_for_array_type \
    2, \
    TOKEN_ARRAY, \
    TOKEN_ASSOCIATIVE

#define FIRST_LIST_for_record_type \
    1, \
    TOKEN_RECORD

#define FIRST_LIST_for_field_list_sequence \
    1, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_field_list \
    1, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_set_type \
    1, \
    TOKEN_SET

#define FIRST_LIST_for_pointer_type \
    1, \
    TOKEN_POINTER

#define FIRST_LIST_for_procedure_type \
    1, \
    TOKEN_PROCEDURE

#define FIRST_LIST_for_formal_type_list \
    6, \
    TOKEN_ARRAY, \
    TOKEN_CAST, \
    TOKEN_CONST, \
    TOKEN_VAR, \
    TOKEN_VARIADIC, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_formal_type \
    6, \
    TOKEN_ARRAY, \
    TOKEN_CAST, \
    TOKEN_CONST, \
    TOKEN_VAR, \
    TOKEN_VARIADIC, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_simple_formal_type \
    3, \
    TOKEN_ARRAY, \
    TOKEN_CAST, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_attributed_formal_type \
    3, \
    TOKEN_CONST, \
    TOKEN_VAR, \
    TOKEN_VARIADIC

#define FIRST_LIST_for_non_variadic_formal_type_list \
    5, \
    TOKEN_ARRAY, \
    TOKEN_CAST, \
    TOKEN_CONST, \
    TOKEN_VAR, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_non_variadic_formal_type \
    5, \
    TOKEN_ARRAY, \
    TOKEN_CAST, \
    TOKEN_CONST, \
    TOKEN_VAR, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_variable_declaration \
    1, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_procedure_declaration \
    1, \
    TOKEN_PROCEDURE

#define FIRST_LIST_for_procedure_header \
    1, \
    TOKEN_PROCEDURE

#define FIRST_LIST_for_formal_param_list \
    3, \
    TOKEN_CONST, \
    TOKEN_VAR, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_formal_params \
    3, \
    TOKEN_CONST, \
    TOKEN_VAR, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_variadic_attribute \
    1, \
    TOKEN_VARIADIC

#define FIRST_LIST_for_non_variadic_formal_param_list \
    3, \
    TOKEN_CONST, \
    TOKEN_VAR, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_non_variadic_formal_params \
    3, \
    TOKEN_CONST, \
    TOKEN_VAR, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_statement \
    9, \
    TOKEN_CASE, \
    TOKEN_EXIT, \
    TOKEN_FOR, \
    TOKEN_IF, \
    TOKEN_LOOP, \
    TOKEN_REPEAT, \
    TOKEN_RETURN, \
    TOKEN_WHILE, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_statement_sequence \
    9, \
    TOKEN_CASE, \
    TOKEN_EXIT, \
    TOKEN_FOR, \
    TOKEN_IF, \
    TOKEN_LOOP, \
    TOKEN_REPEAT, \
    TOKEN_RETURN, \
    TOKEN_WHILE, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_assignment_or_procedure_call \
    1, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_if_statement \
    1, \
    TOKEN_IF

#define FIRST_LIST_for_case_statement \
    1, \
    TOKEN_CASE

#define FIRST_LIST_for_case \
    9, \
    TOKEN_CAST, \
    TOKEN_NOT, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_case_labels \
    9, \
    TOKEN_CAST, \
    TOKEN_NOT, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_while_statement \
    1, \
    TOKEN_WHILE

#define FIRST_LIST_for_repeat_statement \
    1, \
    TOKEN_REPEAT

#define FIRST_LIST_for_loop_statement \
    1, \
    TOKEN_LOOP

#define FIRST_LIST_for_for_statement \
    1, \
    TOKEN_FOR

#define FIRST_LIST_for_const_expression \
    9, \
    TOKEN_CAST, \
    TOKEN_NOT, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_bool_const_term \
    9, \
    TOKEN_CAST, \
    TOKEN_NOT, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_bool_const_factor \
    9, \
    TOKEN_CAST, \
    TOKEN_NOT, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_rel_const_expr \
    8, \
    TOKEN_CAST, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_relation \
    7, \
    TOKEN_IN, \
    TOKEN_NOT_EQUAL_OP, \
    TOKEN_LESS_OP, \
    TOKEN_LESS_OR_EQUAL_OP, \
    TOKEN_EQUAL_OP, \
    TOKEN_GREATER_OP, \
    TOKEN_GREATER_OR_EQUAL_OP

#define FIRST_LIST_for_simple_const_expr \
    8, \
    TOKEN_CAST, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_add_operator \
    2, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP

#define FIRST_LIST_for_const_term \
    6, \
    TOKEN_CAST, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_mul_operator \
    4, \
    TOKEN_DIV, \
    TOKEN_MOD, \
    TOKEN_ASTERISK_OP, \
    TOKEN_SLASH_OP

#define FIRST_LIST_for_const_factor \
    6, \
    TOKEN_CAST, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_designator \
    1, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_designator_tail \
    2, \
    TOKEN_POINTER_DEREF_OP, \
    TOKEN_OPENING_BRACKET

#define FIRST_LIST_for_expression_list \
    9, \
    TOKEN_CAST, \
    TOKEN_NOT, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_expression \
    9, \
    TOKEN_CAST, \
    TOKEN_NOT, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_bool_term \
    9, \
    TOKEN_CAST, \
    TOKEN_NOT, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_bool_factor \
    9, \
    TOKEN_CAST, \
    TOKEN_NOT, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_rel_expression \
    8, \
    TOKEN_CAST, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_simple_expression \
    8, \
    TOKEN_CAST, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_term \
    6, \
    TOKEN_CAST, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_factor \
    6, \
    TOKEN_CAST, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_designator_or_procedure_call \
    1, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_actual_parameters \
    1, \
    TOKEN_OPENING_PARENTHESIS

#define FIRST_LIST_for_const_structured_value \
    1, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_const_value_component \
    9, \
    TOKEN_CAST, \
    TOKEN_NOT, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_structured_value \
    1, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_value_component \
    9, \
    TOKEN_CAST, \
    TOKEN_NOT, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FIRST_LIST_for_qualident \
    1, \
    TOKEN_IDENTIFIER

#define FIRST_LIST_for_ident_list \
    1, \
    TOKEN_IDENTIFIER


// FOLLOW set lists

#define FOLLOW_LIST_for_compilation_unit \
    1, \
    TOKEN_EOF_MARKER

#define FOLLOW_LIST_for_prototype \
    1, \
    TOKEN_EOF_MARKER

#define FOLLOW_LIST_for_program_module \
    1, \
    TOKEN_EOF_MARKER

#define FOLLOW_LIST_for_definition_of_module \
    1, \
    TOKEN_EOF_MARKER

#define FOLLOW_LIST_for_implementation_of_module \
    1, \
    TOKEN_EOF_MARKER

#define FOLLOW_LIST_for_required_binding \
    3, \
    TOKEN_CONST, \
    TOKEN_END, \
    TOKEN_PROCEDURE

#define FOLLOW_LIST_for_bindable_operator \
    1, \
    TOKEN_CLOSING_BRACKET

#define FOLLOW_LIST_for_import_list \
    6, \
    TOKEN_BEGIN, \
    TOKEN_CONST, \
    TOKEN_END, \
    TOKEN_PROCEDURE, \
    TOKEN_TYPE, \
    TOKEN_VAR

#define FOLLOW_LIST_for_block \
    1, \
    TOKEN_IDENTIFIER

#define FOLLOW_LIST_for_declaration \
    2, \
    TOKEN_BEGIN, \
    TOKEN_END

#define FOLLOW_LIST_for_definition \
    5, \
    TOKEN_CONST, \
    TOKEN_END, \
    TOKEN_PROCEDURE, \
    TOKEN_TYPE, \
    TOKEN_VAR

#define FOLLOW_LIST_for_const_declaration \
    1, \
    TOKEN_SEMICOLON

#define FOLLOW_LIST_for_type \
    1, \
    TOKEN_SEMICOLON

#define FOLLOW_LIST_for_range \
    1, \
    TOKEN_OF

#define FOLLOW_LIST_for_enumeration_type \
    1, \
    TOKEN_SEMICOLON

#define FOLLOW_LIST_for_array_type \
    1, \
    TOKEN_SEMICOLON

#define FOLLOW_LIST_for_record_type \
    1, \
    TOKEN_SEMICOLON

#define FOLLOW_LIST_for_field_list_sequence \
    1, \
    TOKEN_END

#define FOLLOW_LIST_for_field_list \
    2, \
    TOKEN_END, \
    TOKEN_SEMICOLON

#define FOLLOW_LIST_for_set_type \
    1, \
    TOKEN_SEMICOLON

#define FOLLOW_LIST_for_pointer_type \
    1, \
    TOKEN_SEMICOLON

#define FOLLOW_LIST_for_procedure_type \
    1, \
    TOKEN_SEMICOLON

#define FOLLOW_LIST_for_formal_type_list \
    1, \
    TOKEN_CLOSING_PARENTHESIS

#define FOLLOW_LIST_for_formal_type \
    2, \
    TOKEN_COMMA, \
    TOKEN_CLOSING_PARENTHESIS

#define FOLLOW_LIST_for_simple_formal_type \
    3, \
    TOKEN_COMMA, \
    TOKEN_SEMICOLON, \
    TOKEN_CLOSING_PARENTHESIS

#define FOLLOW_LIST_for_attributed_formal_type \
    2, \
    TOKEN_COMMA, \
    TOKEN_CLOSING_PARENTHESIS

#define FOLLOW_LIST_for_non_variadic_formal_type_list \
    1, \
    TOKEN_CLOSING_PARENTHESIS

#define FOLLOW_LIST_for_non_variadic_formal_type \
    2, \
    TOKEN_COMMA, \
    TOKEN_CLOSING_PARENTHESIS

#define FOLLOW_LIST_for_variable_declaration \
    1, \
    TOKEN_SEMICOLON

#define FOLLOW_LIST_for_procedure_declaration \
    1, \
    TOKEN_SEMICOLON

#define FOLLOW_LIST_for_procedure_header \
    1, \
    TOKEN_SEMICOLON

#define FOLLOW_LIST_for_formal_param_list \
    1, \
    TOKEN_CLOSING_PARENTHESIS

#define FOLLOW_LIST_for_formal_params \
    2, \
    TOKEN_SEMICOLON, \
    TOKEN_CLOSING_PARENTHESIS

#define FOLLOW_LIST_for_variadic_attribute \
    3, \
    TOKEN_ARRAY, \
    TOKEN_CAST, \
    TOKEN_IDENTIFIER

#define FOLLOW_LIST_for_non_variadic_formal_param_list \
    1, \
    TOKEN_CLOSING_PARENTHESIS

#define FOLLOW_LIST_for_non_variadic_formal_params \
    2, \
    TOKEN_SEMICOLON, \
    TOKEN_CLOSING_PARENTHESIS

#define FOLLOW_LIST_for_statement \
    5, \
    TOKEN_ELSE, \
    TOKEN_END, \
    TOKEN_UNTIL, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR

#define FOLLOW_LIST_for_statement_sequence \
    5, \
    TOKEN_ELSE, \
    TOKEN_ELSIF, \
    TOKEN_END, \
    TOKEN_UNTIL, \
    TOKEN_CASE_LABEL_SEPARATOR

#define FOLLOW_LIST_for_assignment_or_procedure_call \
    5, \
    TOKEN_ELSE, \
    TOKEN_END, \
    TOKEN_UNTIL, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR

#define FOLLOW_LIST_for_if_statement \
    5, \
    TOKEN_ELSE, \
    TOKEN_END, \
    TOKEN_UNTIL, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR

#define FOLLOW_LIST_for_case_statement \
    5, \
    TOKEN_ELSE, \
    TOKEN_END, \
    TOKEN_UNTIL, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR

#define FOLLOW_LIST_for_case \
    3, \
    TOKEN_ELSE, \
    TOKEN_END, \
    TOKEN_CASE_LABEL_SEPARATOR

#define FOLLOW_LIST_for_case_labels \
    2, \
    TOKEN_COMMA, \
    TOKEN_COLON

#define FOLLOW_LIST_for_while_statement \
    5, \
    TOKEN_ELSE, \
    TOKEN_END, \
    TOKEN_UNTIL, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR

#define FOLLOW_LIST_for_repeat_statement \
    5, \
    TOKEN_ELSE, \
    TOKEN_END, \
    TOKEN_UNTIL, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR

#define FOLLOW_LIST_for_loop_statement \
    5, \
    TOKEN_ELSE, \
    TOKEN_END, \
    TOKEN_UNTIL, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR

#define FOLLOW_LIST_for_for_statement \
    5, \
    TOKEN_ELSE, \
    TOKEN_END, \
    TOKEN_UNTIL, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR

#define FOLLOW_LIST_for_const_expression \
    11, \
    TOKEN_BY, \
    TOKEN_DO, \
    TOKEN_OF, \
    TOKEN_COMMA, \
    TOKEN_RANGE_OP, \
    TOKEN_COLON, \
    TOKEN_SEMICOLON, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_OPENING_BRACE, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_bool_const_term \
    12, \
    TOKEN_BY, \
    TOKEN_DO, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_COMMA, \
    TOKEN_RANGE_OP, \
    TOKEN_COLON, \
    TOKEN_SEMICOLON, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_OPENING_BRACE, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_bool_const_factor \
    13, \
    TOKEN_AND, \
    TOKEN_BY, \
    TOKEN_DO, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_COMMA, \
    TOKEN_RANGE_OP, \
    TOKEN_COLON, \
    TOKEN_SEMICOLON, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_OPENING_BRACE, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_rel_const_expr \
    13, \
    TOKEN_AND, \
    TOKEN_BY, \
    TOKEN_DO, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_COMMA, \
    TOKEN_RANGE_OP, \
    TOKEN_COLON, \
    TOKEN_SEMICOLON, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_OPENING_BRACE, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_relation \
    8, \
    TOKEN_CAST, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_MINUS_OP, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FOLLOW_LIST_for_simple_const_expr \
    20, \
    TOKEN_AND, \
    TOKEN_BY, \
    TOKEN_DO, \
    TOKEN_IN, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_NOT_EQUAL_OP, \
    TOKEN_COMMA, \
    TOKEN_RANGE_OP, \
    TOKEN_COLON, \
    TOKEN_SEMICOLON, \
    TOKEN_LESS_OP, \
    TOKEN_LESS_OR_EQUAL_OP, \
    TOKEN_EQUAL_OP, \
    TOKEN_GREATER_OP, \
    TOKEN_GREATER_OR_EQUAL_OP, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_OPENING_BRACE, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_add_operator \
    6, \
    TOKEN_CAST, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FOLLOW_LIST_for_const_term \
    22, \
    TOKEN_AND, \
    TOKEN_BY, \
    TOKEN_DO, \
    TOKEN_IN, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_NOT_EQUAL_OP, \
    TOKEN_PLUS_OP, \
    TOKEN_COMMA, \
    TOKEN_MINUS_OP, \
    TOKEN_RANGE_OP, \
    TOKEN_COLON, \
    TOKEN_SEMICOLON, \
    TOKEN_LESS_OP, \
    TOKEN_LESS_OR_EQUAL_OP, \
    TOKEN_EQUAL_OP, \
    TOKEN_GREATER_OP, \
    TOKEN_GREATER_OR_EQUAL_OP, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_OPENING_BRACE, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_mul_operator \
    6, \
    TOKEN_CAST, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_OPENING_BRACE

#define FOLLOW_LIST_for_const_factor \
    26, \
    TOKEN_AND, \
    TOKEN_BY, \
    TOKEN_DIV, \
    TOKEN_DO, \
    TOKEN_IN, \
    TOKEN_MOD, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_NOT_EQUAL_OP, \
    TOKEN_ASTERISK_OP, \
    TOKEN_PLUS_OP, \
    TOKEN_COMMA, \
    TOKEN_MINUS_OP, \
    TOKEN_RANGE_OP, \
    TOKEN_SLASH_OP, \
    TOKEN_COLON, \
    TOKEN_SEMICOLON, \
    TOKEN_LESS_OP, \
    TOKEN_LESS_OR_EQUAL_OP, \
    TOKEN_EQUAL_OP, \
    TOKEN_GREATER_OP, \
    TOKEN_GREATER_OR_EQUAL_OP, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_OPENING_BRACE, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_designator \
    6, \
    TOKEN_END, \
    TOKEN_INCREMENT_OP, \
    TOKEN_DECREMENT_OP, \
    TOKEN_ASSIGN_OP, \
    TOKEN_SEMICOLON, \
    TOKEN_OPENING_PARENTHESIS

#define FOLLOW_LIST_for_designator_tail \
    6, \
    TOKEN_END, \
    TOKEN_INCREMENT_OP, \
    TOKEN_DECREMENT_OP, \
    TOKEN_ASSIGN_OP, \
    TOKEN_SEMICOLON, \
    TOKEN_OPENING_PARENTHESIS

#define FOLLOW_LIST_for_expression_list \
    2, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET

#define FOLLOW_LIST_for_expression \
    16, \
    TOKEN_BY, \
    TOKEN_DO, \
    TOKEN_ELSE, \
    TOKEN_ELSIF, \
    TOKEN_END, \
    TOKEN_OF, \
    TOKEN_THEN, \
    TOKEN_TO, \
    TOKEN_UNTIL, \
    TOKEN_COMMA, \
    TOKEN_RANGE_OP, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_bool_term \
    17, \
    TOKEN_BY, \
    TOKEN_DO, \
    TOKEN_ELSE, \
    TOKEN_ELSIF, \
    TOKEN_END, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_THEN, \
    TOKEN_TO, \
    TOKEN_UNTIL, \
    TOKEN_COMMA, \
    TOKEN_RANGE_OP, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_bool_factor \
    18, \
    TOKEN_AND, \
    TOKEN_BY, \
    TOKEN_DO, \
    TOKEN_ELSE, \
    TOKEN_ELSIF, \
    TOKEN_END, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_THEN, \
    TOKEN_TO, \
    TOKEN_UNTIL, \
    TOKEN_COMMA, \
    TOKEN_RANGE_OP, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_rel_expression \
    18, \
    TOKEN_AND, \
    TOKEN_BY, \
    TOKEN_DO, \
    TOKEN_ELSE, \
    TOKEN_ELSIF, \
    TOKEN_END, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_THEN, \
    TOKEN_TO, \
    TOKEN_UNTIL, \
    TOKEN_COMMA, \
    TOKEN_RANGE_OP, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_simple_expression \
    25, \
    TOKEN_AND, \
    TOKEN_BY, \
    TOKEN_DO, \
    TOKEN_ELSE, \
    TOKEN_ELSIF, \
    TOKEN_END, \
    TOKEN_IN, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_THEN, \
    TOKEN_TO, \
    TOKEN_UNTIL, \
    TOKEN_NOT_EQUAL_OP, \
    TOKEN_COMMA, \
    TOKEN_RANGE_OP, \
    TOKEN_SEMICOLON, \
    TOKEN_LESS_OP, \
    TOKEN_LESS_OR_EQUAL_OP, \
    TOKEN_EQUAL_OP, \
    TOKEN_GREATER_OP, \
    TOKEN_GREATER_OR_EQUAL_OP, \
    TOKEN_CASE_LABEL_SEPARATOR, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_term \
    27, \
    TOKEN_AND, \
    TOKEN_BY, \
    TOKEN_DO, \
    TOKEN_ELSE, \
    TOKEN_ELSIF, \
    TOKEN_END, \
    TOKEN_IN, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_THEN, \
    TOKEN_TO, \
    TOKEN_UNTIL, \
    TOKEN_NOT_EQUAL_OP, \
    TOKEN_PLUS_OP, \
    TOKEN_COMMA, \
    TOKEN_MINUS_OP, \
    TOKEN_RANGE_OP, \
    TOKEN_SEMICOLON, \
    TOKEN_LESS_OP, \
    TOKEN_LESS_OR_EQUAL_OP, \
    TOKEN_EQUAL_OP, \
    TOKEN_GREATER_OP, \
    TOKEN_GREATER_OR_EQUAL_OP, \
    TOKEN_CASE_LABEL_SEPARATOR, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_factor \
    31, \
    TOKEN_AND, \
    TOKEN_BY, \
    TOKEN_DIV, \
    TOKEN_DO, \
    TOKEN_ELSE, \
    TOKEN_ELSIF, \
    TOKEN_END, \
    TOKEN_IN, \
    TOKEN_MOD, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_THEN, \
    TOKEN_TO, \
    TOKEN_UNTIL, \
    TOKEN_NOT_EQUAL_OP, \
    TOKEN_ASTERISK_OP, \
    TOKEN_PLUS_OP, \
    TOKEN_COMMA, \
    TOKEN_MINUS_OP, \
    TOKEN_RANGE_OP, \
    TOKEN_SLASH_OP, \
    TOKEN_SEMICOLON, \
    TOKEN_LESS_OP, \
    TOKEN_LESS_OR_EQUAL_OP, \
    TOKEN_EQUAL_OP, \
    TOKEN_GREATER_OP, \
    TOKEN_GREATER_OR_EQUAL_OP, \
    TOKEN_CASE_LABEL_SEPARATOR, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_designator_or_procedure_call \
    21, \
    TOKEN_DO, \
    TOKEN_ELSE, \
    TOKEN_ELSIF, \
    TOKEN_END, \
    TOKEN_NOT, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_THEN, \
    TOKEN_TO, \
    TOKEN_UNTIL, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_COMMA, \
    TOKEN_MINUS_OP, \
    TOKEN_TYPE_CONVERSION_OP, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET

#define FOLLOW_LIST_for_actual_parameters \
    21, \
    TOKEN_DO, \
    TOKEN_ELSE, \
    TOKEN_ELSIF, \
    TOKEN_END, \
    TOKEN_NOT, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_THEN, \
    TOKEN_TO, \
    TOKEN_UNTIL, \
    TOKEN_IDENTIFIER, \
    TOKEN_NUMERIC_LITERAL, \
    TOKEN_STRING_LITERAL, \
    TOKEN_PLUS_OP, \
    TOKEN_COMMA, \
    TOKEN_MINUS_OP, \
    TOKEN_TYPE_CONVERSION_OP, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_CLOSING_BRACKET

#define FOLLOW_LIST_for_const_structured_value \
    7, \
    TOKEN_ELSE, \
    TOKEN_END, \
    TOKEN_UNTIL, \
    TOKEN_COMMA, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_const_value_component \
    2, \
    TOKEN_COMMA, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_structured_value \
    7, \
    TOKEN_ELSE, \
    TOKEN_END, \
    TOKEN_UNTIL, \
    TOKEN_COMMA, \
    TOKEN_SEMICOLON, \
    TOKEN_CASE_LABEL_SEPARATOR, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_value_component \
    2, \
    TOKEN_COMMA, \
    TOKEN_CLOSING_BRACE

#define FOLLOW_LIST_for_qualident \
    35, \
    TOKEN_AND, \
    TOKEN_DIV, \
    TOKEN_DO, \
    TOKEN_ELSE, \
    TOKEN_ELSIF, \
    TOKEN_END, \
    TOKEN_IN, \
    TOKEN_MOD, \
    TOKEN_OF, \
    TOKEN_OR, \
    TOKEN_THEN, \
    TOKEN_TO, \
    TOKEN_UNTIL, \
    TOKEN_NOT_EQUAL_OP, \
    TOKEN_ASTERISK_OP, \
    TOKEN_PLUS_OP, \
    TOKEN_INCREMENT_OP, \
    TOKEN_COMMA, \
    TOKEN_MINUS_OP, \
    TOKEN_DECREMENT_OP, \
    TOKEN_SLASH_OP, \
    TOKEN_TYPE_CONVERSION_OP, \
    TOKEN_ASSIGN_OP, \
    TOKEN_SEMICOLON, \
    TOKEN_LESS_OP, \
    TOKEN_LESS_OR_EQUAL_OP, \
    TOKEN_EQUAL_OP, \
    TOKEN_GREATER_OP, \
    TOKEN_GREATER_OR_EQUAL_OP, \
    TOKEN_POINTER_DEREF_OP, \
    TOKEN_CASE_LABEL_SEPARATOR, \
    TOKEN_OPENING_PARENTHESIS, \
    TOKEN_CLOSING_PARENTHESIS, \
    TOKEN_OPENING_BRACKET, \
    TOKEN_CLOSING_BRACKET

#define FOLLOW_LIST_for_ident_list \
    4, \
    TOKEN_END, \
    TOKEN_COLON, \
    TOKEN_SEMICOLON, \
    TOKEN_CLOSING_PARENTHESIS


#endif /* M2_FIRST_FOLLOW_H */


// END OF FILE
