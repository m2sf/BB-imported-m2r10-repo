(* (C) 2009, 2010 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE Dictionary [CollectionType];

(* Example of a collection library using operator bindings *)

TYPE Dictionary = OPAQUE;


(* key and value type *)

TYPE KeyType = ALIAS OF CARDINAL; (* arbitrary type *)

TYPE ValueType = ARRAY 255 OF CHAR; (* arbitrary type *)


(* allocator *)

PROCEDURE [NEW] new ( VAR dict : Dictionary );
(* Allocates a new collection and passes a reference to it back in dict *)


(* accessor *)

PROCEDURE [?] retrieveValue ( dict      : Dictionary;
                              key       : KeyType;
                              VAR value : ValueType;
                              VAR found : BOOLEAN );
(* Searches for key in dict. If key is present in dict, its value is passed
   back in value and TRUE is passed back in found. If key is not present in
   dict, no value is passed back in value and FALSE is passed back in found.
   This procedure is bound to the [ ] operator for expressions of the form
   dict[key] where dict is of type Dictionary and key is of type KeyType. *)


(* mutators *)

PROCEDURE [!] storeValue ( dict         : Dictionary;
                           key          : KeyType;
                           CONST value  : ValueType;
                           remove       : BOOLEAN );
(* Stores or modifies a key/value pair in dict. If key is not present in dict
   and FALSE is passed in remove, the key/value pair is stored in dict. If key
   is present in dict and FALSE is passed in remove, the value of key is re-
   placed by value. If key is present in dict and TRUE is passed in remove,
   the key/value pair is removed. If key is not present in dict and TRUE is
   passed in remove, the procedure returns without effect. This procedure is
   bound to the [ ] operator for assignments of the form dict[key] := value
   where dict is of type Dictionary, key is of type KeyType and value is of
   type ValueType or NIL: *)


(* counter *)

PROCEDURE [COUNT] entryCount ( dict : Dictionary ) : LONGCARD;
(* Returns the number of entries stored in dict. This function is bound
   to pervasive function COUNT for type Dictionary. *)


(* iterator *)

PROCEDURE [FOR] nextEntry ( dict : Dictionary;
                            VAR key : KeyType; VAR value : ValueType );
(* Finds the successor key of key in dict and passes its key/value pair back
   in key and value. If the null key is passed in then the first key/value
   pair is passed back in key and value. If no successor key is found then
   the null key is passed back in key and value remain unmodified. This
   procedure is bound to the FOR .. IN iterator for type Dictionary. *)


(* destructor *)

PROCEDURE [DISPOSE] dispose ( VAR dict : Dictionary );
(* Deallocates dict and passes NIL back in dict. This procedure
   is bound to pervasive procedure DISPOSE for type Dictionary. *)


END Dictionary.