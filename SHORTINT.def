(* (C) 2009, 2010 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE SHORTINT;

(* 16-bit Integer Numbers *) 


FROM FileIO IMPORT File; (* required for IO *)


(* SHORTINT type *)

TYPE
    SHORTINT = OPAQUE RECORD ("Z-Type")
        value : ARRAY 2 OF OCTET; (* 16 bits *)
    END; (* SHORTINT *)


(* Z-Type bindings to operators, pervasives and primitives: *)


(* Range *) 

CONST [TMIN] minValue = -32768;
(* Smallest value of type SHORTINT.
   This value is bound to TMIN for type SHORTINT. *) 

CONST [TMAX] maxValue = 32767;
(* Largest value of type SHORTINT.
   This value is bound to TMAX for type SHORTINT. *)


(* Literal assignment *)

PROCEDURE [:=] assign ( VAR assignTo : SHORTINT; literal : ARRAY OF CHAR );
(* Converts string literal to a SHORTINT value and assigns it to assignTo.
   This function is bound to the := operator for literal assignment. *)


(* Type conversions *)

PROCEDURE [::] toCARD  ( n : SHORTINT ) : CARDINAL;
(* Converts SHORTINT value n to a CARDINAL value and returns it. This
   function is bound to the :: operator for SHORTINT to CARDINAL conversion. *)

PROCEDURE [::] toINT ( n : SHORTINT ) : INTEGER; 
(* Converts SHORTINT value n to an INTEGER value and returns it. This
   function is bound to the :: operator for SHORTINT to INTEGER conversion. *)

PROCEDURE [::] fromCARD  ( n : CARDINAL ) : SHORTINT;
(* Converts CARDINAL value n to a SHORTINT value and returns it. This function
   is bound to the :: operator for CARDINAL to SHORTINT conversion. *)

PROCEDURE [::] fromINT  ( n : INTEGER ) : SHORTINT;
(* Converts INTEGER value n to a SHORTINT value and returns it. This function
   is bound to the :: operator for INTEGER to SHORTINT conversion. *)


(* Monadic arithmetic operations *) 

PROCEDURE [ABS] abs ( n : SHORTINT ) : SHORTINT;
(* Returns the absolute value of SHORTINT value n.
   This function is bound to pervasive function ABS for type SHORTINT. *)

PROCEDURE [NEG] neg ( n : SHORTINT ) : SHORTINT;
(* Returns the sign reversed value of SHORTINT value n.
   This function is bound to the unary minus operator for type SHORTINT. *)

PROCEDURE [ODD] odd ( n : SHORTINT ) : BOOLEAN;
(* Returns TRUE if SHORTINT value n is odd, otherwise FALSE.
   This function is bound to pervasive function ODD for type SHORTINT. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( n1, n2 : SHORTINT ) : SHORTINT;
(* Adds SHORTINT values n1 and n2 and returns the result.
   This function is bound to the + operator for type SHORTINT. *)

PROCEDURE [-] sub ( n1, n2 : SHORTINT ) : SHORTINT;
(* Subtracts SHORTINT value n2 from n1 and returns the result.
   This function is bound to the - operator for type SHORTINT. *)

PROCEDURE [*] multiply ( n1, n2 : SHORTINT ) : SHORTINT;
(* Multiplies SHORTINT values n1 and n2 and returns the result.
   This function it bound to the * operator for type SHORTINT. *)

PROCEDURE [/] divide ( n1, n2 : SHORTINT ) : SHORTINT;
(* Divives SHORTINT value n1 by n2 and returns the result.
   This function is bound to the / operator for type SHORTINT. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( n1, n2 : SHORTINT ) : BOOLEAN;
(* Returns TRUE if SHORTINT values n1 and n2 are equal, otherwise FALSE.
   This function is bound to operators = and # for type SHORTINT. *)

PROCEDURE [<] isLess ( n1, n2 : SHORTINT ) : BOOLEAN;
(* Returns TRUE if SHORTINT value n1 is less than n2, otherwise FASLE.
   This function is bound to operators < and >= for type SHORTINT. *)

PROCEDURE [>] isGreater ( n1, n2 : SHORTINT ) : BOOLEAN;
(* Returns TRUE if SHORTINT value n1 is greater than n2, otherwise FALSE.
   This function is bound to operators > and <= for type SHORTINT. *)


(* Scalar conversion primitives *)

CONST digitCapacity = 4; (* maximum digits in native format *)

PROCEDURE [TO] toSXF ( n : SHORTINT; VAR s : ARRAY OF CHAR );
(* Converts SHORTINT value n to a string in scalar exchange format.
   This function is used to synthesise conversions to other scalar types
   when no direct conversion path exists. *)

PROCEDURE [FROM] fromSXF ( VAR n : SHORTINT; s : ARRAY OF CHAR );
(* Converts a string in scalar exchange format to a SHORTINT value.
   This function is used to synthesise conversions from other scalar types
   when no direct conversion path exists. *)


(* IO operations *)

PROCEDURE Read( infile : File; VAR n : SHORTINT );
(* Reads the textual representation of a SHORTINT value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the numeral being read are
     removed from infile
   - the numeric value of the numeral string read is assigned to the variable
     passed in for n
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   function is substituted for invocations of READ with a SHORTINT argument. *)

PROCEDURE Write( outfile : File; n : SHORTINT );
(* Writes the textual representation of value n to stream outfile. This
   function is substituted for invocations of WRITE with a SHORTINT argument.*)

PROCEDURE WriteF( outfile : File; fmtStr : ARRAY OF CHAR;
                  items : CARDINAL; VARIADIC v[items] OF n : SHORTINT );
(* Writes a formatted textual representation of one or more SHORTINT values to
   output stream outfile. The value of parameter items is calculated and
   inserted automatically. The output format is determined by fmtStr.
   This function is substituted for invocations of WRITEF with one or more
   SHORTINT arguments. *)

END SHORTINT.