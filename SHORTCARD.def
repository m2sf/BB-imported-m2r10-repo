(* (C) 2009, 2010 by B.Kowarsch & R.Sutcliffe. All rights reserved. *)

DEFINITION MODULE SHORTCARD;

(* 16-bit Unsigned Integer Numbers *) 


FROM FileIO IMPORT File; (* required for IO *)


(* SHORTCARD type *)

TYPE
    SHORTCARD = OPAQUE RECORD ("Z-Type")
        value : ARRAY 2 OF OCTET; (* 16 bits *)
    END; (* SHORTCARD *)


(* Z-Type bindings to operators, pervasives and primitives: *)


(* Range *) 

CONST [TMIN] minValue = 0;
(* Smallest value of type SHORTCARD.
   This value is bound to TMIN for type SHORTCARD. *) 

CONST [TMAX] maxValue = 65535;
(* Largest value of type SHORTCARD.
   This value is bound to TMAX for type SHORTCARD. *)


(* Literal assignment *)

PROCEDURE [:=] assign ( VAR assignTo : SHORTCARD; literal : ARRAY OF CHAR );
(* Converts string literal to a SHORTCARD value and assigns it to assignTo.
   This function is bound to the := operator for literal assignment. *)


(* Type conversions *)

PROCEDURE [::] toCARD  ( n : SHORTCARD ) : CARDINAL;
(* Converts SHORTCARD value n to a CARDINAL value and returns it. This
   function is bound to the :: operator for SHORTCARD to CARDINAL conversion.*)

PROCEDURE [::] toINT ( n : SHORTCARD ) : INTEGER; 
(* Converts SHORTCARD value n to an INTEGER value and returns it. This
   function is bound to the :: operator for SHORTCARD to INTEGER conversion. *)

PROCEDURE [::] fromCARD  ( n : CARDINAL ) : SHORTCARD;
(* Converts CARDINAL value n to a SHORTCARD value and returns it. This function
   is bound to the :: operator for CARDINAL to SHORTCARD conversion. *)

PROCEDURE [::] fromINT  ( n : INTEGER ) : SHORTCARD;
(* Converts INTEGER value n to a SHORTCARD value and returns it. This function
   is bound to the :: operator for INTEGER to SHORTCARD conversion. *)


(* Monadic arithmetic operations *) 

PROCEDURE [ABS] abs ( n : SHORTCARD ) : SHORTCARD;
(* Returns the absolute value of SHORTCARD value n.
   This function is bound to pervasive function ABS for type SHORTCARD. *)

PROCEDURE [ODD] odd ( n : SHORTCARD ) : BOOLEAN;
(* Returns TRUE if SHORTCARD value n is odd, otherwise FALSE.
   This function is bound to pervasive function ODD for type SHORTCARD. *)


(* Dyadic arithmetic operations *) 

PROCEDURE [+] add ( n1, n2 : SHORTCARD ) : SHORTCARD;
(* Adds SHORTCARD values n1 and n2 and returns the result.
   This function is bound to the + operator for type SHORTCARD. *)

PROCEDURE [-] sub ( n1, n2 : SHORTCARD ) : SHORTCARD;
(* Subtracts SHORTCARD value n2 from n1 and returns the result.
   This function is bound to the - operator for type SHORTCARD. *)

PROCEDURE [*] multiply ( n1, n2 : SHORTCARD ) : SHORTCARD;
(* Multiplies SHORTCARD values n1 and n2 and returns the result.
   This function it bound to the * operator for type SHORTCARD. *)

PROCEDURE [/] divide ( n1, n2 : SHORTCARD ) : SHORTCARD;
(* Divives SHORTCARD value n1 by n2 and returns the result.
   This function is bound to the / operator for type SHORTCARD. *)


(* Relational operations *) 

PROCEDURE [=] isEqual ( n1, n2 : SHORTCARD ) : BOOLEAN;
(* Returns TRUE if SHORTCARD values n1 and n2 are equal, otherwise FALSE.
   This function is bound to operators = and # for tyep SHORTCARD. *)

PROCEDURE [<] isLess ( n1, n2 : SHORTCARD ) : BOOLEAN;
(* Returns TRUE if SHORTCARD value n1 is less than n2, otherwise FASLE.
   This function is bound to operators < and >= for type SHORTCARD. *)

PROCEDURE [>] isGreater ( n1, n2 : SHORTCARD ) : BOOLEAN;
(* Returns TRUE if SHORTCARD value n1 is greater than n2, otherwise FALSE.
   This function is bound to operators > and <= for type SHORTCARD. *)


(* Scalar conversion primitives *)

CONST digitCapacity = 4; (* maximum digits in native format *)

PROCEDURE [TO] toSXF ( n : SHORTCARD; VAR s : ARRAY OF CHAR );
(* Converts SHORTCARD value n to a string in scalar exchange format.
   This function is used to synthesise conversions to other scalar types
   when no direct conversion path exists. *)

PROCEDURE [FROM] fromSXF ( VAR n : SHORTCARD; s : ARRAY OF CHAR );
(* Converts a string in scalar exchange format to a SHORTCARD value.
   This function is used to synthesise conversions from other scalar types
   when no direct conversion path exists. *)


(* IO operations *)

PROCEDURE Read( infile : File; VAR n : SHORTCARD );
(* Reads the textual representation of a SHORTCARD value from stream infile
   - any leading whitespace is skipped
   - any remaining characters that are part of the numeral being read are
     removed from infile
   - the numeric value of the numeral string read is assigned to the variable
     passed in for n
   - the file status is set to any of:
     success, outOfRange, wrongFormat, endOfLine, or endOfInput. This
   function is substituted for invocations of READ with a SHORTCARD argument. *)

PROCEDURE Write( outfile : File; n : SHORTCARD );
(* Writes the textual representation of value n to stream outfile. This
   function is substituted for invocations of WRITE with a SHORTCARD argument.*)

PROCEDURE WriteF( outfile : File; fmtStr : ARRAY OF CHAR;
                  items : CARDINAL; VARIADIC v[items] OF n : SHORTCARD );
(* Writes a formatted textual representation of one or more SHORTCARD values to
   output stream outfile. The value of parameter items is calculated and
   inserted automatically. The output format is determined by fmtStr.
   This function is substituted for invocations of WRITEF with one or more
   SHORTCARD arguments. *)

END SHORTCARD.